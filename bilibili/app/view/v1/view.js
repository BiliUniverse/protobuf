// @generated by protobuf-ts 2.9.6 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/app/view/v1/view.proto" (package "bilibili.app.view.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.6 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/app/view/v1/view.proto" (package "bilibili.app.view.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../google/protobuf/any";
// @generated message type with reflection information, may provide speed optimized methods
class CacheViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CacheViewReply", [
            { no: 13, name: "tf_panel_customized", kind: "message", T: () => TFPanelCustomized }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized */ 13:
                    message.tfPanelCustomized = TFPanelCustomized.internalBinaryRead(reader, reader.uint32(), options, message.tfPanelCustomized);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized = 13; */
        if (message.tfPanelCustomized)
            TFPanelCustomized.internalBinaryWrite(message.tfPanelCustomized, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CacheViewReply
 */
export const CacheViewReply = new CacheViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheViewReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CacheViewReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trackid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ad_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.aid = 0;
        message.bvid = "";
        message.from = "";
        message.trackid = "";
        message.adExtra = "";
        message.spmid = "";
        message.fromSpmid = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toNumber();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* string from */ 3:
                    message.from = reader.string();
                    break;
                case /* string trackid */ 4:
                    message.trackid = reader.string();
                    break;
                case /* string ad_extra */ 5:
                    message.adExtra = reader.string();
                    break;
                case /* string spmid */ 6:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 7:
                    message.fromSpmid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* string from = 3; */
        if (message.from !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.from);
        /* string trackid = 4; */
        if (message.trackid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.trackid);
        /* string ad_extra = 5; */
        if (message.adExtra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.adExtra);
        /* string spmid = 6; */
        if (message.spmid !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 7; */
        if (message.fromSpmid !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.fromSpmid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CacheViewReq
 */
export const CacheViewReq = new CacheViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CM$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CM", [
            { no: 1, name: "source_content", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any source_content */ 1:
                    message.sourceContent = Any.internalBinaryRead(reader, reader.uint32(), options, message.sourceContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Any source_content = 1; */
        if (message.sourceContent)
            Any.internalBinaryWrite(message.sourceContent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CM
 */
export const CM = new CM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMConfig$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CMConfig", [
            { no: 1, name: "ads_control", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any ads_control */ 1:
                    message.adsControl = Any.internalBinaryRead(reader, reader.uint32(), options, message.adsControl);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Any ads_control = 1; */
        if (message.adsControl)
            Any.internalBinaryWrite(message.adsControl, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CMConfig
 */
export const CMConfig = new CMConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CmIpad$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CmIpad", [
            { no: 5, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.aid = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 5:
                    message.aid = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 5; */
        if (message.aid !== 0)
            writer.tag(5, WireType.Varint).int64(message.aid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CmIpad
 */
export const CmIpad = new CmIpad$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Relate$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Relate", [
            { no: 28, name: "cm", kind: "message", T: () => CM }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.CM cm */ 28:
                    message.cm = CM.internalBinaryRead(reader, reader.uint32(), options, message.cm);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.CM cm = 28; */
        if (message.cm)
            CM.internalBinaryWrite(message.cm, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Relate
 */
export const Relate = new Relate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TFInfoReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.TFInfoReply", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.TFInfoReply
 */
export const TFInfoReply = new TFInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TFPanelCustomized$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.TFPanelCustomized", [
            { no: 2, name: "right_btn_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.rightBtnText = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string right_btn_text */ 2:
                    message.rightBtnText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string right_btn_text = 2; */
        if (message.rightBtnText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rightBtnText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.TFPanelCustomized
 */
export const TFPanelCustomized = new TFPanelCustomized$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TIcon$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.TIcon", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.icon = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.TIcon
 */
export const TIcon = new TIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewReply", [
            { no: 6, name: "t_icon", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => TIcon } },
            { no: 10, name: "relates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relate },
            { no: 30, name: "cms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CM },
            { no: 31, name: "cm_config", kind: "message", T: () => CMConfig },
            { no: 34, name: "tf_panel_customized", kind: "message", T: () => TFPanelCustomized },
            { no: 41, name: "cm_ipad", kind: "message", T: () => CmIpad }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tIcon = {};
        message.relates = [];
        message.cms = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, bilibili.app.view.v1.TIcon> t_icon */ 6:
                    this.binaryReadMap6(message.tIcon, reader, options);
                    break;
                case /* repeated bilibili.app.view.v1.Relate relates */ 10:
                    message.relates.push(Relate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.view.v1.CM cms */ 30:
                    message.cms.push(CM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.CMConfig cm_config */ 31:
                    message.cmConfig = CMConfig.internalBinaryRead(reader, reader.uint32(), options, message.cmConfig);
                    break;
                case /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized */ 34:
                    message.tfPanelCustomized = TFPanelCustomized.internalBinaryRead(reader, reader.uint32(), options, message.tfPanelCustomized);
                    break;
                case /* bilibili.app.view.v1.CmIpad cm_ipad */ 41:
                    message.cmIpad = CmIpad.internalBinaryRead(reader, reader.uint32(), options, message.cmIpad);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap6(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = TIcon.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.view.v1.ViewReply.t_icon");
            }
        }
        map[key ?? ""] = val ?? TIcon.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<string, bilibili.app.view.v1.TIcon> t_icon = 6; */
        for (let k of globalThis.Object.keys(message.tIcon)) {
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            TIcon.internalBinaryWrite(message.tIcon[k], writer, options);
            writer.join().join();
        }
        /* repeated bilibili.app.view.v1.Relate relates = 10; */
        for (let i = 0; i < message.relates.length; i++)
            Relate.internalBinaryWrite(message.relates[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.CM cms = 30; */
        for (let i = 0; i < message.cms.length; i++)
            CM.internalBinaryWrite(message.cms[i], writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.CMConfig cm_config = 31; */
        if (message.cmConfig)
            CMConfig.internalBinaryWrite(message.cmConfig, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized = 34; */
        if (message.tfPanelCustomized)
            TFPanelCustomized.internalBinaryWrite(message.tfPanelCustomized, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.CmIpad cm_ipad = 41; */
        if (message.cmIpad)
            CmIpad.internalBinaryWrite(message.cmIpad, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewReply
 */
export const ViewReply = new ViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trackid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ad_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "qn", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "fnver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fnval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "force_host", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "fourk", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "autoplay", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "page_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "biz_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "device_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 18, name: "relates_page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 19, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "in_feed_play", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "play_mode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "refresh", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "refresh_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.aid = 0;
        message.bvid = "";
        message.from = "";
        message.trackid = "";
        message.adExtra = "";
        message.qn = 0;
        message.fnver = 0;
        message.fnval = 0;
        message.forceHost = 0;
        message.fourk = 0;
        message.spmid = "";
        message.fromSpmid = "";
        message.autoplay = 0;
        message.pageVersion = "";
        message.bizExtra = "";
        message.deviceType = 0;
        message.relatesPage = 0;
        message.sessionId = "";
        message.inFeedPlay = 0;
        message.playMode = "";
        message.refresh = 0;
        message.refreshNum = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toNumber();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* string from */ 3:
                    message.from = reader.string();
                    break;
                case /* string trackid */ 4:
                    message.trackid = reader.string();
                    break;
                case /* string ad_extra */ 5:
                    message.adExtra = reader.string();
                    break;
                case /* int32 qn */ 6:
                    message.qn = reader.int32();
                    break;
                case /* int32 fnver */ 7:
                    message.fnver = reader.int32();
                    break;
                case /* int32 fnval */ 8:
                    message.fnval = reader.int32();
                    break;
                case /* int32 force_host */ 9:
                    message.forceHost = reader.int32();
                    break;
                case /* int32 fourk */ 10:
                    message.fourk = reader.int32();
                    break;
                case /* string spmid */ 11:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 12:
                    message.fromSpmid = reader.string();
                    break;
                case /* int32 autoplay */ 13:
                    message.autoplay = reader.int32();
                    break;
                case /* string page_version */ 15:
                    message.pageVersion = reader.string();
                    break;
                case /* string biz_extra */ 16:
                    message.bizExtra = reader.string();
                    break;
                case /* int64 device_type */ 17:
                    message.deviceType = reader.int64().toNumber();
                    break;
                case /* int64 relates_page */ 18:
                    message.relatesPage = reader.int64().toNumber();
                    break;
                case /* string session_id */ 19:
                    message.sessionId = reader.string();
                    break;
                case /* int32 in_feed_play */ 20:
                    message.inFeedPlay = reader.int32();
                    break;
                case /* string play_mode */ 21:
                    message.playMode = reader.string();
                    break;
                case /* int32 refresh */ 23:
                    message.refresh = reader.int32();
                    break;
                case /* int32 refresh_num */ 24:
                    message.refreshNum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* string from = 3; */
        if (message.from !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.from);
        /* string trackid = 4; */
        if (message.trackid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.trackid);
        /* string ad_extra = 5; */
        if (message.adExtra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.adExtra);
        /* int32 qn = 6; */
        if (message.qn !== 0)
            writer.tag(6, WireType.Varint).int32(message.qn);
        /* int32 fnver = 7; */
        if (message.fnver !== 0)
            writer.tag(7, WireType.Varint).int32(message.fnver);
        /* int32 fnval = 8; */
        if (message.fnval !== 0)
            writer.tag(8, WireType.Varint).int32(message.fnval);
        /* int32 force_host = 9; */
        if (message.forceHost !== 0)
            writer.tag(9, WireType.Varint).int32(message.forceHost);
        /* int32 fourk = 10; */
        if (message.fourk !== 0)
            writer.tag(10, WireType.Varint).int32(message.fourk);
        /* string spmid = 11; */
        if (message.spmid !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 12; */
        if (message.fromSpmid !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.fromSpmid);
        /* int32 autoplay = 13; */
        if (message.autoplay !== 0)
            writer.tag(13, WireType.Varint).int32(message.autoplay);
        /* string page_version = 15; */
        if (message.pageVersion !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.pageVersion);
        /* string biz_extra = 16; */
        if (message.bizExtra !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.bizExtra);
        /* int64 device_type = 17; */
        if (message.deviceType !== 0)
            writer.tag(17, WireType.Varint).int64(message.deviceType);
        /* int64 relates_page = 18; */
        if (message.relatesPage !== 0)
            writer.tag(18, WireType.Varint).int64(message.relatesPage);
        /* string session_id = 19; */
        if (message.sessionId !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.sessionId);
        /* int32 in_feed_play = 20; */
        if (message.inFeedPlay !== 0)
            writer.tag(20, WireType.Varint).int32(message.inFeedPlay);
        /* string play_mode = 21; */
        if (message.playMode !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.playMode);
        /* int32 refresh = 23; */
        if (message.refresh !== 0)
            writer.tag(23, WireType.Varint).int32(message.refresh);
        /* int32 refresh_num = 24; */
        if (message.refreshNum !== 0)
            writer.tag(24, WireType.Varint).int32(message.refreshNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewReq
 */
export const ViewReq = new ViewReq$Type();
/**
 * @generated ServiceType for protobuf service bilibili.app.view.v1.View
 */
export const View = new ServiceType("bilibili.app.view.v1.View", [
    { name: "View", options: {}, I: ViewReq, O: ViewReply },
    { name: "CacheView", options: {}, I: CacheViewReq, O: CacheViewReply }
]);
