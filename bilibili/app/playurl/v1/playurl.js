// @generated by protobuf-ts 2.9.0 with parameter output_javascript
// @generated from protobuf file "bilibili/app/playurl/v1/playurl.proto" (syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewReply$Type extends MessageType {
    constructor() {
        super("PlayViewReply", [
            { no: 5, name: "play_arc", kind: "message", T: () => PlayArcConf }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayArcConf play_arc */ 5:
                    message.playArc = PlayArcConf.internalBinaryRead(reader, reader.uint32(), options, message.playArc);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* PlayArcConf play_arc = 5; */
        if (message.playArc)
            PlayArcConf.internalBinaryWrite(message.playArc, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayViewReply
 */
export const PlayViewReply = new PlayViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayArcConf$Type extends MessageType {
    constructor() {
        super("PlayArcConf", [
            { no: 1, name: "background_play_conf", kind: "message", T: () => ArcConf }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ArcConf background_play_conf */ 1:
                    message.backgroundPlayConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.backgroundPlayConf);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ArcConf background_play_conf = 1; */
        if (message.backgroundPlayConf)
            ArcConf.internalBinaryWrite(message.backgroundPlayConf, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayArcConf
 */
export const PlayArcConf = new PlayArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArcConf$Type extends MessageType {
    constructor() {
        super("ArcConf", [
            { no: 1, name: "is_support", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "disabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "extra_content", kind: "message", T: () => ExtraContent }
        ]);
    }
    create(value) {
        const message = { isSupport: false, disabled: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_support */ 1:
                    message.isSupport = reader.bool();
                    break;
                case /* bool disabled */ 2:
                    message.disabled = reader.bool();
                    break;
                case /* ExtraContent extra_content */ 3:
                    message.extraContent = ExtraContent.internalBinaryRead(reader, reader.uint32(), options, message.extraContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_support = 1; */
        if (message.isSupport !== false)
            writer.tag(1, WireType.Varint).bool(message.isSupport);
        /* bool disabled = 2; */
        if (message.disabled !== false)
            writer.tag(2, WireType.Varint).bool(message.disabled);
        /* ExtraContent extra_content = 3; */
        if (message.extraContent)
            ExtraContent.internalBinaryWrite(message.extraContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ArcConf
 */
export const ArcConf = new ArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraContent$Type extends MessageType {
    constructor() {
        super("ExtraContent", [
            { no: 1, name: "disabled_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "disabled_code", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { disabledReason: "", disabledCode: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string disabled_reason */ 1:
                    message.disabledReason = reader.string();
                    break;
                case /* int64 disabled_code */ 2:
                    message.disabledCode = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string disabled_reason = 1; */
        if (message.disabledReason !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.disabledReason);
        /* int64 disabled_code = 2; */
        if (message.disabledCode !== 0n)
            writer.tag(2, WireType.Varint).int64(message.disabledCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ExtraContent
 */
export const ExtraContent = new ExtraContent$Type();
