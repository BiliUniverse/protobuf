// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/app/viewunite/common.proto" (package "bilibili.app.viewunite.common", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Pagination } from "../../pagination/pagination";
import { Any } from "../../../google/protobuf/any";
/**
 *
 *
 * @generated from protobuf enum bilibili.app.viewunite.common.AttentionRelationStatus
 */
export var AttentionRelationStatus;
(function (AttentionRelationStatus) {
    /**
     *
     *
     * @generated from protobuf enum value: ARS_NONE = 0;
     */
    AttentionRelationStatus[AttentionRelationStatus["ARS_NONE"] = 0] = "ARS_NONE";
    /**
     *
     *
     * @generated from protobuf enum value: ARS_N0RELATION = 1;
     */
    AttentionRelationStatus[AttentionRelationStatus["ARS_N0RELATION"] = 1] = "ARS_N0RELATION";
    /**
     *
     *
     * @generated from protobuf enum value: ARS_FOLLOWHIM = 2;
     */
    AttentionRelationStatus[AttentionRelationStatus["ARS_FOLLOWHIM"] = 2] = "ARS_FOLLOWHIM";
    /**
     *
     *
     * @generated from protobuf enum value: ARS_FOLLOWME = 3;
     */
    AttentionRelationStatus[AttentionRelationStatus["ARS_FOLLOWME"] = 3] = "ARS_FOLLOWME";
    /**
     *
     *
     * @generated from protobuf enum value: ARS_BUDDY = 4;
     */
    AttentionRelationStatus[AttentionRelationStatus["ARS_BUDDY"] = 4] = "ARS_BUDDY";
    /**
     *
     *
     * @generated from protobuf enum value: ARS_SPECIAL = 5;
     */
    AttentionRelationStatus[AttentionRelationStatus["ARS_SPECIAL"] = 5] = "ARS_SPECIAL";
    /**
     *
     *
     * @generated from protobuf enum value: ARS_CANCELBLOCK = 6;
     */
    AttentionRelationStatus[AttentionRelationStatus["ARS_CANCELBLOCK"] = 6] = "ARS_CANCELBLOCK";
})(AttentionRelationStatus || (AttentionRelationStatus = {}));
/**
 * @generated from protobuf enum bilibili.app.viewunite.common.DescType
 */
export var DescType;
(function (DescType) {
    /**
     *
     *
     * @generated from protobuf enum value: DescTypeUnknown = 0;
     */
    DescType[DescType["DescTypeUnknown"] = 0] = "DescTypeUnknown";
    /**
     *
     *
     * @generated from protobuf enum value: DescTypeText = 1;
     */
    DescType[DescType["DescTypeText"] = 1] = "DescTypeText";
    /**
     *
     *
     * @generated from protobuf enum value: DescTypeAt = 2;
     */
    DescType[DescType["DescTypeAt"] = 2] = "DescTypeAt";
})(DescType || (DescType = {}));
/**
 * 荣誉 Banner 跳转类型
 *
 * @generated from protobuf enum bilibili.app.viewunite.common.HonorJumpType
 */
export var HonorJumpType;
(function (HonorJumpType) {
    /**
     *
     *
     * @generated from protobuf enum value: HONOR_JUMP_TYPE_UNKNOWN = 0;
     */
    HonorJumpType[HonorJumpType["HONOR_JUMP_TYPE_UNKNOWN"] = 0] = "HONOR_JUMP_TYPE_UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: HONOR_OPEN_URL = 1;
     */
    HonorJumpType[HonorJumpType["HONOR_OPEN_URL"] = 1] = "HONOR_OPEN_URL";
    /**
     *
     *
     * @generated from protobuf enum value: HONOR_HALF_SCREEN = 2;
     */
    HonorJumpType[HonorJumpType["HONOR_HALF_SCREEN"] = 2] = "HONOR_HALF_SCREEN";
})(HonorJumpType || (HonorJumpType = {}));
/**
 * 荣誉类型
 *
 * @generated from protobuf enum bilibili.app.viewunite.common.HonorType
 */
export var HonorType;
(function (HonorType) {
    /**
     *
     *
     * @generated from protobuf enum value: HONOR_NONE = 0;
     */
    HonorType[HonorType["HONOR_NONE"] = 0] = "HONOR_NONE";
    /**
     *
     *
     * @generated from protobuf enum value: PLAYLET = 1;
     */
    HonorType[HonorType["PLAYLET"] = 1] = "PLAYLET";
    /**
     * 视频存在争议
     *
     * @generated from protobuf enum value: ARGUE = 2;
     */
    HonorType[HonorType["ARGUE"] = 2] = "ARGUE";
    /**
     *
     *
     * @generated from protobuf enum value: NOTICE = 3;
     */
    HonorType[HonorType["NOTICE"] = 3] = "NOTICE";
    /**
     *
     *
     * @generated from protobuf enum value: GUIDANCE = 4;
     */
    HonorType[HonorType["GUIDANCE"] = 4] = "GUIDANCE";
    /**
     * 哔哩哔哩榜
     *
     * @generated from protobuf enum value: HONOR_BILI_RANK = 5;
     */
    HonorType[HonorType["HONOR_BILI_RANK"] = 5] = "HONOR_BILI_RANK";
    /**
     * 周榜
     *
     * @generated from protobuf enum value: HONOR_WEEKLY_RANK = 6;
     */
    HonorType[HonorType["HONOR_WEEKLY_RANK"] = 6] = "HONOR_WEEKLY_RANK";
    /**
     * 日榜
     *
     * @generated from protobuf enum value: HONOR_DAILY_RANK = 7;
     */
    HonorType[HonorType["HONOR_DAILY_RANK"] = 7] = "HONOR_DAILY_RANK";
    /**
     *
     *
     * @generated from protobuf enum value: HONOR_CHANNEL = 8;
     */
    HonorType[HonorType["HONOR_CHANNEL"] = 8] = "HONOR_CHANNEL";
    /**
     * 音乐榜?
     *
     * @generated from protobuf enum value: HONOR_MUSIC = 9;
     */
    HonorType[HonorType["HONOR_MUSIC"] = 9] = "HONOR_MUSIC";
    /**
     *
     *
     * @generated from protobuf enum value: HONOR_REPLY = 10;
     */
    HonorType[HonorType["HONOR_REPLY"] = 10] = "HONOR_REPLY";
})(HonorType || (HonorType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.app.viewunite.common.KingPositionType
 */
export var KingPositionType;
(function (KingPositionType) {
    /**
     *
     *
     * @generated from protobuf enum value: KING_POS_UNSPECIFIED = 0;
     */
    KingPositionType[KingPositionType["KING_POS_UNSPECIFIED"] = 0] = "KING_POS_UNSPECIFIED";
    /**
     *
     *
     * @generated from protobuf enum value: LIKE = 1;
     */
    KingPositionType[KingPositionType["LIKE"] = 1] = "LIKE";
    /**
     *
     *
     * @generated from protobuf enum value: DISLIKE = 2;
     */
    KingPositionType[KingPositionType["DISLIKE"] = 2] = "DISLIKE";
    /**
     *
     *
     * @generated from protobuf enum value: COIN = 3;
     */
    KingPositionType[KingPositionType["COIN"] = 3] = "COIN";
    /**
     *
     *
     * @generated from protobuf enum value: FAV = 4;
     */
    KingPositionType[KingPositionType["FAV"] = 4] = "FAV";
    /**
     *
     *
     * @generated from protobuf enum value: SHARE = 5;
     */
    KingPositionType[KingPositionType["SHARE"] = 5] = "SHARE";
    /**
     *
     *
     * @generated from protobuf enum value: CACHE = 6;
     */
    KingPositionType[KingPositionType["CACHE"] = 6] = "CACHE";
    /**
     *
     *
     * @generated from protobuf enum value: DANMAKU = 7;
     */
    KingPositionType[KingPositionType["DANMAKU"] = 7] = "DANMAKU";
})(KingPositionType || (KingPositionType = {}));
/**
 * @generated from protobuf enum bilibili.app.viewunite.common.ModuleType
 */
export var ModuleType;
(function (ModuleType) {
    /**
     *
     *
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    ModuleType[ModuleType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: OGV_INTRODUCTION = 1;
     */
    ModuleType[ModuleType["OGV_INTRODUCTION"] = 1] = "OGV_INTRODUCTION";
    /**
     *
     *
     * @generated from protobuf enum value: OGV_TITLE = 2;
     */
    ModuleType[ModuleType["OGV_TITLE"] = 2] = "OGV_TITLE";
    /**
     *
     *
     * @generated from protobuf enum value: UGC_HEADLINE = 3;
     */
    ModuleType[ModuleType["UGC_HEADLINE"] = 3] = "UGC_HEADLINE";
    /**
     *
     *
     * @generated from protobuf enum value: UGC_INTRODUCTION = 4;
     */
    ModuleType[ModuleType["UGC_INTRODUCTION"] = 4] = "UGC_INTRODUCTION";
    /**
     *
     *
     * @generated from protobuf enum value: KING_POSITION = 5;
     */
    ModuleType[ModuleType["KING_POSITION"] = 5] = "KING_POSITION";
    /**
     *
     *
     * @generated from protobuf enum value: MASTER_USER_LIST = 6;
     */
    ModuleType[ModuleType["MASTER_USER_LIST"] = 6] = "MASTER_USER_LIST";
    /**
     *
     *
     * @generated from protobuf enum value: STAFFS = 7;
     */
    ModuleType[ModuleType["STAFFS"] = 7] = "STAFFS";
    /**
     *
     *
     * @generated from protobuf enum value: HONOR = 8;
     */
    ModuleType[ModuleType["HONOR"] = 8] = "HONOR";
    /**
     *
     *
     * @generated from protobuf enum value: OWNER = 9;
     */
    ModuleType[ModuleType["OWNER"] = 9] = "OWNER";
    /**
     *
     *
     * @generated from protobuf enum value: PAGE = 10;
     */
    ModuleType[ModuleType["PAGE"] = 10] = "PAGE";
    /**
     *
     *
     * @generated from protobuf enum value: ACTIVITY_RESERVE = 11;
     */
    ModuleType[ModuleType["ACTIVITY_RESERVE"] = 11] = "ACTIVITY_RESERVE";
    /**
     *
     *
     * @generated from protobuf enum value: LIVE_ORDER = 12;
     */
    ModuleType[ModuleType["LIVE_ORDER"] = 12] = "LIVE_ORDER";
    /**
     *
     *
     * @generated from protobuf enum value: POSITIVE = 13;
     */
    ModuleType[ModuleType["POSITIVE"] = 13] = "POSITIVE";
    /**
     *
     *
     * @generated from protobuf enum value: SECTION = 14;
     */
    ModuleType[ModuleType["SECTION"] = 14] = "SECTION";
    /**
     *
     *
     * @generated from protobuf enum value: RELATE = 15;
     */
    ModuleType[ModuleType["RELATE"] = 15] = "RELATE";
    /**
     *
     *
     * @generated from protobuf enum value: PUGV = 16;
     */
    ModuleType[ModuleType["PUGV"] = 16] = "PUGV";
    /**
     *
     *
     * @generated from protobuf enum value: COLLECTION_CARD = 17;
     */
    ModuleType[ModuleType["COLLECTION_CARD"] = 17] = "COLLECTION_CARD";
    /**
     *
     *
     * @generated from protobuf enum value: ACTIVITY = 18;
     */
    ModuleType[ModuleType["ACTIVITY"] = 18] = "ACTIVITY";
    /**
     *
     *
     * @generated from protobuf enum value: CHARACTER = 19;
     */
    ModuleType[ModuleType["CHARACTER"] = 19] = "CHARACTER";
    /**
     *
     *
     * @generated from protobuf enum value: FOLLOW_LAYER = 20;
     */
    ModuleType[ModuleType["FOLLOW_LAYER"] = 20] = "FOLLOW_LAYER";
    /**
     *
     *
     * @generated from protobuf enum value: OGV_SEASONS = 21;
     */
    ModuleType[ModuleType["OGV_SEASONS"] = 21] = "OGV_SEASONS";
    /**
     *
     *
     * @generated from protobuf enum value: UGC_SEASON = 22;
     */
    ModuleType[ModuleType["UGC_SEASON"] = 22] = "UGC_SEASON";
    /**
     *
     *
     * @generated from protobuf enum value: OGV_LIVE_RESERVE = 23;
     */
    ModuleType[ModuleType["OGV_LIVE_RESERVE"] = 23] = "OGV_LIVE_RESERVE";
    /**
     *
     *
     * @generated from protobuf enum value: COMBINATION_EPISODE = 24;
     */
    ModuleType[ModuleType["COMBINATION_EPISODE"] = 24] = "COMBINATION_EPISODE";
    /**
     *
     *
     * @generated from protobuf enum value: SPONSOR = 25;
     */
    ModuleType[ModuleType["SPONSOR"] = 25] = "SPONSOR";
    /**
     *
     *
     * @generated from protobuf enum value: ACTIVITY_ENTRANCE = 26;
     */
    ModuleType[ModuleType["ACTIVITY_ENTRANCE"] = 26] = "ACTIVITY_ENTRANCE";
    /**
     *
     *
     * @generated from protobuf enum value: THEATRE_HOT_TOPIC = 27;
     */
    ModuleType[ModuleType["THEATRE_HOT_TOPIC"] = 27] = "THEATRE_HOT_TOPIC";
    /**
     *
     *
     * @generated from protobuf enum value: RELATED_RECOMMEND = 28;
     */
    ModuleType[ModuleType["RELATED_RECOMMEND"] = 28] = "RELATED_RECOMMEND";
    /**
     *
     *
     * @generated from protobuf enum value: PAY_BAR = 29;
     */
    ModuleType[ModuleType["PAY_BAR"] = 29] = "PAY_BAR";
    /**
     *
     *
     * @generated from protobuf enum value: BANNER = 30;
     */
    ModuleType[ModuleType["BANNER"] = 30] = "BANNER";
    /**
     *
     *
     * @generated from protobuf enum value: AUDIO = 31;
     */
    ModuleType[ModuleType["AUDIO"] = 31] = "AUDIO";
    /**
     *
     *
     * @generated from protobuf enum value: AGG_CARD = 32;
     */
    ModuleType[ModuleType["AGG_CARD"] = 32] = "AGG_CARD";
    /**
     *
     *
     * @generated from protobuf enum value: SINGLE_EP = 33;
     */
    ModuleType[ModuleType["SINGLE_EP"] = 33] = "SINGLE_EP";
    /**
     *
     *
     * @generated from protobuf enum value: LIKE_COMMENT = 34;
     */
    ModuleType[ModuleType["LIKE_COMMENT"] = 34] = "LIKE_COMMENT";
    /**
     *
     *
     * @generated from protobuf enum value: ATTENTION_RECOMMEND = 35;
     */
    ModuleType[ModuleType["ATTENTION_RECOMMEND"] = 35] = "ATTENTION_RECOMMEND";
    /**
     *
     *
     * @generated from protobuf enum value: COVENANTER = 36;
     */
    ModuleType[ModuleType["COVENANTER"] = 36] = "COVENANTER";
})(ModuleType || (ModuleType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.app.viewunite.common.OccupationType
 */
export var OccupationType;
(function (OccupationType) {
    /**
     *
     *
     * @generated from protobuf enum value: STAFF = 0;
     */
    OccupationType[OccupationType["STAFF"] = 0] = "STAFF";
    /**
     *
     *
     * @generated from protobuf enum value: CAST = 1;
     */
    OccupationType[OccupationType["CAST"] = 1] = "CAST";
})(OccupationType || (OccupationType = {}));
/**
 * 视频详情下方推荐卡子类型
 *
 * @generated from protobuf enum bilibili.app.viewunite.common.RelateCardType
 */
export var RelateCardType;
(function (RelateCardType) {
    /**
     *
     *
     * @generated from protobuf enum value: CARD_TYPE_UNKNOWN = 0;
     */
    RelateCardType[RelateCardType["CARD_TYPE_UNKNOWN"] = 0] = "CARD_TYPE_UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: AV = 1;
     */
    RelateCardType[RelateCardType["AV"] = 1] = "AV";
    /**
     *
     *
     * @generated from protobuf enum value: BANGUMI = 2;
     */
    RelateCardType[RelateCardType["BANGUMI"] = 2] = "BANGUMI";
    /**
     *
     *
     * @generated from protobuf enum value: RESOURCE = 3;
     */
    RelateCardType[RelateCardType["RESOURCE"] = 3] = "RESOURCE";
    /**
     *
     *
     * @generated from protobuf enum value: GAME = 4;
     */
    RelateCardType[RelateCardType["GAME"] = 4] = "GAME";
    /**
     *
     *
     * @generated from protobuf enum value: CM = 5;
     */
    RelateCardType[RelateCardType["CM"] = 5] = "CM";
    /**
     *
     *
     * @generated from protobuf enum value: LIVE = 6;
     */
    RelateCardType[RelateCardType["LIVE"] = 6] = "LIVE";
    /**
     *
     *
     * @generated from protobuf enum value: AI_RECOMMEND = 7;
     */
    RelateCardType[RelateCardType["AI_RECOMMEND"] = 7] = "AI_RECOMMEND";
    /**
     *
     *
     * @generated from protobuf enum value: BANGUMI_AV = 8;
     */
    RelateCardType[RelateCardType["BANGUMI_AV"] = 8] = "BANGUMI_AV";
    /**
     *
     *
     * @generated from protobuf enum value: BANGUMI_UGC = 9;
     */
    RelateCardType[RelateCardType["BANGUMI_UGC"] = 9] = "BANGUMI_UGC";
    /**
     *
     *
     * @generated from protobuf enum value: SPECIAL = 10;
     */
    RelateCardType[RelateCardType["SPECIAL"] = 10] = "SPECIAL";
})(RelateCardType || (RelateCardType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.app.viewunite.common.ReserveBizType
 */
export var ReserveBizType;
(function (ReserveBizType) {
    /**
     *
     *
     * @generated from protobuf enum value: BizTypeNone = 0;
     */
    ReserveBizType[ReserveBizType["BizTypeNone"] = 0] = "BizTypeNone";
    /**
     *
     *
     * @generated from protobuf enum value: BizTypeReserveActivity = 1;
     */
    ReserveBizType[ReserveBizType["BizTypeReserveActivity"] = 1] = "BizTypeReserveActivity";
    /**
     *
     *
     * @generated from protobuf enum value: BizTypeFavSeason = 2;
     */
    ReserveBizType[ReserveBizType["BizTypeFavSeason"] = 2] = "BizTypeFavSeason";
})(ReserveBizType || (ReserveBizType = {}));
/**
 * @generated from protobuf enum bilibili.app.viewunite.common.SeasonType
 */
export var SeasonType;
(function (SeasonType) {
    /**
     *
     *
     * @generated from protobuf enum value: Unknown = 0;
     */
    SeasonType[SeasonType["Unknown"] = 0] = "Unknown";
    /**
     *
     *
     * @generated from protobuf enum value: Base = 1;
     */
    SeasonType[SeasonType["Base"] = 1] = "Base";
    /**
     *
     *
     * @generated from protobuf enum value: Good = 2;
     */
    SeasonType[SeasonType["Good"] = 2] = "Good";
})(SeasonType || (SeasonType = {}));
/**
 * @generated from protobuf enum bilibili.app.viewunite.common.SerialSeasonCoverStyle
 */
export var SerialSeasonCoverStyle;
(function (SerialSeasonCoverStyle) {
    /**
     *
     *
     * @generated from protobuf enum value: TITLE = 0;
     */
    SerialSeasonCoverStyle[SerialSeasonCoverStyle["TITLE"] = 0] = "TITLE";
    /**
     *
     *
     * @generated from protobuf enum value: PICTURE = 1;
     */
    SerialSeasonCoverStyle[SerialSeasonCoverStyle["PICTURE"] = 1] = "PICTURE";
})(SerialSeasonCoverStyle || (SerialSeasonCoverStyle = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Activity$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Activity", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "ab", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "show_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "picurl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "picurl_selected", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "h5_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "jump_mode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.title = "";
        message.link = "";
        message.cover = "";
        message.type = 0;
        message.ab = "";
        message.showName = "";
        message.picurl = "";
        message.picurlSelected = "";
        message.h5Link = "";
        message.jumpMode = "";
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string link */ 3:
                    message.link = reader.string();
                    break;
                case /* string cover */ 4:
                    message.cover = reader.string();
                    break;
                case /* int32 type */ 5:
                    message.type = reader.int32();
                    break;
                case /* string ab */ 6:
                    message.ab = reader.string();
                    break;
                case /* string show_name */ 7:
                    message.showName = reader.string();
                    break;
                case /* string picurl */ 8:
                    message.picurl = reader.string();
                    break;
                case /* string picurl_selected */ 9:
                    message.picurlSelected = reader.string();
                    break;
                case /* string h5_link */ 10:
                    message.h5Link = reader.string();
                    break;
                case /* string jump_mode */ 11:
                    message.jumpMode = reader.string();
                    break;
                case /* repeated bilibili.app.viewunite.common.Item items */ 12:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string link = 3; */
        if (message.link !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.link);
        /* string cover = 4; */
        if (message.cover !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.cover);
        /* int32 type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* string ab = 6; */
        if (message.ab !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.ab);
        /* string show_name = 7; */
        if (message.showName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.showName);
        /* string picurl = 8; */
        if (message.picurl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.picurl);
        /* string picurl_selected = 9; */
        if (message.picurlSelected !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.picurlSelected);
        /* string h5_link = 10; */
        if (message.h5Link !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.h5Link);
        /* string jump_mode = 11; */
        if (message.jumpMode !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.jumpMode);
        /* repeated bilibili.app.viewunite.common.Item items = 12; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Activity
 */
export const Activity = new Activity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityEntrance$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.ActivityEntrance", [
            { no: 1, name: "activity_cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activity_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "word_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "activity_subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "activity_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "activity_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "reserve_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "upper_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 10, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.activityCover = "";
        message.activityTitle = "";
        message.wordTag = "";
        message.activitySubtitle = "";
        message.activityLink = "";
        message.activityType = 0;
        message.reserveId = 0;
        message.status = 0;
        message.upperList = [];
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string activity_cover */ 1:
                    message.activityCover = reader.string();
                    break;
                case /* string activity_title */ 2:
                    message.activityTitle = reader.string();
                    break;
                case /* string word_tag */ 3:
                    message.wordTag = reader.string();
                    break;
                case /* string activity_subtitle */ 4:
                    message.activitySubtitle = reader.string();
                    break;
                case /* string activity_link */ 5:
                    message.activityLink = reader.string();
                    break;
                case /* int32 activity_type */ 6:
                    message.activityType = reader.int32();
                    break;
                case /* int32 reserve_id */ 7:
                    message.reserveId = reader.int32();
                    break;
                case /* int32 status */ 8:
                    message.status = reader.int32();
                    break;
                case /* repeated bilibili.app.viewunite.common.User upper_list */ 9:
                    message.upperList.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, string> report */ 10:
                    this.binaryReadMap10(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap10(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.ActivityEntrance.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string activity_cover = 1; */
        if (message.activityCover !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.activityCover);
        /* string activity_title = 2; */
        if (message.activityTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.activityTitle);
        /* string word_tag = 3; */
        if (message.wordTag !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.wordTag);
        /* string activity_subtitle = 4; */
        if (message.activitySubtitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.activitySubtitle);
        /* string activity_link = 5; */
        if (message.activityLink !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.activityLink);
        /* int32 activity_type = 6; */
        if (message.activityType !== 0)
            writer.tag(6, WireType.Varint).int32(message.activityType);
        /* int32 reserve_id = 7; */
        if (message.reserveId !== 0)
            writer.tag(7, WireType.Varint).int32(message.reserveId);
        /* int32 status = 8; */
        if (message.status !== 0)
            writer.tag(8, WireType.Varint).int32(message.status);
        /* repeated bilibili.app.viewunite.common.User upper_list = 9; */
        for (let i = 0; i < message.upperList.length; i++)
            User.internalBinaryWrite(message.upperList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> report = 10; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.ActivityEntrance
 */
export const ActivityEntrance = new ActivityEntrance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityEntranceModule$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.ActivityEntranceModule", [
            { no: 1, name: "activity_entrance", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ActivityEntrance }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.activityEntrance = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.viewunite.common.ActivityEntrance activity_entrance */ 1:
                    message.activityEntrance.push(ActivityEntrance.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.viewunite.common.ActivityEntrance activity_entrance = 1; */
        for (let i = 0; i < message.activityEntrance.length; i++)
            ActivityEntrance.internalBinaryWrite(message.activityEntrance[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.ActivityEntranceModule
 */
export const ActivityEntranceModule = new ActivityEntranceModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityReserve$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.ActivityReserve", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "vt", kind: "message", T: () => StatInfo },
            { no: 3, name: "danmaku", kind: "message", T: () => StatInfo },
            { no: 4, name: "button", kind: "message", T: () => ReserveButton }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.StatInfo vt */ 2:
                    message.vt = StatInfo.internalBinaryRead(reader, reader.uint32(), options, message.vt);
                    break;
                case /* bilibili.app.viewunite.common.StatInfo danmaku */ 3:
                    message.danmaku = StatInfo.internalBinaryRead(reader, reader.uint32(), options, message.danmaku);
                    break;
                case /* bilibili.app.viewunite.common.ReserveButton button */ 4:
                    message.button = ReserveButton.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* bilibili.app.viewunite.common.StatInfo vt = 2; */
        if (message.vt)
            StatInfo.internalBinaryWrite(message.vt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.StatInfo danmaku = 3; */
        if (message.danmaku)
            StatInfo.internalBinaryWrite(message.danmaku, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.ReserveButton button = 4; */
        if (message.button)
            ReserveButton.internalBinaryWrite(message.button, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.ActivityReserve
 */
export const ActivityReserve = new ActivityReserve$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityResource$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.ActivityResource", [
            { no: 1, name: "mod_pool_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mod_resource_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.modPoolName = "";
        message.modResourceName = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mod_pool_name */ 1:
                    message.modPoolName = reader.string();
                    break;
                case /* string mod_resource_name */ 2:
                    message.modResourceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string mod_pool_name = 1; */
        if (message.modPoolName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.modPoolName);
        /* string mod_resource_name = 2; */
        if (message.modResourceName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.modResourceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.ActivityResource
 */
export const ActivityResource = new ActivityResource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTab$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.ActivityTab", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "show_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "picurl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "picurl_selected", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "h5_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "link_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "biz_key", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "act_ext", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.title = "";
        message.type = 0;
        message.showName = "";
        message.picurl = "";
        message.picurlSelected = "";
        message.h5Link = "";
        message.link = "";
        message.linkType = 0;
        message.bizKey = 0;
        message.desc = "";
        message.actExt = "";
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string show_name */ 4:
                    message.showName = reader.string();
                    break;
                case /* string picurl */ 5:
                    message.picurl = reader.string();
                    break;
                case /* string picurl_selected */ 6:
                    message.picurlSelected = reader.string();
                    break;
                case /* string h5_link */ 7:
                    message.h5Link = reader.string();
                    break;
                case /* string link */ 8:
                    message.link = reader.string();
                    break;
                case /* int32 link_type */ 9:
                    message.linkType = reader.int32();
                    break;
                case /* int64 biz_key */ 10:
                    message.bizKey = reader.int64().toNumber();
                    break;
                case /* string desc */ 11:
                    message.desc = reader.string();
                    break;
                case /* string act_ext */ 12:
                    message.actExt = reader.string();
                    break;
                case /* map<string, string> report */ 13:
                    this.binaryReadMap13(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap13(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.ActivityTab.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string show_name = 4; */
        if (message.showName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.showName);
        /* string picurl = 5; */
        if (message.picurl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.picurl);
        /* string picurl_selected = 6; */
        if (message.picurlSelected !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.picurlSelected);
        /* string h5_link = 7; */
        if (message.h5Link !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.h5Link);
        /* string link = 8; */
        if (message.link !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.link);
        /* int32 link_type = 9; */
        if (message.linkType !== 0)
            writer.tag(9, WireType.Varint).int32(message.linkType);
        /* int64 biz_key = 10; */
        if (message.bizKey !== 0)
            writer.tag(10, WireType.Varint).int64(message.bizKey);
        /* string desc = 11; */
        if (message.desc !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.desc);
        /* string act_ext = 12; */
        if (message.actExt !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.actExt);
        /* map<string, string> report = 13; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.ActivityTab
 */
export const ActivityTab = new ActivityTab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AggEpCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.AggEpCard", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.cover = "";
        message.icon = "";
        message.num = 0;
        message.jumpUrl = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string cover */ 2:
                    message.cover = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* int32 num */ 4:
                    message.num = reader.int32();
                    break;
                case /* string jump_url */ 5:
                    message.jumpUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string cover = 2; */
        if (message.cover !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cover);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* int32 num = 4; */
        if (message.num !== 0)
            writer.tag(4, WireType.Varint).int32(message.num);
        /* string jump_url = 5; */
        if (message.jumpUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.jumpUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.AggEpCard
 */
export const AggEpCard = new AggEpCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AggEps$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.AggEps", [
            { no: 1, name: "agg_ep_cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AggEpCard },
            { no: 2, name: "place_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.aggEpCards = [];
        message.placeIndex = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.viewunite.common.AggEpCard agg_ep_cards */ 1:
                    message.aggEpCards.push(AggEpCard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 place_index */ 2:
                    message.placeIndex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.viewunite.common.AggEpCard agg_ep_cards = 1; */
        for (let i = 0; i < message.aggEpCards.length; i++)
            AggEpCard.internalBinaryWrite(message.aggEpCards[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 place_index = 2; */
        if (message.placeIndex !== 0)
            writer.tag(2, WireType.Varint).int32(message.placeIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.AggEps
 */
export const AggEps = new AggEps$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttentionRecommend$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.AttentionRecommend", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.AttentionRecommend
 */
export const AttentionRecommend = new AttentionRecommend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Audio$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Audio", [
            { no: 1, name: "audio_info", kind: "map", K: 3 /*ScalarType.INT64*/, V: { kind: "message", T: () => AudioInfo } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.audioInfo = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int64, bilibili.app.viewunite.common.AudioInfo> audio_info */ 1:
                    this.binaryReadMap1(message.audioInfo, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int64().toString();
                    break;
                case 2:
                    val = AudioInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.Audio.audio_info");
            }
        }
        map[key ?? "0"] = val ?? AudioInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<int64, bilibili.app.viewunite.common.AudioInfo> audio_info = 1; */
        for (let k of globalThis.Object.keys(message.audioInfo)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int64(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            AudioInfo.internalBinaryWrite(message.audioInfo[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Audio
 */
export const Audio = new Audio$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.AudioInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cover_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "play_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "reply_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "upper_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "entrance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "song_attr", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.coverUrl = "";
        message.songId = 0;
        message.playCount = 0;
        message.replyCount = 0;
        message.upperId = 0;
        message.entrance = "";
        message.songAttr = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string cover_url */ 2:
                    message.coverUrl = reader.string();
                    break;
                case /* int64 song_id */ 3:
                    message.songId = reader.int64().toNumber();
                    break;
                case /* int64 play_count */ 4:
                    message.playCount = reader.int64().toNumber();
                    break;
                case /* int64 reply_count */ 5:
                    message.replyCount = reader.int64().toNumber();
                    break;
                case /* int64 upper_id */ 6:
                    message.upperId = reader.int64().toNumber();
                    break;
                case /* string entrance */ 7:
                    message.entrance = reader.string();
                    break;
                case /* int64 song_attr */ 8:
                    message.songAttr = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string cover_url = 2; */
        if (message.coverUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.coverUrl);
        /* int64 song_id = 3; */
        if (message.songId !== 0)
            writer.tag(3, WireType.Varint).int64(message.songId);
        /* int64 play_count = 4; */
        if (message.playCount !== 0)
            writer.tag(4, WireType.Varint).int64(message.playCount);
        /* int64 reply_count = 5; */
        if (message.replyCount !== 0)
            writer.tag(5, WireType.Varint).int64(message.replyCount);
        /* int64 upper_id = 6; */
        if (message.upperId !== 0)
            writer.tag(6, WireType.Varint).int64(message.upperId);
        /* string entrance = 7; */
        if (message.entrance !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.entrance);
        /* int64 song_attr = 8; */
        if (message.songAttr !== 0)
            writer.tag(8, WireType.Varint).int64(message.songAttr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.AudioInfo
 */
export const AudioInfo = new AudioInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BadgeInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.BadgeInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "border_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "border_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "bg_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.textColor = "";
        message.textColorNight = "";
        message.bgColor = "";
        message.bgColorNight = "";
        message.borderColor = "";
        message.borderColorNight = "";
        message.bgStyle = 0;
        message.img = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 3:
                    message.textColorNight = reader.string();
                    break;
                case /* string bg_color */ 4:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 5:
                    message.bgColorNight = reader.string();
                    break;
                case /* string border_color */ 6:
                    message.borderColor = reader.string();
                    break;
                case /* string border_color_night */ 7:
                    message.borderColorNight = reader.string();
                    break;
                case /* int32 bg_style */ 8:
                    message.bgStyle = reader.int32();
                    break;
                case /* string img */ 9:
                    message.img = reader.string();
                    break;
                case /* int32 type */ 10:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        /* string bg_color = 4; */
        if (message.bgColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 5; */
        if (message.bgColorNight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bgColorNight);
        /* string border_color = 6; */
        if (message.borderColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.borderColor);
        /* string border_color_night = 7; */
        if (message.borderColorNight !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.borderColorNight);
        /* int32 bg_style = 8; */
        if (message.bgStyle !== 0)
            writer.tag(8, WireType.Varint).int32(message.bgStyle);
        /* string img = 9; */
        if (message.img !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.img);
        /* int32 type = 10; */
        if (message.type !== 0)
            writer.tag(10, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.BadgeInfo
 */
export const BadgeInfo = new BadgeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Banner$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Banner", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "relate_item", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelateItem }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.relateItem = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* repeated bilibili.app.viewunite.common.RelateItem relate_item */ 2:
                    message.relateItem.push(RelateItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* repeated bilibili.app.viewunite.common.RelateItem relate_item = 2; */
        for (let i = 0; i < message.relateItem.length; i++)
            RelateItem.internalBinaryWrite(message.relateItem[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Banner
 */
export const Banner = new Banner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizFavParam$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.BizFavParam", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.seasonId = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.BizFavParam
 */
export const BizFavParam = new BizFavParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizReserveActivityParam$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.BizReserveActivityParam", [
            { no: 1, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "reserve_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.activityId = 0;
        message.from = "";
        message.type = "";
        message.oid = 0;
        message.reserveId = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 activity_id */ 1:
                    message.activityId = reader.int64().toNumber();
                    break;
                case /* string from */ 2:
                    message.from = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* int64 oid */ 4:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 reserve_id */ 5:
                    message.reserveId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 activity_id = 1; */
        if (message.activityId !== 0)
            writer.tag(1, WireType.Varint).int64(message.activityId);
        /* string from = 2; */
        if (message.from !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.from);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* int64 oid = 4; */
        if (message.oid !== 0)
            writer.tag(4, WireType.Varint).int64(message.oid);
        /* int64 reserve_id = 5; */
        if (message.reserveId !== 0)
            writer.tag(5, WireType.Varint).int64(message.reserveId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.BizReserveActivityParam
 */
export const BizReserveActivityParam = new BizReserveActivityParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Button$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Button", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "left_strikethrough_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "badge_info", kind: "message", T: () => BadgeInfo },
            { no: 6, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.leftStrikethroughText = "";
        message.type = "";
        message.link = "";
        message.subTitle = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string left_strikethrough_text */ 2:
                    message.leftStrikethroughText = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* string link */ 4:
                    message.link = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.BadgeInfo badge_info */ 5:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                case /* string sub_title */ 6:
                    message.subTitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string left_strikethrough_text = 2; */
        if (message.leftStrikethroughText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.leftStrikethroughText);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* string link = 4; */
        if (message.link !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.link);
        /* bilibili.app.viewunite.common.BadgeInfo badge_info = 5; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string sub_title = 6; */
        if (message.subTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.subTitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Button
 */
export const Button = new Button$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardBasicInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.CardBasicInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "track_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "unique_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "from_source_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "from_source_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "material_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "cover_gif", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "author", kind: "message", T: () => Owner },
            { no: 12, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "from_spmid_suffix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "report_flow_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.desc = "";
        message.cover = "";
        message.uri = "";
        message.trackId = "";
        message.uniqueId = "";
        message.fromSourceType = 0;
        message.fromSourceId = "";
        message.materialId = 0;
        message.coverGif = "";
        message.id = 0;
        message.from = "";
        message.fromSpmidSuffix = "";
        message.reportFlowData = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string desc */ 2:
                    message.desc = reader.string();
                    break;
                case /* string cover */ 3:
                    message.cover = reader.string();
                    break;
                case /* string uri */ 4:
                    message.uri = reader.string();
                    break;
                case /* string track_id */ 5:
                    message.trackId = reader.string();
                    break;
                case /* string unique_id */ 6:
                    message.uniqueId = reader.string();
                    break;
                case /* int64 from_source_type */ 7:
                    message.fromSourceType = reader.int64().toNumber();
                    break;
                case /* string from_source_id */ 8:
                    message.fromSourceId = reader.string();
                    break;
                case /* int64 material_id */ 9:
                    message.materialId = reader.int64().toNumber();
                    break;
                case /* string cover_gif */ 10:
                    message.coverGif = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Owner author */ 11:
                    message.author = Owner.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* int64 id */ 12:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string from */ 13:
                    message.from = reader.string();
                    break;
                case /* string from_spmid_suffix */ 14:
                    message.fromSpmidSuffix = reader.string();
                    break;
                case /* string report_flow_data */ 15:
                    message.reportFlowData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string desc = 2; */
        if (message.desc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.desc);
        /* string cover = 3; */
        if (message.cover !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cover);
        /* string uri = 4; */
        if (message.uri !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.uri);
        /* string track_id = 5; */
        if (message.trackId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.trackId);
        /* string unique_id = 6; */
        if (message.uniqueId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.uniqueId);
        /* int64 from_source_type = 7; */
        if (message.fromSourceType !== 0)
            writer.tag(7, WireType.Varint).int64(message.fromSourceType);
        /* string from_source_id = 8; */
        if (message.fromSourceId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.fromSourceId);
        /* int64 material_id = 9; */
        if (message.materialId !== 0)
            writer.tag(9, WireType.Varint).int64(message.materialId);
        /* string cover_gif = 10; */
        if (message.coverGif !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.coverGif);
        /* bilibili.app.viewunite.common.Owner author = 11; */
        if (message.author)
            Owner.internalBinaryWrite(message.author, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int64 id = 12; */
        if (message.id !== 0)
            writer.tag(12, WireType.Varint).int64(message.id);
        /* string from = 13; */
        if (message.from !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.from);
        /* string from_spmid_suffix = 14; */
        if (message.fromSpmidSuffix !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.fromSpmidSuffix);
        /* string report_flow_data = 15; */
        if (message.reportFlowData !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.reportFlowData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.CardBasicInfo
 */
export const CardBasicInfo = new CardBasicInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardStyle$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.CardStyle", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.CardStyle
 */
export const CardStyle = new CardStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Celebrity$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Celebrity", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "short_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "character_avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "is_follow", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "occupation_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "occupation_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "relate_attr", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "small_avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.name = "";
        message.role = "";
        message.avatar = "";
        message.shortDesc = "";
        message.desc = "";
        message.characterAvatar = "";
        message.link = "";
        message.mid = 0;
        message.isFollow = 0;
        message.occupationName = "";
        message.occupationType = 0;
        message.relateAttr = 0;
        message.smallAvatar = "";
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string role */ 3:
                    message.role = reader.string();
                    break;
                case /* string avatar */ 4:
                    message.avatar = reader.string();
                    break;
                case /* string short_desc */ 5:
                    message.shortDesc = reader.string();
                    break;
                case /* string desc */ 6:
                    message.desc = reader.string();
                    break;
                case /* string character_avatar */ 7:
                    message.characterAvatar = reader.string();
                    break;
                case /* string link */ 8:
                    message.link = reader.string();
                    break;
                case /* int64 mid */ 9:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* int32 is_follow */ 10:
                    message.isFollow = reader.int32();
                    break;
                case /* string occupation_name */ 11:
                    message.occupationName = reader.string();
                    break;
                case /* int32 occupation_type */ 12:
                    message.occupationType = reader.int32();
                    break;
                case /* int32 relate_attr */ 13:
                    message.relateAttr = reader.int32();
                    break;
                case /* string small_avatar */ 14:
                    message.smallAvatar = reader.string();
                    break;
                case /* map<string, string> report */ 15:
                    this.binaryReadMap15(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap15(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.Celebrity.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string role = 3; */
        if (message.role !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.role);
        /* string avatar = 4; */
        if (message.avatar !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.avatar);
        /* string short_desc = 5; */
        if (message.shortDesc !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.shortDesc);
        /* string desc = 6; */
        if (message.desc !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.desc);
        /* string character_avatar = 7; */
        if (message.characterAvatar !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.characterAvatar);
        /* string link = 8; */
        if (message.link !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.link);
        /* int64 mid = 9; */
        if (message.mid !== 0)
            writer.tag(9, WireType.Varint).int64(message.mid);
        /* int32 is_follow = 10; */
        if (message.isFollow !== 0)
            writer.tag(10, WireType.Varint).int32(message.isFollow);
        /* string occupation_name = 11; */
        if (message.occupationName !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.occupationName);
        /* int32 occupation_type = 12; */
        if (message.occupationType !== 0)
            writer.tag(12, WireType.Varint).int32(message.occupationType);
        /* int32 relate_attr = 13; */
        if (message.relateAttr !== 0)
            writer.tag(13, WireType.Varint).int32(message.relateAttr);
        /* string small_avatar = 14; */
        if (message.smallAvatar !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.smallAvatar);
        /* map<string, string> report = 15; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Celebrity
 */
export const Celebrity = new Celebrity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharacterGroup$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.CharacterGroup", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "characters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Celebrity }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.characters = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* repeated bilibili.app.viewunite.common.Celebrity characters */ 2:
                    message.characters.push(Celebrity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* repeated bilibili.app.viewunite.common.Celebrity characters = 2; */
        for (let i = 0; i < message.characters.length; i++)
            Celebrity.internalBinaryWrite(message.characters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.CharacterGroup
 */
export const CharacterGroup = new CharacterGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Characters$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Characters", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CharacterGroup }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.groups = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.viewunite.common.CharacterGroup groups */ 1:
                    message.groups.push(CharacterGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.viewunite.common.CharacterGroup groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            CharacterGroup.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Characters
 */
export const Characters = new Characters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CoinExtend$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.CoinExtend", [
            { no: 1, name: "coin_app_zip_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "coin_app_icon_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "coin_app_icon_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "coin_app_icon_3", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "coin_app_icon_4", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.coinAppZipIcon = "";
        message.coinAppIcon1 = "";
        message.coinAppIcon2 = "";
        message.coinAppIcon3 = "";
        message.coinAppIcon4 = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string coin_app_zip_icon */ 1:
                    message.coinAppZipIcon = reader.string();
                    break;
                case /* string coin_app_icon_1 */ 2:
                    message.coinAppIcon1 = reader.string();
                    break;
                case /* string coin_app_icon_2 */ 3:
                    message.coinAppIcon2 = reader.string();
                    break;
                case /* string coin_app_icon_3 */ 4:
                    message.coinAppIcon3 = reader.string();
                    break;
                case /* string coin_app_icon_4 */ 5:
                    message.coinAppIcon4 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string coin_app_zip_icon = 1; */
        if (message.coinAppZipIcon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.coinAppZipIcon);
        /* string coin_app_icon_1 = 2; */
        if (message.coinAppIcon1 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.coinAppIcon1);
        /* string coin_app_icon_2 = 3; */
        if (message.coinAppIcon2 !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.coinAppIcon2);
        /* string coin_app_icon_3 = 4; */
        if (message.coinAppIcon3 !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.coinAppIcon3);
        /* string coin_app_icon_4 = 5; */
        if (message.coinAppIcon4 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.coinAppIcon4);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.CoinExtend
 */
export const CoinExtend = new CoinExtend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CombinationEp$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.CombinationEp", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "section_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "can_ord_desc", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "more", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "episode_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "episodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewEpisode },
            { no: 8, name: "split_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "module_style", kind: "message", T: () => Style },
            { no: 10, name: "serial_season", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SerialSeason },
            { no: 11, name: "section_data", kind: "message", T: () => SectionData }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.sectionId = 0;
        message.title = "";
        message.canOrdDesc = 0;
        message.more = "";
        message.episodeIds = [];
        message.episodes = [];
        message.splitText = "";
        message.serialSeason = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 section_id */ 2:
                    message.sectionId = reader.int32();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* int32 can_ord_desc */ 4:
                    message.canOrdDesc = reader.int32();
                    break;
                case /* string more */ 5:
                    message.more = reader.string();
                    break;
                case /* repeated int32 episode_ids */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.episodeIds.push(reader.int32());
                    else
                        message.episodeIds.push(reader.int32());
                    break;
                case /* repeated bilibili.app.viewunite.common.ViewEpisode episodes */ 7:
                    message.episodes.push(ViewEpisode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string split_text */ 8:
                    message.splitText = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Style module_style */ 9:
                    message.moduleStyle = Style.internalBinaryRead(reader, reader.uint32(), options, message.moduleStyle);
                    break;
                case /* repeated bilibili.app.viewunite.common.SerialSeason serial_season */ 10:
                    message.serialSeason.push(SerialSeason.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.viewunite.common.SectionData section_data */ 11:
                    message.sectionData = SectionData.internalBinaryRead(reader, reader.uint32(), options, message.sectionData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 section_id = 2; */
        if (message.sectionId !== 0)
            writer.tag(2, WireType.Varint).int32(message.sectionId);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* int32 can_ord_desc = 4; */
        if (message.canOrdDesc !== 0)
            writer.tag(4, WireType.Varint).int32(message.canOrdDesc);
        /* string more = 5; */
        if (message.more !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.more);
        /* repeated int32 episode_ids = 6; */
        if (message.episodeIds.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.episodeIds.length; i++)
                writer.int32(message.episodeIds[i]);
            writer.join();
        }
        /* repeated bilibili.app.viewunite.common.ViewEpisode episodes = 7; */
        for (let i = 0; i < message.episodes.length; i++)
            ViewEpisode.internalBinaryWrite(message.episodes[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string split_text = 8; */
        if (message.splitText !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.splitText);
        /* bilibili.app.viewunite.common.Style module_style = 9; */
        if (message.moduleStyle)
            Style.internalBinaryWrite(message.moduleStyle, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.viewunite.common.SerialSeason serial_season = 10; */
        for (let i = 0; i < message.serialSeason.length; i++)
            SerialSeason.internalBinaryWrite(message.serialSeason[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.SectionData section_data = 11; */
        if (message.sectionData)
            SectionData.internalBinaryWrite(message.sectionData, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.CombinationEp
 */
export const CombinationEp = new CombinationEp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Covenanter$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Covenanter", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Covenanter
 */
export const Covenanter = new Covenanter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeliveryData$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.DeliveryData", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "module_style", kind: "message", T: () => Style },
            { no: 3, name: "more", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "activity", kind: "message", oneof: "data", T: () => Activity },
            { no: 5, name: "characters", kind: "message", oneof: "data", T: () => Characters },
            { no: 6, name: "theatre_hot_topic", kind: "message", oneof: "data", T: () => TheatreHotTopic },
            { no: 7, name: "agg_eps", kind: "message", oneof: "data", T: () => AggEps },
            { no: 8, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.more = "";
        message.data = { oneofKind: undefined };
        message.id = 0;
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Style module_style */ 2:
                    message.moduleStyle = Style.internalBinaryRead(reader, reader.uint32(), options, message.moduleStyle);
                    break;
                case /* string more */ 3:
                    message.more = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Activity activity */ 4:
                    message.data = {
                        oneofKind: "activity",
                        activity: Activity.internalBinaryRead(reader, reader.uint32(), options, message.data.activity)
                    };
                    break;
                case /* bilibili.app.viewunite.common.Characters characters */ 5:
                    message.data = {
                        oneofKind: "characters",
                        characters: Characters.internalBinaryRead(reader, reader.uint32(), options, message.data.characters)
                    };
                    break;
                case /* bilibili.app.viewunite.common.TheatreHotTopic theatre_hot_topic */ 6:
                    message.data = {
                        oneofKind: "theatreHotTopic",
                        theatreHotTopic: TheatreHotTopic.internalBinaryRead(reader, reader.uint32(), options, message.data.theatreHotTopic)
                    };
                    break;
                case /* bilibili.app.viewunite.common.AggEps agg_eps */ 7:
                    message.data = {
                        oneofKind: "aggEps",
                        aggEps: AggEps.internalBinaryRead(reader, reader.uint32(), options, message.data.aggEps)
                    };
                    break;
                case /* int32 id */ 8:
                    message.id = reader.int32();
                    break;
                case /* map<string, string> report */ 9:
                    this.binaryReadMap9(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap9(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.DeliveryData.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* bilibili.app.viewunite.common.Style module_style = 2; */
        if (message.moduleStyle)
            Style.internalBinaryWrite(message.moduleStyle, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string more = 3; */
        if (message.more !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.more);
        /* bilibili.app.viewunite.common.Activity activity = 4; */
        if (message.data.oneofKind === "activity")
            Activity.internalBinaryWrite(message.data.activity, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Characters characters = 5; */
        if (message.data.oneofKind === "characters")
            Characters.internalBinaryWrite(message.data.characters, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.TheatreHotTopic theatre_hot_topic = 6; */
        if (message.data.oneofKind === "theatreHotTopic")
            TheatreHotTopic.internalBinaryWrite(message.data.theatreHotTopic, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.AggEps agg_eps = 7; */
        if (message.data.oneofKind === "aggEps")
            AggEps.internalBinaryWrite(message.data.aggEps, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int32 id = 8; */
        if (message.id !== 0)
            writer.tag(8, WireType.Varint).int32(message.id);
        /* map<string, string> report = 9; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.DeliveryData
 */
export const DeliveryData = new DeliveryData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Desc$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Desc", [
            { no: 1, name: "info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.info = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string info */ 1:
                    message.info = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string info = 1; */
        if (message.info !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.info);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Desc
 */
export const Desc = new Desc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DescV2$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.DescV2", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.type = 0;
        message.uri = "";
        message.rid = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string uri */ 3:
                    message.uri = reader.string();
                    break;
                case /* int64 rid */ 4:
                    message.rid = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string uri = 3; */
        if (message.uri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uri);
        /* int64 rid = 4; */
        if (message.rid !== 0)
            writer.tag(4, WireType.Varint).int64(message.rid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.DescV2
 */
export const DescV2 = new DescV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dimension$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Dimension", [
            { no: 1, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "rotate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.width = 0;
        message.height = 0;
        message.rotate = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 width */ 1:
                    message.width = reader.int64().toNumber();
                    break;
                case /* int64 height */ 2:
                    message.height = reader.int64().toNumber();
                    break;
                case /* int64 rotate */ 3:
                    message.rotate = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 width = 1; */
        if (message.width !== 0)
            writer.tag(1, WireType.Varint).int64(message.width);
        /* int64 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).int64(message.height);
        /* int64 rotate = 3; */
        if (message.rotate !== 0)
            writer.tag(3, WireType.Varint).int64(message.rotate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Dimension
 */
export const Dimension = new Dimension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DislikeReasons$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.DislikeReasons", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "rid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "tag_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.mid = 0;
        message.rid = 0;
        message.tagId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 mid */ 2:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* int32 rid */ 3:
                    message.rid = reader.int32();
                    break;
                case /* int64 tag_id */ 4:
                    message.tagId = reader.int64().toNumber();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 mid = 2; */
        if (message.mid !== 0)
            writer.tag(2, WireType.Varint).int64(message.mid);
        /* int32 rid = 3; */
        if (message.rid !== 0)
            writer.tag(3, WireType.Varint).int32(message.rid);
        /* int64 tag_id = 4; */
        if (message.tagId !== 0)
            writer.tag(4, WireType.Varint).int64(message.tagId);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.DislikeReasons
 */
export const DislikeReasons = new DislikeReasons$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FollowLayer$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.FollowLayer", [
            { no: 1, name: "staff", kind: "message", T: () => Staff },
            { no: 2, name: "desc", kind: "message", T: () => Desc },
            { no: 3, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.Staff staff */ 1:
                    message.staff = Staff.internalBinaryRead(reader, reader.uint32(), options, message.staff);
                    break;
                case /* bilibili.app.viewunite.common.Desc desc */ 2:
                    message.desc = Desc.internalBinaryRead(reader, reader.uint32(), options, message.desc);
                    break;
                case /* map<string, string> report */ 3:
                    this.binaryReadMap3(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.FollowLayer.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.Staff staff = 1; */
        if (message.staff)
            Staff.internalBinaryWrite(message.staff, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Desc desc = 2; */
        if (message.desc)
            Desc.internalBinaryWrite(message.desc, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> report = 3; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.FollowLayer
 */
export const FollowLayer = new FollowLayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Headline$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Headline", [
            { no: 1, name: "label", kind: "message", T: () => Label },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.Label label */ 1:
                    message.label = Label.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.Label label = 1; */
        if (message.label)
            Label.internalBinaryWrite(message.label, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Headline
 */
export const Headline = new Headline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoryNode$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.HistoryNode", [
            { no: 1, name: "node_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.nodeId = 0;
        message.title = "";
        message.cid = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 node_id */ 1:
                    message.nodeId = reader.int64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 node_id = 1; */
        if (message.nodeId !== 0)
            writer.tag(1, WireType.Varint).int64(message.nodeId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int64 cid = 3; */
        if (message.cid !== 0)
            writer.tag(3, WireType.Varint).int64(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.HistoryNode
 */
export const HistoryNode = new HistoryNode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Honor$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Honor", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "url_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "type", kind: "enum", T: () => ["bilibili.app.viewunite.common.HonorType", HonorType] },
            { no: 12, name: "honor_jump_type", kind: "enum", T: () => ["bilibili.app.viewunite.common.HonorJumpType", HonorJumpType] },
            { no: 13, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.icon = "";
        message.iconNight = "";
        message.text = "";
        message.textExtra = "";
        message.textColor = "";
        message.textColorNight = "";
        message.bgColor = "";
        message.bgColorNight = "";
        message.url = "";
        message.urlText = "";
        message.type = 0;
        message.honorJumpType = 0;
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                case /* string icon_night */ 2:
                    message.iconNight = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string text_extra */ 4:
                    message.textExtra = reader.string();
                    break;
                case /* string text_color */ 5:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 6:
                    message.textColorNight = reader.string();
                    break;
                case /* string bg_color */ 7:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 8:
                    message.bgColorNight = reader.string();
                    break;
                case /* string url */ 9:
                    message.url = reader.string();
                    break;
                case /* string url_text */ 10:
                    message.urlText = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.HonorType type */ 11:
                    message.type = reader.int32();
                    break;
                case /* bilibili.app.viewunite.common.HonorJumpType honor_jump_type */ 12:
                    message.honorJumpType = reader.int32();
                    break;
                case /* map<string, string> report */ 13:
                    this.binaryReadMap13(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap13(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.Honor.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        /* string icon_night = 2; */
        if (message.iconNight !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconNight);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string text_extra = 4; */
        if (message.textExtra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.textExtra);
        /* string text_color = 5; */
        if (message.textColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 6; */
        if (message.textColorNight !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.textColorNight);
        /* string bg_color = 7; */
        if (message.bgColor !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 8; */
        if (message.bgColorNight !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.bgColorNight);
        /* string url = 9; */
        if (message.url !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.url);
        /* string url_text = 10; */
        if (message.urlText !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.urlText);
        /* bilibili.app.viewunite.common.HonorType type = 11; */
        if (message.type !== 0)
            writer.tag(11, WireType.Varint).int32(message.type);
        /* bilibili.app.viewunite.common.HonorJumpType honor_jump_type = 12; */
        if (message.honorJumpType !== 0)
            writer.tag(12, WireType.Varint).int32(message.honorJumpType);
        /* map<string, string> report = 13; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Honor
 */
export const Honor = new Honor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IconFont$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.IconFont", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.IconFont
 */
export const IconFont = new IconFont$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Interaction$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Interaction", [
            { no: 1, name: "ep_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "history_node", kind: "message", T: () => HistoryNode },
            { no: 3, name: "graph_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_interaction", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.epId = 0;
        message.graphVersion = 0;
        message.msg = "";
        message.isInteraction = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ep_id */ 1:
                    message.epId = reader.int64().toNumber();
                    break;
                case /* bilibili.app.viewunite.common.HistoryNode history_node */ 2:
                    message.historyNode = HistoryNode.internalBinaryRead(reader, reader.uint32(), options, message.historyNode);
                    break;
                case /* int64 graph_version */ 3:
                    message.graphVersion = reader.int64().toNumber();
                    break;
                case /* string msg */ 4:
                    message.msg = reader.string();
                    break;
                case /* bool is_interaction */ 5:
                    message.isInteraction = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 ep_id = 1; */
        if (message.epId !== 0)
            writer.tag(1, WireType.Varint).int64(message.epId);
        /* bilibili.app.viewunite.common.HistoryNode history_node = 2; */
        if (message.historyNode)
            HistoryNode.internalBinaryWrite(message.historyNode, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 graph_version = 3; */
        if (message.graphVersion !== 0)
            writer.tag(3, WireType.Varint).int64(message.graphVersion);
        /* string msg = 4; */
        if (message.msg !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.msg);
        /* bool is_interaction = 5; */
        if (message.isInteraction !== false)
            writer.tag(5, WireType.Varint).bool(message.isInteraction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Interaction
 */
export const Interaction = new Interaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Item", [
            { no: 1, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.link = "";
        message.cover = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string link */ 1:
                    message.link = reader.string();
                    break;
                case /* string cover */ 2:
                    message.cover = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string link = 1; */
        if (message.link !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.link);
        /* string cover = 2; */
        if (message.cover !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cover);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KingPos$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.KingPos", [
            { no: 1, name: "disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["bilibili.app.viewunite.common.KingPositionType", KingPositionType] },
            { no: 4, name: "disable_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "checked_post", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "like", kind: "message", oneof: "extend", T: () => LikeExtend },
            { no: 7, name: "coin", kind: "message", oneof: "extend", T: () => CoinExtend }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.disable = false;
        message.icon = "";
        message.type = 0;
        message.disableToast = "";
        message.checkedPost = "";
        message.extend = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool disable */ 1:
                    message.disable = reader.bool();
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.KingPositionType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string disable_toast */ 4:
                    message.disableToast = reader.string();
                    break;
                case /* string checked_post */ 5:
                    message.checkedPost = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.LikeExtend like */ 6:
                    message.extend = {
                        oneofKind: "like",
                        like: LikeExtend.internalBinaryRead(reader, reader.uint32(), options, message.extend.like)
                    };
                    break;
                case /* bilibili.app.viewunite.common.CoinExtend coin */ 7:
                    message.extend = {
                        oneofKind: "coin",
                        coin: CoinExtend.internalBinaryRead(reader, reader.uint32(), options, message.extend.coin)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool disable = 1; */
        if (message.disable !== false)
            writer.tag(1, WireType.Varint).bool(message.disable);
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        /* bilibili.app.viewunite.common.KingPositionType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string disable_toast = 4; */
        if (message.disableToast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.disableToast);
        /* string checked_post = 5; */
        if (message.checkedPost !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.checkedPost);
        /* bilibili.app.viewunite.common.LikeExtend like = 6; */
        if (message.extend.oneofKind === "like")
            LikeExtend.internalBinaryWrite(message.extend.like, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.CoinExtend coin = 7; */
        if (message.extend.oneofKind === "coin")
            CoinExtend.internalBinaryWrite(message.extend.coin, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.KingPos
 */
export const KingPos = new KingPos$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KingPosition$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.KingPosition", [
            { no: 1, name: "king_pos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KingPos },
            { no: 2, name: "extenf", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KingPos }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.kingPos = [];
        message.extenf = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.viewunite.common.KingPos king_pos */ 1:
                    message.kingPos.push(KingPos.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.viewunite.common.KingPos extenf */ 2:
                    message.extenf.push(KingPos.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.viewunite.common.KingPos king_pos = 1; */
        for (let i = 0; i < message.kingPos.length; i++)
            KingPos.internalBinaryWrite(message.kingPos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.viewunite.common.KingPos extenf = 2; */
        for (let i = 0; i < message.extenf.length; i++)
            KingPos.internalBinaryWrite(message.extenf[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.KingPosition
 */
export const KingPosition = new KingPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Label$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Label", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "icon_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "icon_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "lottie", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "lottie_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.uri = "";
        message.icon = "";
        message.iconNight = "";
        message.iconWidth = 0;
        message.iconHeight = 0;
        message.lottie = "";
        message.lottieNight = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* string icon_night */ 4:
                    message.iconNight = reader.string();
                    break;
                case /* int64 icon_width */ 5:
                    message.iconWidth = reader.int64().toNumber();
                    break;
                case /* int64 icon_height */ 6:
                    message.iconHeight = reader.int64().toNumber();
                    break;
                case /* string lottie */ 7:
                    message.lottie = reader.string();
                    break;
                case /* string lottie_night */ 8:
                    message.lottieNight = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* string icon_night = 4; */
        if (message.iconNight !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.iconNight);
        /* int64 icon_width = 5; */
        if (message.iconWidth !== 0)
            writer.tag(5, WireType.Varint).int64(message.iconWidth);
        /* int64 icon_height = 6; */
        if (message.iconHeight !== 0)
            writer.tag(6, WireType.Varint).int64(message.iconHeight);
        /* string lottie = 7; */
        if (message.lottie !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.lottie);
        /* string lottie_night = 8; */
        if (message.lottieNight !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.lottieNight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Label
 */
export const Label = new Label$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeComment$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.LikeComment", [
            { no: 1, name: "reply", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.reply = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reply */ 1:
                    message.reply = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string reply = 1; */
        if (message.reply !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.reply);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.LikeComment
 */
export const LikeComment = new LikeComment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeExtend$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.LikeExtend", [
            { no: 1, name: "triple_like", kind: "message", T: () => UpLikeImg },
            { no: 2, name: "like_animation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player_animation", kind: "message", T: () => PlayerAnimation },
            { no: 4, name: "resource", kind: "message", T: () => ActivityResource }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.likeAnimation = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.UpLikeImg triple_like */ 1:
                    message.tripleLike = UpLikeImg.internalBinaryRead(reader, reader.uint32(), options, message.tripleLike);
                    break;
                case /* string like_animation */ 2:
                    message.likeAnimation = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.PlayerAnimation player_animation */ 3:
                    message.playerAnimation = PlayerAnimation.internalBinaryRead(reader, reader.uint32(), options, message.playerAnimation);
                    break;
                case /* bilibili.app.viewunite.common.ActivityResource resource */ 4:
                    message.resource = ActivityResource.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.UpLikeImg triple_like = 1; */
        if (message.tripleLike)
            UpLikeImg.internalBinaryWrite(message.tripleLike, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string like_animation = 2; */
        if (message.likeAnimation !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.likeAnimation);
        /* bilibili.app.viewunite.common.PlayerAnimation player_animation = 3; */
        if (message.playerAnimation)
            PlayerAnimation.internalBinaryWrite(message.playerAnimation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.ActivityResource resource = 4; */
        if (message.resource)
            ActivityResource.internalBinaryWrite(message.resource, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.LikeExtend
 */
export const LikeExtend = new LikeExtend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Live$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Live", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "endpage_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mid = 0;
        message.roomId = 0;
        message.uri = "";
        message.endpageUri = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* int64 room_id */ 2:
                    message.roomId = reader.int64().toNumber();
                    break;
                case /* string uri */ 3:
                    message.uri = reader.string();
                    break;
                case /* string endpage_uri */ 4:
                    message.endpageUri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* int64 room_id = 2; */
        if (message.roomId !== 0)
            writer.tag(2, WireType.Varint).int64(message.roomId);
        /* string uri = 3; */
        if (message.uri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uri);
        /* string endpage_uri = 4; */
        if (message.endpageUri !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.endpageUri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Live
 */
export const Live = new Live$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveOrder$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.LiveOrder", [
            { no: 1, name: "sid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_plan_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "is_follow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "follow_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sid = 0;
        message.text = "";
        message.livePlanStartTime = 0;
        message.isFollow = false;
        message.followCount = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 sid */ 1:
                    message.sid = reader.int64().toNumber();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* int64 live_plan_start_time */ 3:
                    message.livePlanStartTime = reader.int64().toNumber();
                    break;
                case /* bool is_follow */ 4:
                    message.isFollow = reader.bool();
                    break;
                case /* int64 follow_count */ 5:
                    message.followCount = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 sid = 1; */
        if (message.sid !== 0)
            writer.tag(1, WireType.Varint).int64(message.sid);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* int64 live_plan_start_time = 3; */
        if (message.livePlanStartTime !== 0)
            writer.tag(3, WireType.Varint).int64(message.livePlanStartTime);
        /* bool is_follow = 4; */
        if (message.isFollow !== false)
            writer.tag(4, WireType.Varint).bool(message.isFollow);
        /* int64 follow_count = 5; */
        if (message.followCount !== 0)
            writer.tag(5, WireType.Varint).int64(message.followCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.LiveOrder
 */
export const LiveOrder = new LiveOrder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Mine$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Mine", [
            { no: 1, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "rank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.amount = 0;
        message.rank = 0;
        message.msg = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double amount */ 1:
                    message.amount = reader.double();
                    break;
                case /* int32 rank */ 2:
                    message.rank = reader.int32();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* double amount = 1; */
        if (message.amount !== 0)
            writer.tag(1, WireType.Bit64).double(message.amount);
        /* int32 rank = 2; */
        if (message.rank !== 0)
            writer.tag(2, WireType.Varint).int32(message.rank);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Mine
 */
export const Mine = new Mine$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Module", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.app.viewunite.common.ModuleType", ModuleType] },
            { no: 2, name: "ogv_introduction", kind: "message", oneof: "data", T: () => OgvIntroduction },
            { no: 3, name: "ugc_introduction", kind: "message", oneof: "data", T: () => UgcIntroduction },
            { no: 4, name: "king_position", kind: "message", oneof: "data", T: () => KingPosition },
            { no: 5, name: "head_line", kind: "message", oneof: "data", T: () => Headline },
            { no: 6, name: "ogv_title", kind: "message", oneof: "data", T: () => OgvTitle },
            { no: 7, name: "honor", kind: "message", oneof: "data", T: () => Honor },
            { no: 8, name: "list", kind: "message", oneof: "data", T: () => UserList },
            { no: 9, name: "staffs", kind: "message", oneof: "data", T: () => Staffs },
            { no: 10, name: "activity_reserve", kind: "message", oneof: "data", T: () => ActivityReserve },
            { no: 11, name: "live_order", kind: "message", oneof: "data", T: () => LiveOrder },
            { no: 12, name: "section_data", kind: "message", oneof: "data", T: () => SectionData },
            { no: 13, name: "delivery_data", kind: "message", oneof: "data", T: () => DeliveryData },
            { no: 14, name: "follow_layer", kind: "message", oneof: "data", T: () => FollowLayer },
            { no: 15, name: "ogv_seasons", kind: "message", oneof: "data", T: () => OgvSeasons },
            { no: 16, name: "ugc_season", kind: "message", oneof: "data", T: () => UgcSeasons },
            { no: 17, name: "ogv_live_reserve", kind: "message", oneof: "data", T: () => OgvLiveReserve },
            { no: 18, name: "combination_ep", kind: "message", oneof: "data", T: () => CombinationEp },
            { no: 19, name: "sponsor", kind: "message", oneof: "data", T: () => Sponsor },
            { no: 20, name: "activity_entrance_module", kind: "message", oneof: "data", T: () => ActivityEntranceModule },
            { no: 21, name: "serial_season", kind: "message", oneof: "data", T: () => SerialSeason },
            { no: 22, name: "relates", kind: "message", oneof: "data", T: () => Relates },
            { no: 23, name: "banner", kind: "message", oneof: "data", T: () => Banner },
            { no: 24, name: "audio", kind: "message", oneof: "data", T: () => Audio },
            { no: 25, name: "like_comment", kind: "message", oneof: "data", T: () => LikeComment },
            { no: 26, name: "attention_recommend", kind: "message", oneof: "data", T: () => AttentionRecommend },
            { no: 27, name: "covenanter", kind: "message", oneof: "data", T: () => Covenanter }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.ModuleType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bilibili.app.viewunite.common.OgvIntroduction ogv_introduction */ 2:
                    message.data = {
                        oneofKind: "ogvIntroduction",
                        ogvIntroduction: OgvIntroduction.internalBinaryRead(reader, reader.uint32(), options, message.data.ogvIntroduction)
                    };
                    break;
                case /* bilibili.app.viewunite.common.UgcIntroduction ugc_introduction */ 3:
                    message.data = {
                        oneofKind: "ugcIntroduction",
                        ugcIntroduction: UgcIntroduction.internalBinaryRead(reader, reader.uint32(), options, message.data.ugcIntroduction)
                    };
                    break;
                case /* bilibili.app.viewunite.common.KingPosition king_position */ 4:
                    message.data = {
                        oneofKind: "kingPosition",
                        kingPosition: KingPosition.internalBinaryRead(reader, reader.uint32(), options, message.data.kingPosition)
                    };
                    break;
                case /* bilibili.app.viewunite.common.Headline head_line */ 5:
                    message.data = {
                        oneofKind: "headLine",
                        headLine: Headline.internalBinaryRead(reader, reader.uint32(), options, message.data.headLine)
                    };
                    break;
                case /* bilibili.app.viewunite.common.OgvTitle ogv_title */ 6:
                    message.data = {
                        oneofKind: "ogvTitle",
                        ogvTitle: OgvTitle.internalBinaryRead(reader, reader.uint32(), options, message.data.ogvTitle)
                    };
                    break;
                case /* bilibili.app.viewunite.common.Honor honor */ 7:
                    message.data = {
                        oneofKind: "honor",
                        honor: Honor.internalBinaryRead(reader, reader.uint32(), options, message.data.honor)
                    };
                    break;
                case /* bilibili.app.viewunite.common.UserList list */ 8:
                    message.data = {
                        oneofKind: "list",
                        list: UserList.internalBinaryRead(reader, reader.uint32(), options, message.data.list)
                    };
                    break;
                case /* bilibili.app.viewunite.common.Staffs staffs */ 9:
                    message.data = {
                        oneofKind: "staffs",
                        staffs: Staffs.internalBinaryRead(reader, reader.uint32(), options, message.data.staffs)
                    };
                    break;
                case /* bilibili.app.viewunite.common.ActivityReserve activity_reserve */ 10:
                    message.data = {
                        oneofKind: "activityReserve",
                        activityReserve: ActivityReserve.internalBinaryRead(reader, reader.uint32(), options, message.data.activityReserve)
                    };
                    break;
                case /* bilibili.app.viewunite.common.LiveOrder live_order */ 11:
                    message.data = {
                        oneofKind: "liveOrder",
                        liveOrder: LiveOrder.internalBinaryRead(reader, reader.uint32(), options, message.data.liveOrder)
                    };
                    break;
                case /* bilibili.app.viewunite.common.SectionData section_data */ 12:
                    message.data = {
                        oneofKind: "sectionData",
                        sectionData: SectionData.internalBinaryRead(reader, reader.uint32(), options, message.data.sectionData)
                    };
                    break;
                case /* bilibili.app.viewunite.common.DeliveryData delivery_data */ 13:
                    message.data = {
                        oneofKind: "deliveryData",
                        deliveryData: DeliveryData.internalBinaryRead(reader, reader.uint32(), options, message.data.deliveryData)
                    };
                    break;
                case /* bilibili.app.viewunite.common.FollowLayer follow_layer */ 14:
                    message.data = {
                        oneofKind: "followLayer",
                        followLayer: FollowLayer.internalBinaryRead(reader, reader.uint32(), options, message.data.followLayer)
                    };
                    break;
                case /* bilibili.app.viewunite.common.OgvSeasons ogv_seasons */ 15:
                    message.data = {
                        oneofKind: "ogvSeasons",
                        ogvSeasons: OgvSeasons.internalBinaryRead(reader, reader.uint32(), options, message.data.ogvSeasons)
                    };
                    break;
                case /* bilibili.app.viewunite.common.UgcSeasons ugc_season */ 16:
                    message.data = {
                        oneofKind: "ugcSeason",
                        ugcSeason: UgcSeasons.internalBinaryRead(reader, reader.uint32(), options, message.data.ugcSeason)
                    };
                    break;
                case /* bilibili.app.viewunite.common.OgvLiveReserve ogv_live_reserve */ 17:
                    message.data = {
                        oneofKind: "ogvLiveReserve",
                        ogvLiveReserve: OgvLiveReserve.internalBinaryRead(reader, reader.uint32(), options, message.data.ogvLiveReserve)
                    };
                    break;
                case /* bilibili.app.viewunite.common.CombinationEp combination_ep */ 18:
                    message.data = {
                        oneofKind: "combinationEp",
                        combinationEp: CombinationEp.internalBinaryRead(reader, reader.uint32(), options, message.data.combinationEp)
                    };
                    break;
                case /* bilibili.app.viewunite.common.Sponsor sponsor */ 19:
                    message.data = {
                        oneofKind: "sponsor",
                        sponsor: Sponsor.internalBinaryRead(reader, reader.uint32(), options, message.data.sponsor)
                    };
                    break;
                case /* bilibili.app.viewunite.common.ActivityEntranceModule activity_entrance_module */ 20:
                    message.data = {
                        oneofKind: "activityEntranceModule",
                        activityEntranceModule: ActivityEntranceModule.internalBinaryRead(reader, reader.uint32(), options, message.data.activityEntranceModule)
                    };
                    break;
                case /* bilibili.app.viewunite.common.SerialSeason serial_season */ 21:
                    message.data = {
                        oneofKind: "serialSeason",
                        serialSeason: SerialSeason.internalBinaryRead(reader, reader.uint32(), options, message.data.serialSeason)
                    };
                    break;
                case /* bilibili.app.viewunite.common.Relates relates */ 22:
                    message.data = {
                        oneofKind: "relates",
                        relates: Relates.internalBinaryRead(reader, reader.uint32(), options, message.data.relates)
                    };
                    break;
                case /* bilibili.app.viewunite.common.Banner banner */ 23:
                    message.data = {
                        oneofKind: "banner",
                        banner: Banner.internalBinaryRead(reader, reader.uint32(), options, message.data.banner)
                    };
                    break;
                case /* bilibili.app.viewunite.common.Audio audio */ 24:
                    message.data = {
                        oneofKind: "audio",
                        audio: Audio.internalBinaryRead(reader, reader.uint32(), options, message.data.audio)
                    };
                    break;
                case /* bilibili.app.viewunite.common.LikeComment like_comment */ 25:
                    message.data = {
                        oneofKind: "likeComment",
                        likeComment: LikeComment.internalBinaryRead(reader, reader.uint32(), options, message.data.likeComment)
                    };
                    break;
                case /* bilibili.app.viewunite.common.AttentionRecommend attention_recommend */ 26:
                    message.data = {
                        oneofKind: "attentionRecommend",
                        attentionRecommend: AttentionRecommend.internalBinaryRead(reader, reader.uint32(), options, message.data.attentionRecommend)
                    };
                    break;
                case /* bilibili.app.viewunite.common.Covenanter covenanter */ 27:
                    message.data = {
                        oneofKind: "covenanter",
                        covenanter: Covenanter.internalBinaryRead(reader, reader.uint32(), options, message.data.covenanter)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.ModuleType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bilibili.app.viewunite.common.OgvIntroduction ogv_introduction = 2; */
        if (message.data.oneofKind === "ogvIntroduction")
            OgvIntroduction.internalBinaryWrite(message.data.ogvIntroduction, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.UgcIntroduction ugc_introduction = 3; */
        if (message.data.oneofKind === "ugcIntroduction")
            UgcIntroduction.internalBinaryWrite(message.data.ugcIntroduction, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.KingPosition king_position = 4; */
        if (message.data.oneofKind === "kingPosition")
            KingPosition.internalBinaryWrite(message.data.kingPosition, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Headline head_line = 5; */
        if (message.data.oneofKind === "headLine")
            Headline.internalBinaryWrite(message.data.headLine, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.OgvTitle ogv_title = 6; */
        if (message.data.oneofKind === "ogvTitle")
            OgvTitle.internalBinaryWrite(message.data.ogvTitle, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Honor honor = 7; */
        if (message.data.oneofKind === "honor")
            Honor.internalBinaryWrite(message.data.honor, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.UserList list = 8; */
        if (message.data.oneofKind === "list")
            UserList.internalBinaryWrite(message.data.list, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Staffs staffs = 9; */
        if (message.data.oneofKind === "staffs")
            Staffs.internalBinaryWrite(message.data.staffs, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.ActivityReserve activity_reserve = 10; */
        if (message.data.oneofKind === "activityReserve")
            ActivityReserve.internalBinaryWrite(message.data.activityReserve, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.LiveOrder live_order = 11; */
        if (message.data.oneofKind === "liveOrder")
            LiveOrder.internalBinaryWrite(message.data.liveOrder, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.SectionData section_data = 12; */
        if (message.data.oneofKind === "sectionData")
            SectionData.internalBinaryWrite(message.data.sectionData, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.DeliveryData delivery_data = 13; */
        if (message.data.oneofKind === "deliveryData")
            DeliveryData.internalBinaryWrite(message.data.deliveryData, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.FollowLayer follow_layer = 14; */
        if (message.data.oneofKind === "followLayer")
            FollowLayer.internalBinaryWrite(message.data.followLayer, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.OgvSeasons ogv_seasons = 15; */
        if (message.data.oneofKind === "ogvSeasons")
            OgvSeasons.internalBinaryWrite(message.data.ogvSeasons, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.UgcSeasons ugc_season = 16; */
        if (message.data.oneofKind === "ugcSeason")
            UgcSeasons.internalBinaryWrite(message.data.ugcSeason, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.OgvLiveReserve ogv_live_reserve = 17; */
        if (message.data.oneofKind === "ogvLiveReserve")
            OgvLiveReserve.internalBinaryWrite(message.data.ogvLiveReserve, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.CombinationEp combination_ep = 18; */
        if (message.data.oneofKind === "combinationEp")
            CombinationEp.internalBinaryWrite(message.data.combinationEp, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Sponsor sponsor = 19; */
        if (message.data.oneofKind === "sponsor")
            Sponsor.internalBinaryWrite(message.data.sponsor, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.ActivityEntranceModule activity_entrance_module = 20; */
        if (message.data.oneofKind === "activityEntranceModule")
            ActivityEntranceModule.internalBinaryWrite(message.data.activityEntranceModule, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.SerialSeason serial_season = 21; */
        if (message.data.oneofKind === "serialSeason")
            SerialSeason.internalBinaryWrite(message.data.serialSeason, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Relates relates = 22; */
        if (message.data.oneofKind === "relates")
            Relates.internalBinaryWrite(message.data.relates, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Banner banner = 23; */
        if (message.data.oneofKind === "banner")
            Banner.internalBinaryWrite(message.data.banner, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Audio audio = 24; */
        if (message.data.oneofKind === "audio")
            Audio.internalBinaryWrite(message.data.audio, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.LikeComment like_comment = 25; */
        if (message.data.oneofKind === "likeComment")
            LikeComment.internalBinaryWrite(message.data.likeComment, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.AttentionRecommend attention_recommend = 26; */
        if (message.data.oneofKind === "attentionRecommend")
            AttentionRecommend.internalBinaryWrite(message.data.attentionRecommend, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Covenanter covenanter = 27; */
        if (message.data.oneofKind === "covenanter")
            Covenanter.internalBinaryWrite(message.data.covenanter, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Module
 */
export const Module = new Module$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiViewEp$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.MultiViewEp", [
            { no: 1, name: "ep_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.epId = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ep_id */ 1:
                    message.epId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 ep_id = 1; */
        if (message.epId !== 0)
            writer.tag(1, WireType.Varint).int64(message.epId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.MultiViewEp
 */
export const MultiViewEp = new MultiViewEp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewEp$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.NewEp", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_new", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "more", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "index_show", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.title = "";
        message.desc = "";
        message.isNew = 0;
        message.more = "";
        message.cover = "";
        message.indexShow = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string desc */ 3:
                    message.desc = reader.string();
                    break;
                case /* int32 is_new */ 4:
                    message.isNew = reader.int32();
                    break;
                case /* string more */ 5:
                    message.more = reader.string();
                    break;
                case /* string cover */ 6:
                    message.cover = reader.string();
                    break;
                case /* string index_show */ 7:
                    message.indexShow = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string desc = 3; */
        if (message.desc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.desc);
        /* int32 is_new = 4; */
        if (message.isNew !== 0)
            writer.tag(4, WireType.Varint).int32(message.isNew);
        /* string more = 5; */
        if (message.more !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.more);
        /* string cover = 6; */
        if (message.cover !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.cover);
        /* string index_show = 7; */
        if (message.indexShow !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.indexShow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.NewEp
 */
export const NewEp = new NewEp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfficialVerify$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.OfficialVerify", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.desc = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string desc */ 2:
                    message.desc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string desc = 2; */
        if (message.desc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.desc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.OfficialVerify
 */
export const OfficialVerify = new OfficialVerify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OgvIntroduction$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.OgvIntroduction", [
            { no: 1, name: "followers", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "score", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "play_data", kind: "message", T: () => StatInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.followers = "";
        message.score = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string followers */ 1:
                    message.followers = reader.string();
                    break;
                case /* string score */ 2:
                    message.score = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.StatInfo play_data */ 3:
                    message.playData = StatInfo.internalBinaryRead(reader, reader.uint32(), options, message.playData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string followers = 1; */
        if (message.followers !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.followers);
        /* string score = 2; */
        if (message.score !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.score);
        /* bilibili.app.viewunite.common.StatInfo play_data = 3; */
        if (message.playData)
            StatInfo.internalBinaryWrite(message.playData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.OgvIntroduction
 */
export const OgvIntroduction = new OgvIntroduction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OgvLiveReserve$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.OgvLiveReserve", [
            { no: 1, name: "reserve_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "night_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "click_button", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "follow_video_is_reserve_live", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "night_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "night_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "bt_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "bt_frame_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "night_bt_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "night_bt_frame_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "active_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "reserve_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "bt_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "night_bt_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.reserveId = 0;
        message.title = "";
        message.icon = "";
        message.nightIcon = "";
        message.clickButton = "";
        message.link = "";
        message.followVideoIsReserveLive = 0;
        message.bgColor = "";
        message.nightBgColor = "";
        message.textColor = "";
        message.nightTextColor = "";
        message.btBgColor = "";
        message.btFrameColor = "";
        message.nightBtBgColor = "";
        message.nightBtFrameColor = "";
        message.activeType = 0;
        message.reserveStatus = 0;
        message.btTextColor = "";
        message.nightBtTextColor = "";
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 reserve_id */ 1:
                    message.reserveId = reader.int64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* string night_icon */ 4:
                    message.nightIcon = reader.string();
                    break;
                case /* string click_button */ 5:
                    message.clickButton = reader.string();
                    break;
                case /* string link */ 6:
                    message.link = reader.string();
                    break;
                case /* int32 follow_video_is_reserve_live */ 7:
                    message.followVideoIsReserveLive = reader.int32();
                    break;
                case /* string bg_color */ 8:
                    message.bgColor = reader.string();
                    break;
                case /* string night_bg_color */ 9:
                    message.nightBgColor = reader.string();
                    break;
                case /* string text_color */ 10:
                    message.textColor = reader.string();
                    break;
                case /* string night_text_color */ 11:
                    message.nightTextColor = reader.string();
                    break;
                case /* string bt_bg_color */ 12:
                    message.btBgColor = reader.string();
                    break;
                case /* string bt_frame_color */ 13:
                    message.btFrameColor = reader.string();
                    break;
                case /* string night_bt_bg_color */ 14:
                    message.nightBtBgColor = reader.string();
                    break;
                case /* string night_bt_frame_color */ 15:
                    message.nightBtFrameColor = reader.string();
                    break;
                case /* int32 active_type */ 16:
                    message.activeType = reader.int32();
                    break;
                case /* int32 reserve_status */ 17:
                    message.reserveStatus = reader.int32();
                    break;
                case /* string bt_text_color */ 18:
                    message.btTextColor = reader.string();
                    break;
                case /* string night_bt_text_color */ 19:
                    message.nightBtTextColor = reader.string();
                    break;
                case /* map<string, string> report */ 20:
                    this.binaryReadMap20(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap20(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.OgvLiveReserve.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 reserve_id = 1; */
        if (message.reserveId !== 0)
            writer.tag(1, WireType.Varint).int64(message.reserveId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* string night_icon = 4; */
        if (message.nightIcon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.nightIcon);
        /* string click_button = 5; */
        if (message.clickButton !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.clickButton);
        /* string link = 6; */
        if (message.link !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.link);
        /* int32 follow_video_is_reserve_live = 7; */
        if (message.followVideoIsReserveLive !== 0)
            writer.tag(7, WireType.Varint).int32(message.followVideoIsReserveLive);
        /* string bg_color = 8; */
        if (message.bgColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.bgColor);
        /* string night_bg_color = 9; */
        if (message.nightBgColor !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.nightBgColor);
        /* string text_color = 10; */
        if (message.textColor !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.textColor);
        /* string night_text_color = 11; */
        if (message.nightTextColor !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.nightTextColor);
        /* string bt_bg_color = 12; */
        if (message.btBgColor !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.btBgColor);
        /* string bt_frame_color = 13; */
        if (message.btFrameColor !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.btFrameColor);
        /* string night_bt_bg_color = 14; */
        if (message.nightBtBgColor !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.nightBtBgColor);
        /* string night_bt_frame_color = 15; */
        if (message.nightBtFrameColor !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.nightBtFrameColor);
        /* int32 active_type = 16; */
        if (message.activeType !== 0)
            writer.tag(16, WireType.Varint).int32(message.activeType);
        /* int32 reserve_status = 17; */
        if (message.reserveStatus !== 0)
            writer.tag(17, WireType.Varint).int32(message.reserveStatus);
        /* string bt_text_color = 18; */
        if (message.btTextColor !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.btTextColor);
        /* string night_bt_text_color = 19; */
        if (message.nightBtTextColor !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.nightBtTextColor);
        /* map<string, string> report = 20; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(20, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.OgvLiveReserve
 */
export const OgvLiveReserve = new OgvLiveReserve$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OgvSeasons$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.OgvSeasons", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "serial_season", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SerialSeason },
            { no: 3, name: "style", kind: "enum", T: () => ["bilibili.app.viewunite.common.SerialSeasonCoverStyle", SerialSeasonCoverStyle] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.serialSeason = [];
        message.style = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* repeated bilibili.app.viewunite.common.SerialSeason serial_season */ 2:
                    message.serialSeason.push(SerialSeason.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.viewunite.common.SerialSeasonCoverStyle style */ 3:
                    message.style = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* repeated bilibili.app.viewunite.common.SerialSeason serial_season = 2; */
        for (let i = 0; i < message.serialSeason.length; i++)
            SerialSeason.internalBinaryWrite(message.serialSeason[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.SerialSeasonCoverStyle style = 3; */
        if (message.style !== 0)
            writer.tag(3, WireType.Varint).int32(message.style);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.OgvSeasons
 */
export const OgvSeasons = new OgvSeasons$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OgvTitle$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.OgvTitle", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "badge_info", kind: "message", T: () => BadgeInfo },
            { no: 3, name: "is_show_btn_animation", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "follow_video_is_reserve_live", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "reserve_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "title_delivery_button", kind: "message", T: () => TitleDeliveryButton }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.isShowBtnAnimation = 0;
        message.followVideoIsReserveLive = 0;
        message.reserveId = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.BadgeInfo badge_info */ 2:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                case /* int32 is_show_btn_animation */ 3:
                    message.isShowBtnAnimation = reader.int32();
                    break;
                case /* int32 follow_video_is_reserve_live */ 4:
                    message.followVideoIsReserveLive = reader.int32();
                    break;
                case /* int64 reserve_id */ 5:
                    message.reserveId = reader.int64().toNumber();
                    break;
                case /* bilibili.app.viewunite.common.TitleDeliveryButton title_delivery_button */ 6:
                    message.titleDeliveryButton = TitleDeliveryButton.internalBinaryRead(reader, reader.uint32(), options, message.titleDeliveryButton);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* bilibili.app.viewunite.common.BadgeInfo badge_info = 2; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 is_show_btn_animation = 3; */
        if (message.isShowBtnAnimation !== 0)
            writer.tag(3, WireType.Varint).int32(message.isShowBtnAnimation);
        /* int32 follow_video_is_reserve_live = 4; */
        if (message.followVideoIsReserveLive !== 0)
            writer.tag(4, WireType.Varint).int32(message.followVideoIsReserveLive);
        /* int64 reserve_id = 5; */
        if (message.reserveId !== 0)
            writer.tag(5, WireType.Varint).int64(message.reserveId);
        /* bilibili.app.viewunite.common.TitleDeliveryButton title_delivery_button = 6; */
        if (message.titleDeliveryButton)
            TitleDeliveryButton.internalBinaryWrite(message.titleDeliveryButton, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.OgvTitle
 */
export const OgvTitle = new OgvTitle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Owner$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Owner", [
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fans", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "arc_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "attention", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "attention_relation", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "pub_location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "title_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "face", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 15, name: "fans_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 16, name: "assists", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.url = "";
        message.title = "";
        message.fans = "";
        message.arcCount = "";
        message.attention = 0;
        message.attentionRelation = 0;
        message.pubLocation = "";
        message.titleUrl = "";
        message.face = "";
        message.mid = 0;
        message.fansNum = 0;
        message.assists = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string fans */ 4:
                    message.fans = reader.string();
                    break;
                case /* string arc_count */ 5:
                    message.arcCount = reader.string();
                    break;
                case /* int32 attention */ 6:
                    message.attention = reader.int32();
                    break;
                case /* int32 attention_relation */ 7:
                    message.attentionRelation = reader.int32();
                    break;
                case /* string pub_location */ 8:
                    message.pubLocation = reader.string();
                    break;
                case /* string title_url */ 10:
                    message.titleUrl = reader.string();
                    break;
                case /* string face */ 11:
                    message.face = reader.string();
                    break;
                case /* int64 mid */ 12:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* int64 fans_num */ 15:
                    message.fansNum = reader.int64().toNumber();
                    break;
                case /* repeated int64 assists */ 16:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.assists.push(reader.int64().toNumber());
                    else
                        message.assists.push(reader.int64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string fans = 4; */
        if (message.fans !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fans);
        /* string arc_count = 5; */
        if (message.arcCount !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.arcCount);
        /* int32 attention = 6; */
        if (message.attention !== 0)
            writer.tag(6, WireType.Varint).int32(message.attention);
        /* int32 attention_relation = 7; */
        if (message.attentionRelation !== 0)
            writer.tag(7, WireType.Varint).int32(message.attentionRelation);
        /* string pub_location = 8; */
        if (message.pubLocation !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.pubLocation);
        /* string title_url = 10; */
        if (message.titleUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.titleUrl);
        /* string face = 11; */
        if (message.face !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.face);
        /* int64 mid = 12; */
        if (message.mid !== 0)
            writer.tag(12, WireType.Varint).int64(message.mid);
        /* int64 fans_num = 15; */
        if (message.fansNum !== 0)
            writer.tag(15, WireType.Varint).int64(message.fansNum);
        /* repeated int64 assists = 16; */
        if (message.assists.length) {
            writer.tag(16, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.assists.length; i++)
                writer.int64(message.assists[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Owner
 */
export const Owner = new Owner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Page$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Page", [
            { no: 1, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "part", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "dimension", kind: "message", T: () => Dimension },
            { no: 6, name: "dl_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "dl_subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.cid = 0;
        message.part = "";
        message.duration = 0;
        message.desc = "";
        message.dlTitle = "";
        message.dlSubtitle = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 cid */ 1:
                    message.cid = reader.int64().toNumber();
                    break;
                case /* string part */ 2:
                    message.part = reader.string();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* string desc */ 4:
                    message.desc = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Dimension dimension */ 5:
                    message.dimension = Dimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);
                    break;
                case /* string dl_title */ 6:
                    message.dlTitle = reader.string();
                    break;
                case /* string dl_subtitle */ 7:
                    message.dlSubtitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 cid = 1; */
        if (message.cid !== 0)
            writer.tag(1, WireType.Varint).int64(message.cid);
        /* string part = 2; */
        if (message.part !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.part);
        /* int64 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* string desc = 4; */
        if (message.desc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.desc);
        /* bilibili.app.viewunite.common.Dimension dimension = 5; */
        if (message.dimension)
            Dimension.internalBinaryWrite(message.dimension, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string dl_title = 6; */
        if (message.dlTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.dlTitle);
        /* string dl_subtitle = 7; */
        if (message.dlSubtitle !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.dlSubtitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Page
 */
export const Page = new Page$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pendant$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Pendant", [
            { no: 1, name: "pid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pid = 0;
        message.name = "";
        message.image = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 pid */ 1:
                    message.pid = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string image */ 3:
                    message.image = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 pid = 1; */
        if (message.pid !== 0)
            writer.tag(1, WireType.Varint).int32(message.pid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string image = 3; */
        if (message.image !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.image);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Pendant
 */
export const Pendant = new Pendant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerAnimation$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.PlayerAnimation", [
            { no: 1, name: "player_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_triple_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.playerIcon = "";
        message.playerTripleIcon = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string player_icon */ 1:
                    message.playerIcon = reader.string();
                    break;
                case /* string player_triple_icon */ 2:
                    message.playerTripleIcon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string player_icon = 1; */
        if (message.playerIcon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.playerIcon);
        /* string player_triple_icon = 2; */
        if (message.playerTripleIcon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.playerTripleIcon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.PlayerAnimation
 */
export const PlayerAnimation = new PlayerAnimation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PointActivity$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.PointActivity", [
            { no: 1, name: "tip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tip = "";
        message.content = "";
        message.link = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tip */ 1:
                    message.tip = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string link */ 3:
                    message.link = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string tip = 1; */
        if (message.tip !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tip);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string link = 3; */
        if (message.link !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.link);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.PointActivity
 */
export const PointActivity = new PointActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PowerIconStyle$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.PowerIconStyle", [
            { no: 1, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon_night_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "icon_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.iconUrl = "";
        message.iconNightUrl = "";
        message.iconWidth = 0;
        message.iconHeight = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon_url */ 1:
                    message.iconUrl = reader.string();
                    break;
                case /* string icon_night_url */ 2:
                    message.iconNightUrl = reader.string();
                    break;
                case /* int64 icon_width */ 3:
                    message.iconWidth = reader.int64().toNumber();
                    break;
                case /* int64 icon_height */ 4:
                    message.iconHeight = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon_url = 1; */
        if (message.iconUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iconUrl);
        /* string icon_night_url = 2; */
        if (message.iconNightUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconNightUrl);
        /* int64 icon_width = 3; */
        if (message.iconWidth !== 0)
            writer.tag(3, WireType.Varint).int64(message.iconWidth);
        /* int64 icon_height = 4; */
        if (message.iconHeight !== 0)
            writer.tag(4, WireType.Varint).int64(message.iconHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.PowerIconStyle
 */
export const PowerIconStyle = new PowerIconStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rank$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Rank", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.icon = "";
        message.iconNight = "";
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                case /* string icon_night */ 2:
                    message.iconNight = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        /* string icon_night = 2; */
        if (message.iconNight !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconNight);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Rank
 */
export const Rank = new Rank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RankInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RankInfo", [
            { no: 1, name: "icon_url_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon_url_day", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bkg_night_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bkg_day_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "font_night_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "font_day_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "rank_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "rank_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.iconUrlNight = "";
        message.iconUrlDay = "";
        message.bkgNightColor = "";
        message.bkgDayColor = "";
        message.fontNightColor = "";
        message.fontDayColor = "";
        message.rankContent = "";
        message.rankLink = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon_url_night */ 1:
                    message.iconUrlNight = reader.string();
                    break;
                case /* string icon_url_day */ 2:
                    message.iconUrlDay = reader.string();
                    break;
                case /* string bkg_night_color */ 3:
                    message.bkgNightColor = reader.string();
                    break;
                case /* string bkg_day_color */ 4:
                    message.bkgDayColor = reader.string();
                    break;
                case /* string font_night_color */ 5:
                    message.fontNightColor = reader.string();
                    break;
                case /* string font_day_color */ 6:
                    message.fontDayColor = reader.string();
                    break;
                case /* string rank_content */ 7:
                    message.rankContent = reader.string();
                    break;
                case /* string rank_link */ 8:
                    message.rankLink = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon_url_night = 1; */
        if (message.iconUrlNight !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iconUrlNight);
        /* string icon_url_day = 2; */
        if (message.iconUrlDay !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconUrlDay);
        /* string bkg_night_color = 3; */
        if (message.bkgNightColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bkgNightColor);
        /* string bkg_day_color = 4; */
        if (message.bkgDayColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bkgDayColor);
        /* string font_night_color = 5; */
        if (message.fontNightColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fontNightColor);
        /* string font_day_color = 6; */
        if (message.fontDayColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fontDayColor);
        /* string rank_content = 7; */
        if (message.rankContent !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rankContent);
        /* string rank_link = 8; */
        if (message.rankLink !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.rankLink);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RankInfo
 */
export const RankInfo = new RankInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rating$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Rating", [
            { no: 1, name: "score", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.score = "";
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string score */ 1:
                    message.score = reader.string();
                    break;
                case /* int32 count */ 2:
                    message.count = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string score = 1; */
        if (message.score !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.score);
        /* int32 count = 2; */
        if (message.count !== 0)
            writer.tag(2, WireType.Varint).int32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Rating
 */
export const Rating = new Rating$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateAVCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateAVCard", [
            { no: 1, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "dimension", kind: "message", T: () => Dimension },
            { no: 4, name: "stat", kind: "message", T: () => Stat },
            { no: 5, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "show_up_name", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "rcmd_reason", kind: "message", T: () => BadgeInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.duration = 0;
        message.cid = 0;
        message.jumpUrl = "";
        message.showUpName = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 duration */ 1:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* int64 cid */ 2:
                    message.cid = reader.int64().toNumber();
                    break;
                case /* bilibili.app.viewunite.common.Dimension dimension */ 3:
                    message.dimension = Dimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);
                    break;
                case /* bilibili.app.viewunite.common.Stat stat */ 4:
                    message.stat = Stat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                case /* string jump_url */ 5:
                    message.jumpUrl = reader.string();
                    break;
                case /* bool show_up_name */ 6:
                    message.showUpName = reader.bool();
                    break;
                case /* bilibili.app.viewunite.common.BadgeInfo rcmd_reason */ 7:
                    message.rcmdReason = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.rcmdReason);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 duration = 1; */
        if (message.duration !== 0)
            writer.tag(1, WireType.Varint).int64(message.duration);
        /* int64 cid = 2; */
        if (message.cid !== 0)
            writer.tag(2, WireType.Varint).int64(message.cid);
        /* bilibili.app.viewunite.common.Dimension dimension = 3; */
        if (message.dimension)
            Dimension.internalBinaryWrite(message.dimension, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Stat stat = 4; */
        if (message.stat)
            Stat.internalBinaryWrite(message.stat, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string jump_url = 5; */
        if (message.jumpUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.jumpUrl);
        /* bool show_up_name = 6; */
        if (message.showUpName !== false)
            writer.tag(6, WireType.Varint).bool(message.showUpName);
        /* bilibili.app.viewunite.common.BadgeInfo rcmd_reason = 7; */
        if (message.rcmdReason)
            BadgeInfo.internalBinaryWrite(message.rcmdReason, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateAVCard
 */
export const RelateAVCard = new RelateAVCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateBangumiAvCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateBangumiAvCard", [
            { no: 1, name: "badge", kind: "message", T: () => BadgeInfo },
            { no: 2, name: "stat", kind: "message", T: () => Stat },
            { no: 3, name: "rating", kind: "message", T: () => Rating }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.BadgeInfo badge */ 1:
                    message.badge = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badge);
                    break;
                case /* bilibili.app.viewunite.common.Stat stat */ 2:
                    message.stat = Stat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                case /* bilibili.app.viewunite.common.Rating rating */ 3:
                    message.rating = Rating.internalBinaryRead(reader, reader.uint32(), options, message.rating);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.BadgeInfo badge = 1; */
        if (message.badge)
            BadgeInfo.internalBinaryWrite(message.badge, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Stat stat = 2; */
        if (message.stat)
            Stat.internalBinaryWrite(message.stat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Rating rating = 3; */
        if (message.rating)
            Rating.internalBinaryWrite(message.rating, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateBangumiAvCard
 */
export const RelateBangumiAvCard = new RelateBangumiAvCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateBangumiCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateBangumiCard", [
            { no: 1, name: "season_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "season_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "new_ep", kind: "message", T: () => NewEp },
            { no: 4, name: "stat", kind: "message", T: () => Stat },
            { no: 5, name: "rating", kind: "message", T: () => Rating },
            { no: 6, name: "rcmd_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "badge_info", kind: "message", T: () => BadgeInfo },
            { no: 8, name: "goto_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.seasonId = 0;
        message.seasonType = 0;
        message.rcmdReason = "";
        message.gotoType = "";
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 season_id */ 1:
                    message.seasonId = reader.int32();
                    break;
                case /* int32 season_type */ 2:
                    message.seasonType = reader.int32();
                    break;
                case /* bilibili.app.viewunite.common.NewEp new_ep */ 3:
                    message.newEp = NewEp.internalBinaryRead(reader, reader.uint32(), options, message.newEp);
                    break;
                case /* bilibili.app.viewunite.common.Stat stat */ 4:
                    message.stat = Stat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                case /* bilibili.app.viewunite.common.Rating rating */ 5:
                    message.rating = Rating.internalBinaryRead(reader, reader.uint32(), options, message.rating);
                    break;
                case /* string rcmd_reason */ 6:
                    message.rcmdReason = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.BadgeInfo badge_info */ 7:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                case /* string goto_type */ 8:
                    message.gotoType = reader.string();
                    break;
                case /* map<string, string> report */ 9:
                    this.binaryReadMap9(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap9(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.RelateBangumiCard.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 season_id = 1; */
        if (message.seasonId !== 0)
            writer.tag(1, WireType.Varint).int32(message.seasonId);
        /* int32 season_type = 2; */
        if (message.seasonType !== 0)
            writer.tag(2, WireType.Varint).int32(message.seasonType);
        /* bilibili.app.viewunite.common.NewEp new_ep = 3; */
        if (message.newEp)
            NewEp.internalBinaryWrite(message.newEp, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Stat stat = 4; */
        if (message.stat)
            Stat.internalBinaryWrite(message.stat, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Rating rating = 5; */
        if (message.rating)
            Rating.internalBinaryWrite(message.rating, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string rcmd_reason = 6; */
        if (message.rcmdReason !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.rcmdReason);
        /* bilibili.app.viewunite.common.BadgeInfo badge_info = 7; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string goto_type = 8; */
        if (message.gotoType !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.gotoType);
        /* map<string, string> report = 9; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateBangumiCard
 */
export const RelateBangumiCard = new RelateBangumiCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateBangumiResourceCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateBangumiResourceCard", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "scover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "re_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "re_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "corner", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "card", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "siz", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "rcmd_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 12, name: "goto_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.scover = "";
        message.reType = 0;
        message.reValue = "";
        message.corner = "";
        message.card = 0;
        message.siz = "";
        message.position = 0;
        message.rcmdReason = "";
        message.label = "";
        message.report = {};
        message.gotoType = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string scover */ 2:
                    message.scover = reader.string();
                    break;
                case /* int32 re_type */ 3:
                    message.reType = reader.int32();
                    break;
                case /* string re_value */ 4:
                    message.reValue = reader.string();
                    break;
                case /* string corner */ 5:
                    message.corner = reader.string();
                    break;
                case /* int32 card */ 6:
                    message.card = reader.int32();
                    break;
                case /* string siz */ 7:
                    message.siz = reader.string();
                    break;
                case /* int32 position */ 8:
                    message.position = reader.int32();
                    break;
                case /* string rcmd_reason */ 9:
                    message.rcmdReason = reader.string();
                    break;
                case /* string label */ 10:
                    message.label = reader.string();
                    break;
                case /* map<string, string> report */ 11:
                    this.binaryReadMap11(message.report, reader, options);
                    break;
                case /* string goto_type */ 12:
                    message.gotoType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap11(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.RelateBangumiResourceCard.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string scover = 2; */
        if (message.scover !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.scover);
        /* int32 re_type = 3; */
        if (message.reType !== 0)
            writer.tag(3, WireType.Varint).int32(message.reType);
        /* string re_value = 4; */
        if (message.reValue !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.reValue);
        /* string corner = 5; */
        if (message.corner !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.corner);
        /* int32 card = 6; */
        if (message.card !== 0)
            writer.tag(6, WireType.Varint).int32(message.card);
        /* string siz = 7; */
        if (message.siz !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.siz);
        /* int32 position = 8; */
        if (message.position !== 0)
            writer.tag(8, WireType.Varint).int32(message.position);
        /* string rcmd_reason = 9; */
        if (message.rcmdReason !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.rcmdReason);
        /* string label = 10; */
        if (message.label !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.label);
        /* map<string, string> report = 11; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        /* string goto_type = 12; */
        if (message.gotoType !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.gotoType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateBangumiResourceCard
 */
export const RelateBangumiResourceCard = new RelateBangumiResourceCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateBangumiUgcCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateBangumiUgcCard", [
            { no: 1, name: "badge", kind: "message", T: () => BadgeInfo },
            { no: 2, name: "stat", kind: "message", T: () => Stat },
            { no: 3, name: "rating", kind: "message", T: () => Rating }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.BadgeInfo badge */ 1:
                    message.badge = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badge);
                    break;
                case /* bilibili.app.viewunite.common.Stat stat */ 2:
                    message.stat = Stat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                case /* bilibili.app.viewunite.common.Rating rating */ 3:
                    message.rating = Rating.internalBinaryRead(reader, reader.uint32(), options, message.rating);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.BadgeInfo badge = 1; */
        if (message.badge)
            BadgeInfo.internalBinaryWrite(message.badge, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Stat stat = 2; */
        if (message.stat)
            Stat.internalBinaryWrite(message.stat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Rating rating = 3; */
        if (message.rating)
            Rating.internalBinaryWrite(message.rating, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateBangumiUgcCard
 */
export const RelateBangumiUgcCard = new RelateBangumiUgcCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateCard", [
            { no: 1, name: "relate_card_type", kind: "enum", T: () => ["bilibili.app.viewunite.common.RelateCardType", RelateCardType] },
            { no: 2, name: "av", kind: "message", oneof: "card", T: () => RelateAVCard },
            { no: 3, name: "bangumi", kind: "message", oneof: "card", T: () => RelateBangumiCard },
            { no: 4, name: "resource", kind: "message", oneof: "card", T: () => RelateBangumiResourceCard },
            { no: 5, name: "game", kind: "message", oneof: "card", T: () => RelateGameCard },
            { no: 6, name: "cm", kind: "message", oneof: "card", T: () => RelateCMCard },
            { no: 7, name: "live", kind: "message", oneof: "card", T: () => RelateLiveCard },
            { no: 8, name: "bangumi_av", kind: "message", oneof: "card", T: () => RelateBangumiAvCard },
            { no: 9, name: "ai_card", kind: "message", oneof: "card", T: () => RelatedAICard },
            { no: 13, name: "bangumi_ugc", kind: "message", oneof: "card", T: () => RelateBangumiUgcCard },
            { no: 14, name: "special", kind: "message", oneof: "card", T: () => RelateSpecial },
            { no: 10, name: "three_point", kind: "message", T: () => RelateThreePoint },
            { no: 11, name: "cm_stock", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.relateCardType = 0;
        message.card = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.RelateCardType relate_card_type */ 1:
                    message.relateCardType = reader.int32();
                    break;
                case /* bilibili.app.viewunite.common.RelateAVCard av */ 2:
                    message.card = {
                        oneofKind: "av",
                        av: RelateAVCard.internalBinaryRead(reader, reader.uint32(), options, message.card.av)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelateBangumiCard bangumi */ 3:
                    message.card = {
                        oneofKind: "bangumi",
                        bangumi: RelateBangumiCard.internalBinaryRead(reader, reader.uint32(), options, message.card.bangumi)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelateBangumiResourceCard resource */ 4:
                    message.card = {
                        oneofKind: "resource",
                        resource: RelateBangumiResourceCard.internalBinaryRead(reader, reader.uint32(), options, message.card.resource)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelateGameCard game */ 5:
                    message.card = {
                        oneofKind: "game",
                        game: RelateGameCard.internalBinaryRead(reader, reader.uint32(), options, message.card.game)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelateCMCard cm */ 6:
                    message.card = {
                        oneofKind: "cm",
                        cm: RelateCMCard.internalBinaryRead(reader, reader.uint32(), options, message.card.cm)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelateLiveCard live */ 7:
                    message.card = {
                        oneofKind: "live",
                        live: RelateLiveCard.internalBinaryRead(reader, reader.uint32(), options, message.card.live)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelateBangumiAvCard bangumi_av */ 8:
                    message.card = {
                        oneofKind: "bangumiAv",
                        bangumiAv: RelateBangumiAvCard.internalBinaryRead(reader, reader.uint32(), options, message.card.bangumiAv)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelatedAICard ai_card */ 9:
                    message.card = {
                        oneofKind: "aiCard",
                        aiCard: RelatedAICard.internalBinaryRead(reader, reader.uint32(), options, message.card.aiCard)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelateBangumiUgcCard bangumi_ugc */ 13:
                    message.card = {
                        oneofKind: "bangumiUgc",
                        bangumiUgc: RelateBangumiUgcCard.internalBinaryRead(reader, reader.uint32(), options, message.card.bangumiUgc)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelateSpecial special */ 14:
                    message.card = {
                        oneofKind: "special",
                        special: RelateSpecial.internalBinaryRead(reader, reader.uint32(), options, message.card.special)
                    };
                    break;
                case /* bilibili.app.viewunite.common.RelateThreePoint three_point */ 10:
                    message.threePoint = RelateThreePoint.internalBinaryRead(reader, reader.uint32(), options, message.threePoint);
                    break;
                case /* google.protobuf.Any cm_stock */ 11:
                    message.cmStock = Any.internalBinaryRead(reader, reader.uint32(), options, message.cmStock);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.RelateCardType relate_card_type = 1; */
        if (message.relateCardType !== 0)
            writer.tag(1, WireType.Varint).int32(message.relateCardType);
        /* bilibili.app.viewunite.common.RelateAVCard av = 2; */
        if (message.card.oneofKind === "av")
            RelateAVCard.internalBinaryWrite(message.card.av, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateBangumiCard bangumi = 3; */
        if (message.card.oneofKind === "bangumi")
            RelateBangumiCard.internalBinaryWrite(message.card.bangumi, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateBangumiResourceCard resource = 4; */
        if (message.card.oneofKind === "resource")
            RelateBangumiResourceCard.internalBinaryWrite(message.card.resource, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateGameCard game = 5; */
        if (message.card.oneofKind === "game")
            RelateGameCard.internalBinaryWrite(message.card.game, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateCMCard cm = 6; */
        if (message.card.oneofKind === "cm")
            RelateCMCard.internalBinaryWrite(message.card.cm, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateLiveCard live = 7; */
        if (message.card.oneofKind === "live")
            RelateLiveCard.internalBinaryWrite(message.card.live, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateBangumiAvCard bangumi_av = 8; */
        if (message.card.oneofKind === "bangumiAv")
            RelateBangumiAvCard.internalBinaryWrite(message.card.bangumiAv, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelatedAICard ai_card = 9; */
        if (message.card.oneofKind === "aiCard")
            RelatedAICard.internalBinaryWrite(message.card.aiCard, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateBangumiUgcCard bangumi_ugc = 13; */
        if (message.card.oneofKind === "bangumiUgc")
            RelateBangumiUgcCard.internalBinaryWrite(message.card.bangumiUgc, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateSpecial special = 14; */
        if (message.card.oneofKind === "special")
            RelateSpecial.internalBinaryWrite(message.card.special, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateThreePoint three_point = 10; */
        if (message.threePoint)
            RelateThreePoint.internalBinaryWrite(message.threePoint, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any cm_stock = 11; */
        if (message.cmStock)
            Any.internalBinaryWrite(message.cmStock, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateCard
 */
export const RelateCard = new RelateCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateCMCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateCMCard", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "source_content", kind: "message", T: () => Any },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "stat", kind: "message", T: () => Stat }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.aid = 0;
        message.duration = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toNumber();
                    break;
                case /* google.protobuf.Any source_content */ 2:
                    message.sourceContent = Any.internalBinaryRead(reader, reader.uint32(), options, message.sourceContent);
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* bilibili.app.viewunite.common.Stat stat */ 4:
                    message.stat = Stat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* google.protobuf.Any source_content = 2; */
        if (message.sourceContent)
            Any.internalBinaryWrite(message.sourceContent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* bilibili.app.viewunite.common.Stat stat = 4; */
        if (message.stat)
            Stat.internalBinaryWrite(message.stat, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateCMCard
 */
export const RelateCMCard = new RelateCMCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateConfig$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateConfig", [
            { no: 1, name: "valid_show_m", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "valid_show_n", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "pagination", kind: "message", T: () => Pagination },
            { no: 4, name: "can_load_more", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validShowM = 0;
        message.validShowN = 0;
        message.canLoadMore = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 valid_show_m */ 1:
                    message.validShowM = reader.int64().toNumber();
                    break;
                case /* int64 valid_show_n */ 2:
                    message.validShowN = reader.int64().toNumber();
                    break;
                case /* bilibili.pagination.Pagination pagination */ 3:
                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* bool can_load_more */ 4:
                    message.canLoadMore = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 valid_show_m = 1; */
        if (message.validShowM !== 0)
            writer.tag(1, WireType.Varint).int64(message.validShowM);
        /* int64 valid_show_n = 2; */
        if (message.validShowN !== 0)
            writer.tag(2, WireType.Varint).int64(message.validShowN);
        /* bilibili.pagination.Pagination pagination = 3; */
        if (message.pagination)
            Pagination.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool can_load_more = 4; */
        if (message.canLoadMore !== false)
            writer.tag(4, WireType.Varint).bool(message.canLoadMore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateConfig
 */
export const RelateConfig = new RelateConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelatedAICard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelatedAICard", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "up_info", kind: "message", T: () => Staff },
            { no: 4, name: "stat", kind: "message", T: () => Stat },
            { no: 5, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 6, name: "goto_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.aid = 0;
        message.duration = 0;
        message.report = {};
        message.gotoType = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toNumber();
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* bilibili.app.viewunite.common.Staff up_info */ 3:
                    message.upInfo = Staff.internalBinaryRead(reader, reader.uint32(), options, message.upInfo);
                    break;
                case /* bilibili.app.viewunite.common.Stat stat */ 4:
                    message.stat = Stat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                case /* map<string, string> report */ 5:
                    this.binaryReadMap5(message.report, reader, options);
                    break;
                case /* string goto_type */ 6:
                    message.gotoType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap5(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.RelatedAICard.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* int64 duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* bilibili.app.viewunite.common.Staff up_info = 3; */
        if (message.upInfo)
            Staff.internalBinaryWrite(message.upInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Stat stat = 4; */
        if (message.stat)
            Stat.internalBinaryWrite(message.stat, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> report = 5; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        /* string goto_type = 6; */
        if (message.gotoType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.gotoType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelatedAICard
 */
export const RelatedAICard = new RelatedAICard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateDislike$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateDislike", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "closed_sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "paste_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "closed_paste_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "dislike_reason", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DislikeReasons },
            { no: 7, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "closed_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.subTitle = "";
        message.closedSubTitle = "";
        message.pasteText = "";
        message.closedPasteText = "";
        message.dislikeReason = [];
        message.toast = "";
        message.closedToast = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 2:
                    message.subTitle = reader.string();
                    break;
                case /* string closed_sub_title */ 3:
                    message.closedSubTitle = reader.string();
                    break;
                case /* string paste_text */ 4:
                    message.pasteText = reader.string();
                    break;
                case /* string closed_paste_text */ 5:
                    message.closedPasteText = reader.string();
                    break;
                case /* repeated bilibili.app.viewunite.common.DislikeReasons dislike_reason */ 6:
                    message.dislikeReason.push(DislikeReasons.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string toast */ 7:
                    message.toast = reader.string();
                    break;
                case /* string closed_toast */ 8:
                    message.closedToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 2; */
        if (message.subTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subTitle);
        /* string closed_sub_title = 3; */
        if (message.closedSubTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.closedSubTitle);
        /* string paste_text = 4; */
        if (message.pasteText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.pasteText);
        /* string closed_paste_text = 5; */
        if (message.closedPasteText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.closedPasteText);
        /* repeated bilibili.app.viewunite.common.DislikeReasons dislike_reason = 6; */
        for (let i = 0; i < message.dislikeReason.length; i++)
            DislikeReasons.internalBinaryWrite(message.dislikeReason[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string toast = 7; */
        if (message.toast !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.toast);
        /* string closed_toast = 8; */
        if (message.closedToast !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.closedToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateDislike
 */
export const RelateDislike = new RelateDislike$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateGameCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateGameCard", [
            { no: 1, name: "reserve_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "reserve_status_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reserve", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rating", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "tag_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "rank_info", kind: "message", T: () => RankInfo },
            { no: 7, name: "pack_info", kind: "message", T: () => Button },
            { no: 8, name: "notice", kind: "message", T: () => Button },
            { no: 9, name: "power_icon_style", kind: "message", T: () => PowerIconStyle },
            { no: 10, name: "game_rcmd_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "wiki_info", kind: "message", T: () => WikiInfo },
            { no: 12, name: "badge", kind: "message", T: () => BadgeInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.reserveStatus = 0;
        message.reserveStatusText = "";
        message.reserve = "";
        message.rating = 0;
        message.tagName = "";
        message.gameRcmdReason = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 reserve_status */ 1:
                    message.reserveStatus = reader.int64().toNumber();
                    break;
                case /* string reserve_status_text */ 2:
                    message.reserveStatusText = reader.string();
                    break;
                case /* string reserve */ 3:
                    message.reserve = reader.string();
                    break;
                case /* float rating */ 4:
                    message.rating = reader.float();
                    break;
                case /* string tag_name */ 5:
                    message.tagName = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.RankInfo rank_info */ 6:
                    message.rankInfo = RankInfo.internalBinaryRead(reader, reader.uint32(), options, message.rankInfo);
                    break;
                case /* bilibili.app.viewunite.common.Button pack_info */ 7:
                    message.packInfo = Button.internalBinaryRead(reader, reader.uint32(), options, message.packInfo);
                    break;
                case /* bilibili.app.viewunite.common.Button notice */ 8:
                    message.notice = Button.internalBinaryRead(reader, reader.uint32(), options, message.notice);
                    break;
                case /* bilibili.app.viewunite.common.PowerIconStyle power_icon_style */ 9:
                    message.powerIconStyle = PowerIconStyle.internalBinaryRead(reader, reader.uint32(), options, message.powerIconStyle);
                    break;
                case /* string game_rcmd_reason */ 10:
                    message.gameRcmdReason = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.WikiInfo wiki_info */ 11:
                    message.wikiInfo = WikiInfo.internalBinaryRead(reader, reader.uint32(), options, message.wikiInfo);
                    break;
                case /* bilibili.app.viewunite.common.BadgeInfo badge */ 12:
                    message.badge = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badge);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 reserve_status = 1; */
        if (message.reserveStatus !== 0)
            writer.tag(1, WireType.Varint).int64(message.reserveStatus);
        /* string reserve_status_text = 2; */
        if (message.reserveStatusText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reserveStatusText);
        /* string reserve = 3; */
        if (message.reserve !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reserve);
        /* float rating = 4; */
        if (message.rating !== 0)
            writer.tag(4, WireType.Bit32).float(message.rating);
        /* string tag_name = 5; */
        if (message.tagName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.tagName);
        /* bilibili.app.viewunite.common.RankInfo rank_info = 6; */
        if (message.rankInfo)
            RankInfo.internalBinaryWrite(message.rankInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Button pack_info = 7; */
        if (message.packInfo)
            Button.internalBinaryWrite(message.packInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Button notice = 8; */
        if (message.notice)
            Button.internalBinaryWrite(message.notice, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.PowerIconStyle power_icon_style = 9; */
        if (message.powerIconStyle)
            PowerIconStyle.internalBinaryWrite(message.powerIconStyle, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string game_rcmd_reason = 10; */
        if (message.gameRcmdReason !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.gameRcmdReason);
        /* bilibili.app.viewunite.common.WikiInfo wiki_info = 11; */
        if (message.wikiInfo)
            WikiInfo.internalBinaryWrite(message.wikiInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.BadgeInfo badge = 12; */
        if (message.badge)
            BadgeInfo.internalBinaryWrite(message.badge, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateGameCard
 */
export const RelateGameCard = new RelateGameCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateItem$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateItem", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "use_default_browser", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.url = "";
        message.cover = "";
        message.useDefaultBrowser = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* string cover */ 2:
                    message.cover = reader.string();
                    break;
                case /* bool use_default_browser */ 3:
                    message.useDefaultBrowser = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* string cover = 2; */
        if (message.cover !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cover);
        /* bool use_default_browser = 3; */
        if (message.useDefaultBrowser !== false)
            writer.tag(3, WireType.Varint).bool(message.useDefaultBrowser);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateItem
 */
export const RelateItem = new RelateItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateLiveCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateLiveCard", [
            { no: 1, name: "icon_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "area_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "watched_show", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "live_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.iconType = 0;
        message.areaName = "";
        message.watchedShow = 0;
        message.liveStatus = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 icon_type */ 1:
                    message.iconType = reader.int64().toNumber();
                    break;
                case /* string area_name */ 2:
                    message.areaName = reader.string();
                    break;
                case /* int64 watched_show */ 3:
                    message.watchedShow = reader.int64().toNumber();
                    break;
                case /* int64 live_status */ 4:
                    message.liveStatus = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 icon_type = 1; */
        if (message.iconType !== 0)
            writer.tag(1, WireType.Varint).int64(message.iconType);
        /* string area_name = 2; */
        if (message.areaName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.areaName);
        /* int64 watched_show = 3; */
        if (message.watchedShow !== 0)
            writer.tag(3, WireType.Varint).int64(message.watchedShow);
        /* int64 live_status = 4; */
        if (message.liveStatus !== 0)
            writer.tag(4, WireType.Varint).int64(message.liveStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateLiveCard
 */
export const RelateLiveCard = new RelateLiveCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Relates$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Relates", [
            { no: 1, name: "cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelateCard },
            { no: 2, name: "config", kind: "message", T: () => RelateConfig }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.cards = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.viewunite.common.RelateCard cards */ 1:
                    message.cards.push(RelateCard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.viewunite.common.RelateConfig config */ 2:
                    message.config = RelateConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.viewunite.common.RelateCard cards = 1; */
        for (let i = 0; i < message.cards.length; i++)
            RelateCard.internalBinaryWrite(message.cards[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateConfig config = 2; */
        if (message.config)
            RelateConfig.internalBinaryWrite(message.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Relates
 */
export const Relates = new Relates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateSpecial$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateSpecial", [
            { no: 1, name: "badge", kind: "message", T: () => BadgeInfo },
            { no: 2, name: "rcmd_reason", kind: "message", T: () => BadgeInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.BadgeInfo badge */ 1:
                    message.badge = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badge);
                    break;
                case /* bilibili.app.viewunite.common.BadgeInfo rcmd_reason */ 2:
                    message.rcmdReason = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.rcmdReason);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.BadgeInfo badge = 1; */
        if (message.badge)
            BadgeInfo.internalBinaryWrite(message.badge, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.BadgeInfo rcmd_reason = 2; */
        if (message.rcmdReason)
            BadgeInfo.internalBinaryWrite(message.rcmdReason, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateSpecial
 */
export const RelateSpecial = new RelateSpecial$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateThreePoint$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.RelateThreePoint", [
            { no: 1, name: "dislike", kind: "message", T: () => RelateDislike },
            { no: 2, name: "feedback", kind: "message", T: () => RelateDislike },
            { no: 3, name: "watch_later", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "dislike_report_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.watchLater = false;
        message.dislikeReportData = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.RelateDislike dislike */ 1:
                    message.dislike = RelateDislike.internalBinaryRead(reader, reader.uint32(), options, message.dislike);
                    break;
                case /* bilibili.app.viewunite.common.RelateDislike feedback */ 2:
                    message.feedback = RelateDislike.internalBinaryRead(reader, reader.uint32(), options, message.feedback);
                    break;
                case /* bool watch_later */ 3:
                    message.watchLater = reader.bool();
                    break;
                case /* string dislike_report_data */ 4:
                    message.dislikeReportData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.RelateDislike dislike = 1; */
        if (message.dislike)
            RelateDislike.internalBinaryWrite(message.dislike, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.RelateDislike feedback = 2; */
        if (message.feedback)
            RelateDislike.internalBinaryWrite(message.feedback, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool watch_later = 3; */
        if (message.watchLater !== false)
            writer.tag(3, WireType.Varint).bool(message.watchLater);
        /* string dislike_report_data = 4; */
        if (message.dislikeReportData !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.dislikeReportData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.RelateThreePoint
 */
export const RelateThreePoint = new RelateThreePoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReserveButton$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.ReserveButton", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "selected_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "order_type", kind: "enum", T: () => ["bilibili.app.viewunite.common.ReserveBizType", ReserveBizType] },
            { no: 8, name: "reserve", kind: "message", oneof: "orderParam", T: () => BizReserveActivityParam },
            { no: 9, name: "fav", kind: "message", oneof: "orderParam", T: () => BizFavParam }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.status = false;
        message.text = "";
        message.selectedText = "";
        message.orderType = 0;
        message.orderParam = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string selected_text */ 4:
                    message.selectedText = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.ReserveBizType order_type */ 7:
                    message.orderType = reader.int32();
                    break;
                case /* bilibili.app.viewunite.common.BizReserveActivityParam reserve */ 8:
                    message.orderParam = {
                        oneofKind: "reserve",
                        reserve: BizReserveActivityParam.internalBinaryRead(reader, reader.uint32(), options, message.orderParam.reserve)
                    };
                    break;
                case /* bilibili.app.viewunite.common.BizFavParam fav */ 9:
                    message.orderParam = {
                        oneofKind: "fav",
                        fav: BizFavParam.internalBinaryRead(reader, reader.uint32(), options, message.orderParam.fav)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string selected_text = 4; */
        if (message.selectedText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.selectedText);
        /* bilibili.app.viewunite.common.ReserveBizType order_type = 7; */
        if (message.orderType !== 0)
            writer.tag(7, WireType.Varint).int32(message.orderType);
        /* bilibili.app.viewunite.common.BizReserveActivityParam reserve = 8; */
        if (message.orderParam.oneofKind === "reserve")
            BizReserveActivityParam.internalBinaryWrite(message.orderParam.reserve, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.BizFavParam fav = 9; */
        if (message.orderParam.oneofKind === "fav")
            BizFavParam.internalBinaryWrite(message.orderParam.fav, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.ReserveButton
 */
export const ReserveButton = new ReserveButton$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rights$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Rights", [
            { no: 1, name: "allow_download", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "allow_review", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "can_watch", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "resource", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "allow_dm", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "allow_demand", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "area_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.allowDownload = 0;
        message.allowReview = 0;
        message.canWatch = 0;
        message.resource = "";
        message.allowDm = 0;
        message.allowDemand = 0;
        message.areaLimit = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 allow_download */ 1:
                    message.allowDownload = reader.int32();
                    break;
                case /* int32 allow_review */ 2:
                    message.allowReview = reader.int32();
                    break;
                case /* int32 can_watch */ 3:
                    message.canWatch = reader.int32();
                    break;
                case /* string resource */ 4:
                    message.resource = reader.string();
                    break;
                case /* int32 allow_dm */ 5:
                    message.allowDm = reader.int32();
                    break;
                case /* int32 allow_demand */ 6:
                    message.allowDemand = reader.int32();
                    break;
                case /* int32 area_limit */ 7:
                    message.areaLimit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 allow_download = 1; */
        if (message.allowDownload !== 0)
            writer.tag(1, WireType.Varint).int32(message.allowDownload);
        /* int32 allow_review = 2; */
        if (message.allowReview !== 0)
            writer.tag(2, WireType.Varint).int32(message.allowReview);
        /* int32 can_watch = 3; */
        if (message.canWatch !== 0)
            writer.tag(3, WireType.Varint).int32(message.canWatch);
        /* string resource = 4; */
        if (message.resource !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.resource);
        /* int32 allow_dm = 5; */
        if (message.allowDm !== 0)
            writer.tag(5, WireType.Varint).int32(message.allowDm);
        /* int32 allow_demand = 6; */
        if (message.allowDemand !== 0)
            writer.tag(6, WireType.Varint).int32(message.allowDemand);
        /* int32 area_limit = 7; */
        if (message.areaLimit !== 0)
            writer.tag(7, WireType.Varint).int32(message.areaLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Rights
 */
export const Rights = new Rights$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonHead$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.SeasonHead", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "intro", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "vt", kind: "message", T: () => StatInfo },
            { no: 4, name: "danmaku", kind: "message", T: () => StatInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.intro = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string intro */ 2:
                    message.intro = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.StatInfo vt */ 3:
                    message.vt = StatInfo.internalBinaryRead(reader, reader.uint32(), options, message.vt);
                    break;
                case /* bilibili.app.viewunite.common.StatInfo danmaku */ 4:
                    message.danmaku = StatInfo.internalBinaryRead(reader, reader.uint32(), options, message.danmaku);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string intro = 2; */
        if (message.intro !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.intro);
        /* bilibili.app.viewunite.common.StatInfo vt = 3; */
        if (message.vt)
            StatInfo.internalBinaryWrite(message.vt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.StatInfo danmaku = 4; */
        if (message.danmaku)
            StatInfo.internalBinaryWrite(message.danmaku, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.SeasonHead
 */
export const SeasonHead = new SeasonHead$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonShow$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.SeasonShow", [
            { no: 1, name: "button_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "join_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rule_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "checkin_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "checkin_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.buttonText = "";
        message.joinText = "";
        message.ruleText = "";
        message.checkinText = "";
        message.checkinPrompt = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string button_text */ 1:
                    message.buttonText = reader.string();
                    break;
                case /* string join_text */ 2:
                    message.joinText = reader.string();
                    break;
                case /* string rule_text */ 3:
                    message.ruleText = reader.string();
                    break;
                case /* string checkin_text */ 4:
                    message.checkinText = reader.string();
                    break;
                case /* string checkin_prompt */ 5:
                    message.checkinPrompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string button_text = 1; */
        if (message.buttonText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.buttonText);
        /* string join_text = 2; */
        if (message.joinText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.joinText);
        /* string rule_text = 3; */
        if (message.ruleText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ruleText);
        /* string checkin_text = 4; */
        if (message.checkinText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.checkinText);
        /* string checkin_prompt = 5; */
        if (message.checkinPrompt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.checkinPrompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.SeasonShow
 */
export const SeasonShow = new SeasonShow$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SectionData$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.SectionData", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "section_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "can_ord_desc", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "more", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "episode_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "episodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewEpisode },
            { no: 8, name: "split_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "module_style", kind: "message", T: () => Style },
            { no: 10, name: "more_bottom_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "seasons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SerialSeason },
            { no: 12, name: "more_left", kind: "message", T: () => Button },
            { no: 13, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.sectionId = 0;
        message.title = "";
        message.canOrdDesc = 0;
        message.more = "";
        message.episodeIds = [];
        message.episodes = [];
        message.splitText = "";
        message.moreBottomDesc = "";
        message.seasons = [];
        message.type = 0;
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 section_id */ 2:
                    message.sectionId = reader.int32();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* int32 can_ord_desc */ 4:
                    message.canOrdDesc = reader.int32();
                    break;
                case /* string more */ 5:
                    message.more = reader.string();
                    break;
                case /* repeated int32 episode_ids */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.episodeIds.push(reader.int32());
                    else
                        message.episodeIds.push(reader.int32());
                    break;
                case /* repeated bilibili.app.viewunite.common.ViewEpisode episodes */ 7:
                    message.episodes.push(ViewEpisode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string split_text */ 8:
                    message.splitText = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Style module_style */ 9:
                    message.moduleStyle = Style.internalBinaryRead(reader, reader.uint32(), options, message.moduleStyle);
                    break;
                case /* string more_bottom_desc */ 10:
                    message.moreBottomDesc = reader.string();
                    break;
                case /* repeated bilibili.app.viewunite.common.SerialSeason seasons */ 11:
                    message.seasons.push(SerialSeason.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.viewunite.common.Button more_left */ 12:
                    message.moreLeft = Button.internalBinaryRead(reader, reader.uint32(), options, message.moreLeft);
                    break;
                case /* int32 type */ 13:
                    message.type = reader.int32();
                    break;
                case /* map<string, string> report */ 14:
                    this.binaryReadMap14(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap14(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.SectionData.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 section_id = 2; */
        if (message.sectionId !== 0)
            writer.tag(2, WireType.Varint).int32(message.sectionId);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* int32 can_ord_desc = 4; */
        if (message.canOrdDesc !== 0)
            writer.tag(4, WireType.Varint).int32(message.canOrdDesc);
        /* string more = 5; */
        if (message.more !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.more);
        /* repeated int32 episode_ids = 6; */
        if (message.episodeIds.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.episodeIds.length; i++)
                writer.int32(message.episodeIds[i]);
            writer.join();
        }
        /* repeated bilibili.app.viewunite.common.ViewEpisode episodes = 7; */
        for (let i = 0; i < message.episodes.length; i++)
            ViewEpisode.internalBinaryWrite(message.episodes[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string split_text = 8; */
        if (message.splitText !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.splitText);
        /* bilibili.app.viewunite.common.Style module_style = 9; */
        if (message.moduleStyle)
            Style.internalBinaryWrite(message.moduleStyle, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string more_bottom_desc = 10; */
        if (message.moreBottomDesc !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.moreBottomDesc);
        /* repeated bilibili.app.viewunite.common.SerialSeason seasons = 11; */
        for (let i = 0; i < message.seasons.length; i++)
            SerialSeason.internalBinaryWrite(message.seasons[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Button more_left = 12; */
        if (message.moreLeft)
            Button.internalBinaryWrite(message.moreLeft, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* int32 type = 13; */
        if (message.type !== 0)
            writer.tag(13, WireType.Varint).int32(message.type);
        /* map<string, string> report = 14; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.SectionData
 */
export const SectionData = new SectionData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SerialSeason$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.SerialSeason", [
            { no: 1, name: "season_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "season_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_new", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "badge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "badge_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "badge_info", kind: "message", T: () => BadgeInfo },
            { no: 9, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "resource", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "new_ep", kind: "message", T: () => NewEp }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.seasonId = 0;
        message.title = "";
        message.seasonTitle = "";
        message.isNew = 0;
        message.cover = "";
        message.badge = "";
        message.badgeType = 0;
        message.link = "";
        message.resource = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 season_id */ 1:
                    message.seasonId = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string season_title */ 3:
                    message.seasonTitle = reader.string();
                    break;
                case /* int32 is_new */ 4:
                    message.isNew = reader.int32();
                    break;
                case /* string cover */ 5:
                    message.cover = reader.string();
                    break;
                case /* string badge */ 6:
                    message.badge = reader.string();
                    break;
                case /* int32 badge_type */ 7:
                    message.badgeType = reader.int32();
                    break;
                case /* bilibili.app.viewunite.common.BadgeInfo badge_info */ 8:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                case /* string link */ 9:
                    message.link = reader.string();
                    break;
                case /* string resource */ 10:
                    message.resource = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.NewEp new_ep */ 11:
                    message.newEp = NewEp.internalBinaryRead(reader, reader.uint32(), options, message.newEp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 season_id = 1; */
        if (message.seasonId !== 0)
            writer.tag(1, WireType.Varint).int32(message.seasonId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string season_title = 3; */
        if (message.seasonTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.seasonTitle);
        /* int32 is_new = 4; */
        if (message.isNew !== 0)
            writer.tag(4, WireType.Varint).int32(message.isNew);
        /* string cover = 5; */
        if (message.cover !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cover);
        /* string badge = 6; */
        if (message.badge !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.badge);
        /* int32 badge_type = 7; */
        if (message.badgeType !== 0)
            writer.tag(7, WireType.Varint).int32(message.badgeType);
        /* bilibili.app.viewunite.common.BadgeInfo badge_info = 8; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string link = 9; */
        if (message.link !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.link);
        /* string resource = 10; */
        if (message.resource !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.resource);
        /* bilibili.app.viewunite.common.NewEp new_ep = 11; */
        if (message.newEp)
            NewEp.internalBinaryWrite(message.newEp, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.SerialSeason
 */
export const SerialSeason = new SerialSeason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SkipRange$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.SkipRange", [
            { no: 1, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "end", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.start = 0;
        message.end = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 start */ 1:
                    message.start = reader.int32();
                    break;
                case /* int32 end */ 2:
                    message.end = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 start = 1; */
        if (message.start !== 0)
            writer.tag(1, WireType.Varint).int32(message.start);
        /* int32 end = 2; */
        if (message.end !== 0)
            writer.tag(2, WireType.Varint).int32(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.SkipRange
 */
export const SkipRange = new SkipRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sponsor$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Sponsor", [
            { no: 1, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "week", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "rank_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SponsorRank },
            { no: 4, name: "mine", kind: "message", T: () => Mine },
            { no: 5, name: "point_activity", kind: "message", T: () => PointActivity },
            { no: 6, name: "pendants", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Pendant },
            { no: 7, name: "threshold", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Threshold }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.total = 0;
        message.week = 0;
        message.rankList = [];
        message.pendants = [];
        message.threshold = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total */ 1:
                    message.total = reader.int64().toNumber();
                    break;
                case /* int64 week */ 2:
                    message.week = reader.int64().toNumber();
                    break;
                case /* repeated bilibili.app.viewunite.common.SponsorRank rank_list */ 3:
                    message.rankList.push(SponsorRank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.viewunite.common.Mine mine */ 4:
                    message.mine = Mine.internalBinaryRead(reader, reader.uint32(), options, message.mine);
                    break;
                case /* bilibili.app.viewunite.common.PointActivity point_activity */ 5:
                    message.pointActivity = PointActivity.internalBinaryRead(reader, reader.uint32(), options, message.pointActivity);
                    break;
                case /* repeated bilibili.app.viewunite.common.Pendant pendants */ 6:
                    message.pendants.push(Pendant.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.viewunite.common.Threshold threshold */ 7:
                    message.threshold.push(Threshold.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 total = 1; */
        if (message.total !== 0)
            writer.tag(1, WireType.Varint).int64(message.total);
        /* int64 week = 2; */
        if (message.week !== 0)
            writer.tag(2, WireType.Varint).int64(message.week);
        /* repeated bilibili.app.viewunite.common.SponsorRank rank_list = 3; */
        for (let i = 0; i < message.rankList.length; i++)
            SponsorRank.internalBinaryWrite(message.rankList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Mine mine = 4; */
        if (message.mine)
            Mine.internalBinaryWrite(message.mine, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.PointActivity point_activity = 5; */
        if (message.pointActivity)
            PointActivity.internalBinaryWrite(message.pointActivity, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.viewunite.common.Pendant pendants = 6; */
        for (let i = 0; i < message.pendants.length; i++)
            Pendant.internalBinaryWrite(message.pendants[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.viewunite.common.Threshold threshold = 7; */
        for (let i = 0; i < message.threshold.length; i++)
            Threshold.internalBinaryWrite(message.threshold[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Sponsor
 */
export const Sponsor = new Sponsor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SponsorRank$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.SponsorRank", [
            { no: 1, name: "uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "uname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "face", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "vip", kind: "message", T: () => Vip }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.uid = 0;
        message.msg = "";
        message.uname = "";
        message.face = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 uid */ 1:
                    message.uid = reader.int64().toNumber();
                    break;
                case /* string msg */ 2:
                    message.msg = reader.string();
                    break;
                case /* string uname */ 3:
                    message.uname = reader.string();
                    break;
                case /* string face */ 4:
                    message.face = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Vip vip */ 5:
                    message.vip = Vip.internalBinaryRead(reader, reader.uint32(), options, message.vip);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 uid = 1; */
        if (message.uid !== 0)
            writer.tag(1, WireType.Varint).int64(message.uid);
        /* string msg = 2; */
        if (message.msg !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.msg);
        /* string uname = 3; */
        if (message.uname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uname);
        /* string face = 4; */
        if (message.face !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.face);
        /* bilibili.app.viewunite.common.Vip vip = 5; */
        if (message.vip)
            Vip.internalBinaryWrite(message.vip, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.SponsorRank
 */
export const SponsorRank = new SponsorRank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Staff$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Staff", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "attention", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "face", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "official", kind: "message", T: () => OfficialVerify },
            { no: 7, name: "vip", kind: "message", T: () => Vip },
            { no: 8, name: "label_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "fans", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mid = 0;
        message.attention = 0;
        message.title = "";
        message.name = "";
        message.face = "";
        message.labelStyle = 0;
        message.fans = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* int32 attention */ 2:
                    message.attention = reader.int32();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* string face */ 5:
                    message.face = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.OfficialVerify official */ 6:
                    message.official = OfficialVerify.internalBinaryRead(reader, reader.uint32(), options, message.official);
                    break;
                case /* bilibili.app.viewunite.common.Vip vip */ 7:
                    message.vip = Vip.internalBinaryRead(reader, reader.uint32(), options, message.vip);
                    break;
                case /* int32 label_style */ 8:
                    message.labelStyle = reader.int32();
                    break;
                case /* string fans */ 9:
                    message.fans = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* int32 attention = 2; */
        if (message.attention !== 0)
            writer.tag(2, WireType.Varint).int32(message.attention);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* string face = 5; */
        if (message.face !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.face);
        /* bilibili.app.viewunite.common.OfficialVerify official = 6; */
        if (message.official)
            OfficialVerify.internalBinaryWrite(message.official, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Vip vip = 7; */
        if (message.vip)
            Vip.internalBinaryWrite(message.vip, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int32 label_style = 8; */
        if (message.labelStyle !== 0)
            writer.tag(8, WireType.Varint).int32(message.labelStyle);
        /* string fans = 9; */
        if (message.fans !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.fans);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Staff
 */
export const Staff = new Staff$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Staffs$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Staffs", [
            { no: 1, name: "staff", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Staff },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.staff = [];
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.viewunite.common.Staff staff */ 1:
                    message.staff.push(Staff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.viewunite.common.Staff staff = 1; */
        for (let i = 0; i < message.staff.length; i++)
            Staff.internalBinaryWrite(message.staff[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Staffs
 */
export const Staffs = new Staffs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Stat$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Stat", [
            { no: 1, name: "vt", kind: "message", T: () => StatInfo },
            { no: 2, name: "danmaku", kind: "message", T: () => StatInfo },
            { no: 3, name: "reply", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "fav", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "coin", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "share", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "like", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "follow", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.reply = 0;
        message.fav = 0;
        message.coin = 0;
        message.share = 0;
        message.like = 0;
        message.follow = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.common.StatInfo vt */ 1:
                    message.vt = StatInfo.internalBinaryRead(reader, reader.uint32(), options, message.vt);
                    break;
                case /* bilibili.app.viewunite.common.StatInfo danmaku */ 2:
                    message.danmaku = StatInfo.internalBinaryRead(reader, reader.uint32(), options, message.danmaku);
                    break;
                case /* int64 reply */ 3:
                    message.reply = reader.int64().toNumber();
                    break;
                case /* int64 fav */ 4:
                    message.fav = reader.int64().toNumber();
                    break;
                case /* int64 coin */ 5:
                    message.coin = reader.int64().toNumber();
                    break;
                case /* int64 share */ 6:
                    message.share = reader.int64().toNumber();
                    break;
                case /* int64 like */ 7:
                    message.like = reader.int64().toNumber();
                    break;
                case /* int64 follow */ 8:
                    message.follow = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.common.StatInfo vt = 1; */
        if (message.vt)
            StatInfo.internalBinaryWrite(message.vt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.StatInfo danmaku = 2; */
        if (message.danmaku)
            StatInfo.internalBinaryWrite(message.danmaku, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 reply = 3; */
        if (message.reply !== 0)
            writer.tag(3, WireType.Varint).int64(message.reply);
        /* int64 fav = 4; */
        if (message.fav !== 0)
            writer.tag(4, WireType.Varint).int64(message.fav);
        /* int64 coin = 5; */
        if (message.coin !== 0)
            writer.tag(5, WireType.Varint).int64(message.coin);
        /* int64 share = 6; */
        if (message.share !== 0)
            writer.tag(6, WireType.Varint).int64(message.share);
        /* int64 like = 7; */
        if (message.like !== 0)
            writer.tag(7, WireType.Varint).int64(message.like);
        /* int64 follow = 8; */
        if (message.follow !== 0)
            writer.tag(8, WireType.Varint).int64(message.follow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Stat
 */
export const Stat = new Stat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.StatInfo", [
            { no: 1, name: "value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pure_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = 0;
        message.text = "";
        message.pureText = "";
        message.icon = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 value */ 1:
                    message.value = reader.int64().toNumber();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string pure_text */ 3:
                    message.pureText = reader.string();
                    break;
                case /* string icon */ 4:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Varint).int64(message.value);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string pure_text = 3; */
        if (message.pureText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pureText);
        /* string icon = 4; */
        if (message.icon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.StatInfo
 */
export const StatInfo = new StatInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Style$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Style", [
            { no: 1, name: "line", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "hidden", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "show_pages", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.line = 0;
        message.hidden = 0;
        message.showPages = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 line */ 1:
                    message.line = reader.int32();
                    break;
                case /* int32 hidden */ 2:
                    message.hidden = reader.int32();
                    break;
                case /* repeated string show_pages */ 3:
                    message.showPages.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 line = 1; */
        if (message.line !== 0)
            writer.tag(1, WireType.Varint).int32(message.line);
        /* int32 hidden = 2; */
        if (message.hidden !== 0)
            writer.tag(2, WireType.Varint).int32(message.hidden);
        /* repeated string show_pages = 3; */
        for (let i = 0; i < message.showPages.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.showPages[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Style
 */
export const Style = new Style$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tag$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Tag", [
            { no: 1, name: "tag_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tag_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tagId = 0;
        message.name = "";
        message.uri = "";
        message.tagType = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 tag_id */ 1:
                    message.tagId = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string uri */ 3:
                    message.uri = reader.string();
                    break;
                case /* string tag_type */ 4:
                    message.tagType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 tag_id = 1; */
        if (message.tagId !== 0)
            writer.tag(1, WireType.Varint).int64(message.tagId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string uri = 3; */
        if (message.uri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uri);
        /* string tag_type = 4; */
        if (message.tagType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tagType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Tag
 */
export const Tag = new Tag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TheatreHotTopic$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.TheatreHotTopic", [
            { no: 1, name: "theatre_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "theatre_set_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "theatre_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "background_image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "theatre_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "hot_topic_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "hot_topic_set_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "hot_topic_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "hot_topic_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "is_subscribe", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.theatreId = 0;
        message.theatreSetId = 0;
        message.theatreTitle = "";
        message.backgroundImageUrl = "";
        message.theatreUrl = "";
        message.hotTopicId = 0;
        message.hotTopicSetId = 0;
        message.hotTopicTitle = "";
        message.hotTopicUrl = "";
        message.isSubscribe = 0;
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 theatre_id */ 1:
                    message.theatreId = reader.int64().toNumber();
                    break;
                case /* int64 theatre_set_id */ 2:
                    message.theatreSetId = reader.int64().toNumber();
                    break;
                case /* string theatre_title */ 3:
                    message.theatreTitle = reader.string();
                    break;
                case /* string background_image_url */ 4:
                    message.backgroundImageUrl = reader.string();
                    break;
                case /* string theatre_url */ 5:
                    message.theatreUrl = reader.string();
                    break;
                case /* int64 hot_topic_id */ 6:
                    message.hotTopicId = reader.int64().toNumber();
                    break;
                case /* int64 hot_topic_set_id */ 7:
                    message.hotTopicSetId = reader.int64().toNumber();
                    break;
                case /* string hot_topic_title */ 8:
                    message.hotTopicTitle = reader.string();
                    break;
                case /* string hot_topic_url */ 9:
                    message.hotTopicUrl = reader.string();
                    break;
                case /* int32 is_subscribe */ 10:
                    message.isSubscribe = reader.int32();
                    break;
                case /* map<string, string> report */ 11:
                    this.binaryReadMap11(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap11(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.TheatreHotTopic.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 theatre_id = 1; */
        if (message.theatreId !== 0)
            writer.tag(1, WireType.Varint).int64(message.theatreId);
        /* int64 theatre_set_id = 2; */
        if (message.theatreSetId !== 0)
            writer.tag(2, WireType.Varint).int64(message.theatreSetId);
        /* string theatre_title = 3; */
        if (message.theatreTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.theatreTitle);
        /* string background_image_url = 4; */
        if (message.backgroundImageUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.backgroundImageUrl);
        /* string theatre_url = 5; */
        if (message.theatreUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.theatreUrl);
        /* int64 hot_topic_id = 6; */
        if (message.hotTopicId !== 0)
            writer.tag(6, WireType.Varint).int64(message.hotTopicId);
        /* int64 hot_topic_set_id = 7; */
        if (message.hotTopicSetId !== 0)
            writer.tag(7, WireType.Varint).int64(message.hotTopicSetId);
        /* string hot_topic_title = 8; */
        if (message.hotTopicTitle !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.hotTopicTitle);
        /* string hot_topic_url = 9; */
        if (message.hotTopicUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.hotTopicUrl);
        /* int32 is_subscribe = 10; */
        if (message.isSubscribe !== 0)
            writer.tag(10, WireType.Varint).int32(message.isSubscribe);
        /* map<string, string> report = 11; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.TheatreHotTopic
 */
export const TheatreHotTopic = new TheatreHotTopic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Threshold$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Threshold", [
            { no: 1, name: "bp", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "days", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "days_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.bp = 0;
        message.days = 0;
        message.daysText = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 bp */ 1:
                    message.bp = reader.int32();
                    break;
                case /* int32 days */ 2:
                    message.days = reader.int32();
                    break;
                case /* string days_text */ 3:
                    message.daysText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 bp = 1; */
        if (message.bp !== 0)
            writer.tag(1, WireType.Varint).int32(message.bp);
        /* int32 days = 2; */
        if (message.days !== 0)
            writer.tag(2, WireType.Varint).int32(message.days);
        /* string days_text = 3; */
        if (message.daysText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.daysText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Threshold
 */
export const Threshold = new Threshold$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TitleDeliveryButton$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.TitleDeliveryButton", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.icon = "";
        message.title = "";
        message.link = "";
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string link */ 3:
                    message.link = reader.string();
                    break;
                case /* map<string, string> report */ 4:
                    this.binaryReadMap4(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.TitleDeliveryButton.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string link = 3; */
        if (message.link !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.link);
        /* map<string, string> report = 4; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.TitleDeliveryButton
 */
export const TitleDeliveryButton = new TitleDeliveryButton$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcEpisode$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.UgcEpisode", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "cover_right_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "page", kind: "message", T: () => Page },
            { no: 8, name: "vt", kind: "message", T: () => StatInfo },
            { no: 9, name: "danmaku", kind: "message", T: () => StatInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.aid = 0;
        message.cid = 0;
        message.title = "";
        message.cover = "";
        message.coverRightText = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 aid */ 2:
                    message.aid = reader.int64().toNumber();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toNumber();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string cover */ 5:
                    message.cover = reader.string();
                    break;
                case /* string cover_right_text */ 6:
                    message.coverRightText = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Page page */ 7:
                    message.page = Page.internalBinaryRead(reader, reader.uint32(), options, message.page);
                    break;
                case /* bilibili.app.viewunite.common.StatInfo vt */ 8:
                    message.vt = StatInfo.internalBinaryRead(reader, reader.uint32(), options, message.vt);
                    break;
                case /* bilibili.app.viewunite.common.StatInfo danmaku */ 9:
                    message.danmaku = StatInfo.internalBinaryRead(reader, reader.uint32(), options, message.danmaku);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 aid = 2; */
        if (message.aid !== 0)
            writer.tag(2, WireType.Varint).int64(message.aid);
        /* int64 cid = 3; */
        if (message.cid !== 0)
            writer.tag(3, WireType.Varint).int64(message.cid);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string cover = 5; */
        if (message.cover !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cover);
        /* string cover_right_text = 6; */
        if (message.coverRightText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.coverRightText);
        /* bilibili.app.viewunite.common.Page page = 7; */
        if (message.page)
            Page.internalBinaryWrite(message.page, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.StatInfo vt = 8; */
        if (message.vt)
            StatInfo.internalBinaryWrite(message.vt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.StatInfo danmaku = 9; */
        if (message.danmaku)
            StatInfo.internalBinaryWrite(message.danmaku, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.UgcEpisode
 */
export const UgcEpisode = new UgcEpisode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcIntroduction$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.UgcIntroduction", [
            { no: 1, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tag },
            { no: 2, name: "rating", kind: "message", T: () => Rating },
            { no: 3, name: "rank", kind: "message", T: () => Rank },
            { no: 4, name: "bgm", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewMaterial },
            { no: 5, name: "sticker", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewMaterial },
            { no: 6, name: "video_source", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewMaterial },
            { no: 7, name: "pubdate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "desc", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DescV2 }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tags = [];
        message.bgm = [];
        message.sticker = [];
        message.videoSource = [];
        message.pubdate = 0;
        message.desc = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.viewunite.common.Tag tags */ 1:
                    message.tags.push(Tag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.viewunite.common.Rating rating */ 2:
                    message.rating = Rating.internalBinaryRead(reader, reader.uint32(), options, message.rating);
                    break;
                case /* bilibili.app.viewunite.common.Rank rank */ 3:
                    message.rank = Rank.internalBinaryRead(reader, reader.uint32(), options, message.rank);
                    break;
                case /* repeated bilibili.app.viewunite.common.ViewMaterial bgm */ 4:
                    message.bgm.push(ViewMaterial.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.viewunite.common.ViewMaterial sticker */ 5:
                    message.sticker.push(ViewMaterial.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.viewunite.common.ViewMaterial video_source */ 6:
                    message.videoSource.push(ViewMaterial.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 pubdate */ 7:
                    message.pubdate = reader.int64().toNumber();
                    break;
                case /* repeated bilibili.app.viewunite.common.DescV2 desc */ 8:
                    message.desc.push(DescV2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.viewunite.common.Tag tags = 1; */
        for (let i = 0; i < message.tags.length; i++)
            Tag.internalBinaryWrite(message.tags[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Rating rating = 2; */
        if (message.rating)
            Rating.internalBinaryWrite(message.rating, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Rank rank = 3; */
        if (message.rank)
            Rank.internalBinaryWrite(message.rank, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.viewunite.common.ViewMaterial bgm = 4; */
        for (let i = 0; i < message.bgm.length; i++)
            ViewMaterial.internalBinaryWrite(message.bgm[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.viewunite.common.ViewMaterial sticker = 5; */
        for (let i = 0; i < message.sticker.length; i++)
            ViewMaterial.internalBinaryWrite(message.sticker[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.viewunite.common.ViewMaterial video_source = 6; */
        for (let i = 0; i < message.videoSource.length; i++)
            ViewMaterial.internalBinaryWrite(message.videoSource[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 pubdate = 7; */
        if (message.pubdate !== 0)
            writer.tag(7, WireType.Varint).int64(message.pubdate);
        /* repeated bilibili.app.viewunite.common.DescV2 desc = 8; */
        for (let i = 0; i < message.desc.length; i++)
            DescV2.internalBinaryWrite(message.desc[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.UgcIntroduction
 */
export const UgcIntroduction = new UgcIntroduction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcSeasonActivity$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.UgcSeasonActivity", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "intro", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "day_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "user_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "join_deadline", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "activity_deadline", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "checkin_view_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "new_activity", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "user_activity", kind: "message", T: () => UserActivity },
            { no: 13, name: "season_show", kind: "message", T: () => SeasonShow }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.oid = 0;
        message.activityId = 0;
        message.title = "";
        message.intro = "";
        message.dayCount = 0;
        message.userCount = 0;
        message.joinDeadline = 0;
        message.activityDeadline = 0;
        message.checkinViewTime = 0;
        message.newActivity = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 activity_id */ 3:
                    message.activityId = reader.int64().toNumber();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string intro */ 5:
                    message.intro = reader.string();
                    break;
                case /* int32 day_count */ 6:
                    message.dayCount = reader.int32();
                    break;
                case /* int32 user_count */ 7:
                    message.userCount = reader.int32();
                    break;
                case /* int64 join_deadline */ 8:
                    message.joinDeadline = reader.int64().toNumber();
                    break;
                case /* int64 activity_deadline */ 9:
                    message.activityDeadline = reader.int64().toNumber();
                    break;
                case /* int32 checkin_view_time */ 10:
                    message.checkinViewTime = reader.int32();
                    break;
                case /* bool new_activity */ 11:
                    message.newActivity = reader.bool();
                    break;
                case /* bilibili.app.viewunite.common.UserActivity user_activity */ 12:
                    message.userActivity = UserActivity.internalBinaryRead(reader, reader.uint32(), options, message.userActivity);
                    break;
                case /* bilibili.app.viewunite.common.SeasonShow season_show */ 13:
                    message.seasonShow = SeasonShow.internalBinaryRead(reader, reader.uint32(), options, message.seasonShow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 oid = 2; */
        if (message.oid !== 0)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int64 activity_id = 3; */
        if (message.activityId !== 0)
            writer.tag(3, WireType.Varint).int64(message.activityId);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string intro = 5; */
        if (message.intro !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.intro);
        /* int32 day_count = 6; */
        if (message.dayCount !== 0)
            writer.tag(6, WireType.Varint).int32(message.dayCount);
        /* int32 user_count = 7; */
        if (message.userCount !== 0)
            writer.tag(7, WireType.Varint).int32(message.userCount);
        /* int64 join_deadline = 8; */
        if (message.joinDeadline !== 0)
            writer.tag(8, WireType.Varint).int64(message.joinDeadline);
        /* int64 activity_deadline = 9; */
        if (message.activityDeadline !== 0)
            writer.tag(9, WireType.Varint).int64(message.activityDeadline);
        /* int32 checkin_view_time = 10; */
        if (message.checkinViewTime !== 0)
            writer.tag(10, WireType.Varint).int32(message.checkinViewTime);
        /* bool new_activity = 11; */
        if (message.newActivity !== false)
            writer.tag(11, WireType.Varint).bool(message.newActivity);
        /* bilibili.app.viewunite.common.UserActivity user_activity = 12; */
        if (message.userActivity)
            UserActivity.internalBinaryWrite(message.userActivity, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.SeasonShow season_show = 13; */
        if (message.seasonShow)
            SeasonShow.internalBinaryWrite(message.seasonShow, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.UgcSeasonActivity
 */
export const UgcSeasonActivity = new UgcSeasonActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcSeasons$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.UgcSeasons", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "supernatant_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "section", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UgcSection },
            { no: 6, name: "union_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "head", kind: "message", T: () => SeasonHead },
            { no: 8, name: "ep_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "season_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "activity", kind: "message", T: () => UgcSeasonActivity },
            { no: 11, name: "season_ability", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "season_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.title = "";
        message.cover = "";
        message.supernatantTitle = "";
        message.section = [];
        message.unionTitle = "";
        message.epCount = 0;
        message.seasonType = 0;
        message.seasonAbility = [];
        message.seasonTitle = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string cover */ 3:
                    message.cover = reader.string();
                    break;
                case /* string supernatant_title */ 4:
                    message.supernatantTitle = reader.string();
                    break;
                case /* repeated bilibili.app.viewunite.common.UgcSection section */ 5:
                    message.section.push(UgcSection.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string union_title */ 6:
                    message.unionTitle = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.SeasonHead head */ 7:
                    message.head = SeasonHead.internalBinaryRead(reader, reader.uint32(), options, message.head);
                    break;
                case /* int64 ep_count */ 8:
                    message.epCount = reader.int64().toNumber();
                    break;
                case /* int32 season_type */ 9:
                    message.seasonType = reader.int32();
                    break;
                case /* bilibili.app.viewunite.common.UgcSeasonActivity activity */ 10:
                    message.activity = UgcSeasonActivity.internalBinaryRead(reader, reader.uint32(), options, message.activity);
                    break;
                case /* repeated string season_ability */ 11:
                    message.seasonAbility.push(reader.string());
                    break;
                case /* string season_title */ 12:
                    message.seasonTitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string cover = 3; */
        if (message.cover !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cover);
        /* string supernatant_title = 4; */
        if (message.supernatantTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.supernatantTitle);
        /* repeated bilibili.app.viewunite.common.UgcSection section = 5; */
        for (let i = 0; i < message.section.length; i++)
            UgcSection.internalBinaryWrite(message.section[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string union_title = 6; */
        if (message.unionTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.unionTitle);
        /* bilibili.app.viewunite.common.SeasonHead head = 7; */
        if (message.head)
            SeasonHead.internalBinaryWrite(message.head, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 ep_count = 8; */
        if (message.epCount !== 0)
            writer.tag(8, WireType.Varint).int64(message.epCount);
        /* int32 season_type = 9; */
        if (message.seasonType !== 0)
            writer.tag(9, WireType.Varint).int32(message.seasonType);
        /* bilibili.app.viewunite.common.UgcSeasonActivity activity = 10; */
        if (message.activity)
            UgcSeasonActivity.internalBinaryWrite(message.activity, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated string season_ability = 11; */
        for (let i = 0; i < message.seasonAbility.length; i++)
            writer.tag(11, WireType.LengthDelimited).string(message.seasonAbility[i]);
        /* string season_title = 12; */
        if (message.seasonTitle !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.seasonTitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.UgcSeasons
 */
export const UgcSeasons = new UgcSeasons$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcSection$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.UgcSection", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "episodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UgcEpisode }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.title = "";
        message.type = 0;
        message.episodes = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toNumber();
                    break;
                case /* repeated bilibili.app.viewunite.common.UgcEpisode episodes */ 4:
                    message.episodes.push(UgcEpisode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int64 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int64(message.type);
        /* repeated bilibili.app.viewunite.common.UgcEpisode episodes = 4; */
        for (let i = 0; i < message.episodes.length; i++)
            UgcEpisode.internalBinaryWrite(message.episodes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.UgcSection
 */
export const UgcSection = new UgcSection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpLikeImg$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.UpLikeImg", [
            { no: 1, name: "pre_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "suc_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.preImg = "";
        message.sucImg = "";
        message.content = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pre_img */ 1:
                    message.preImg = reader.string();
                    break;
                case /* string suc_img */ 2:
                    message.sucImg = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int64 type */ 4:
                    message.type = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string pre_img = 1; */
        if (message.preImg !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.preImg);
        /* string suc_img = 2; */
        if (message.sucImg !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sucImg);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int64 type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int64(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.UpLikeImg
 */
export const UpLikeImg = new UpLikeImg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.User", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "face", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "follower", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mid = 0;
        message.name = "";
        message.face = "";
        message.follower = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string face */ 3:
                    message.face = reader.string();
                    break;
                case /* int64 follower */ 4:
                    message.follower = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string face = 3; */
        if (message.face !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.face);
        /* int64 follower = 4; */
        if (message.follower !== 0)
            writer.tag(4, WireType.Varint).int64(message.follower);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserActivity$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.UserActivity", [
            { no: 1, name: "user_state", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "last_checkin_date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "checkin_today", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "user_day_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "user_view_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "portrait", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.userState = 0;
        message.lastCheckinDate = 0;
        message.checkinToday = 0;
        message.userDayCount = 0;
        message.userViewTime = 0;
        message.portrait = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_state */ 1:
                    message.userState = reader.int32();
                    break;
                case /* int64 last_checkin_date */ 2:
                    message.lastCheckinDate = reader.int64().toNumber();
                    break;
                case /* int32 checkin_today */ 3:
                    message.checkinToday = reader.int32();
                    break;
                case /* int32 user_day_count */ 4:
                    message.userDayCount = reader.int32();
                    break;
                case /* int32 user_view_time */ 5:
                    message.userViewTime = reader.int32();
                    break;
                case /* string portrait */ 6:
                    message.portrait = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 user_state = 1; */
        if (message.userState !== 0)
            writer.tag(1, WireType.Varint).int32(message.userState);
        /* int64 last_checkin_date = 2; */
        if (message.lastCheckinDate !== 0)
            writer.tag(2, WireType.Varint).int64(message.lastCheckinDate);
        /* int32 checkin_today = 3; */
        if (message.checkinToday !== 0)
            writer.tag(3, WireType.Varint).int32(message.checkinToday);
        /* int32 user_day_count = 4; */
        if (message.userDayCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.userDayCount);
        /* int32 user_view_time = 5; */
        if (message.userViewTime !== 0)
            writer.tag(5, WireType.Varint).int32(message.userViewTime);
        /* string portrait = 6; */
        if (message.portrait !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.portrait);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.UserActivity
 */
export const UserActivity = new UserActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserList$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.UserList", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.list = [];
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.viewunite.common.User list */ 1:
                    message.list.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.viewunite.common.User list = 1; */
        for (let i = 0; i < message.list.length; i++)
            User.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.UserList
 */
export const UserList = new UserList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserStatus$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.UserStatus", [
            { no: 1, name: "show", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "follow", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.show = 0;
        message.follow = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 show */ 1:
                    message.show = reader.int32();
                    break;
                case /* int32 follow */ 2:
                    message.follow = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 show = 1; */
        if (message.show !== 0)
            writer.tag(1, WireType.Varint).int32(message.show);
        /* int32 follow = 2; */
        if (message.follow !== 0)
            writer.tag(2, WireType.Varint).int32(message.follow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.UserStatus
 */
export const UserStatus = new UserStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewEpisode$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.ViewEpisode", [
            { no: 1, name: "ep_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "badge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "badge_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "badge_info", kind: "message", T: () => BadgeInfo },
            { no: 5, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "movie_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "long_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "toast_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 15, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "share_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "share_copy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "short_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "vid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "release_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "dimension", kind: "message", T: () => Dimension },
            { no: 22, name: "rights", kind: "message", T: () => Rights },
            { no: 23, name: "interaction", kind: "message", T: () => Interaction },
            { no: 24, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "archive_attr", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 26, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "link_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 28, name: "bmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "pub_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 30, name: "pv", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "ep_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "section_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 33, name: "up_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Staff },
            { no: 34, name: "up_info", kind: "message", T: () => Staff },
            { no: 35, name: "dialog_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 36, name: "toast_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 37, name: "multi_view_eps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MultiViewEp },
            { no: 38, name: "is_sub_view", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 39, name: "is_view_hide", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 40, name: "jump_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 41, name: "stat_for_unity", kind: "message", T: () => Stat },
            { no: 42, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.epId = 0;
        message.badge = "";
        message.badgeType = 0;
        message.duration = 0;
        message.status = 0;
        message.cover = "";
        message.aid = 0;
        message.title = "";
        message.movieTitle = "";
        message.subtitle = "";
        message.longTitle = "";
        message.toastTitle = "";
        message.cid = 0;
        message.from = "";
        message.shareUrl = "";
        message.shareCopy = "";
        message.shortLink = "";
        message.vid = "";
        message.releaseDate = "";
        message.bvid = "";
        message.archiveAttr = 0;
        message.link = "";
        message.linkType = "";
        message.bmid = "";
        message.pubTime = 0;
        message.pv = 0;
        message.epIndex = 0;
        message.sectionIndex = 0;
        message.upInfos = [];
        message.dialogType = "";
        message.toastType = "";
        message.multiViewEps = [];
        message.isSubView = false;
        message.isViewHide = false;
        message.jumpLink = "";
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ep_id */ 1:
                    message.epId = reader.int64().toNumber();
                    break;
                case /* string badge */ 2:
                    message.badge = reader.string();
                    break;
                case /* int32 badge_type */ 3:
                    message.badgeType = reader.int32();
                    break;
                case /* bilibili.app.viewunite.common.BadgeInfo badge_info */ 4:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                case /* int32 duration */ 5:
                    message.duration = reader.int32();
                    break;
                case /* int32 status */ 6:
                    message.status = reader.int32();
                    break;
                case /* string cover */ 7:
                    message.cover = reader.string();
                    break;
                case /* int64 aid */ 8:
                    message.aid = reader.int64().toNumber();
                    break;
                case /* string title */ 9:
                    message.title = reader.string();
                    break;
                case /* string movie_title */ 10:
                    message.movieTitle = reader.string();
                    break;
                case /* string subtitle */ 11:
                    message.subtitle = reader.string();
                    break;
                case /* string long_title */ 12:
                    message.longTitle = reader.string();
                    break;
                case /* string toast_title */ 13:
                    message.toastTitle = reader.string();
                    break;
                case /* int64 cid */ 14:
                    message.cid = reader.int64().toNumber();
                    break;
                case /* string from */ 15:
                    message.from = reader.string();
                    break;
                case /* string share_url */ 16:
                    message.shareUrl = reader.string();
                    break;
                case /* string share_copy */ 17:
                    message.shareCopy = reader.string();
                    break;
                case /* string short_link */ 18:
                    message.shortLink = reader.string();
                    break;
                case /* string vid */ 19:
                    message.vid = reader.string();
                    break;
                case /* string release_date */ 20:
                    message.releaseDate = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Dimension dimension */ 21:
                    message.dimension = Dimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);
                    break;
                case /* bilibili.app.viewunite.common.Rights rights */ 22:
                    message.rights = Rights.internalBinaryRead(reader, reader.uint32(), options, message.rights);
                    break;
                case /* bilibili.app.viewunite.common.Interaction interaction */ 23:
                    message.interaction = Interaction.internalBinaryRead(reader, reader.uint32(), options, message.interaction);
                    break;
                case /* string bvid */ 24:
                    message.bvid = reader.string();
                    break;
                case /* int32 archive_attr */ 25:
                    message.archiveAttr = reader.int32();
                    break;
                case /* string link */ 26:
                    message.link = reader.string();
                    break;
                case /* string link_type */ 27:
                    message.linkType = reader.string();
                    break;
                case /* string bmid */ 28:
                    message.bmid = reader.string();
                    break;
                case /* int64 pub_time */ 29:
                    message.pubTime = reader.int64().toNumber();
                    break;
                case /* int32 pv */ 30:
                    message.pv = reader.int32();
                    break;
                case /* int32 ep_index */ 31:
                    message.epIndex = reader.int32();
                    break;
                case /* int32 section_index */ 32:
                    message.sectionIndex = reader.int32();
                    break;
                case /* repeated bilibili.app.viewunite.common.Staff up_infos */ 33:
                    message.upInfos.push(Staff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.viewunite.common.Staff up_info */ 34:
                    message.upInfo = Staff.internalBinaryRead(reader, reader.uint32(), options, message.upInfo);
                    break;
                case /* string dialog_type */ 35:
                    message.dialogType = reader.string();
                    break;
                case /* string toast_type */ 36:
                    message.toastType = reader.string();
                    break;
                case /* repeated bilibili.app.viewunite.common.MultiViewEp multi_view_eps */ 37:
                    message.multiViewEps.push(MultiViewEp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool is_sub_view */ 38:
                    message.isSubView = reader.bool();
                    break;
                case /* bool is_view_hide */ 39:
                    message.isViewHide = reader.bool();
                    break;
                case /* string jump_link */ 40:
                    message.jumpLink = reader.string();
                    break;
                case /* bilibili.app.viewunite.common.Stat stat_for_unity */ 41:
                    message.statForUnity = Stat.internalBinaryRead(reader, reader.uint32(), options, message.statForUnity);
                    break;
                case /* map<string, string> report */ 42:
                    this.binaryReadMap42(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap42(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.common.ViewEpisode.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 ep_id = 1; */
        if (message.epId !== 0)
            writer.tag(1, WireType.Varint).int64(message.epId);
        /* string badge = 2; */
        if (message.badge !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.badge);
        /* int32 badge_type = 3; */
        if (message.badgeType !== 0)
            writer.tag(3, WireType.Varint).int32(message.badgeType);
        /* bilibili.app.viewunite.common.BadgeInfo badge_info = 4; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 duration = 5; */
        if (message.duration !== 0)
            writer.tag(5, WireType.Varint).int32(message.duration);
        /* int32 status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* string cover = 7; */
        if (message.cover !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.cover);
        /* int64 aid = 8; */
        if (message.aid !== 0)
            writer.tag(8, WireType.Varint).int64(message.aid);
        /* string title = 9; */
        if (message.title !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.title);
        /* string movie_title = 10; */
        if (message.movieTitle !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.movieTitle);
        /* string subtitle = 11; */
        if (message.subtitle !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.subtitle);
        /* string long_title = 12; */
        if (message.longTitle !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.longTitle);
        /* string toast_title = 13; */
        if (message.toastTitle !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.toastTitle);
        /* int64 cid = 14; */
        if (message.cid !== 0)
            writer.tag(14, WireType.Varint).int64(message.cid);
        /* string from = 15; */
        if (message.from !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.from);
        /* string share_url = 16; */
        if (message.shareUrl !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.shareUrl);
        /* string share_copy = 17; */
        if (message.shareCopy !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.shareCopy);
        /* string short_link = 18; */
        if (message.shortLink !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.shortLink);
        /* string vid = 19; */
        if (message.vid !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.vid);
        /* string release_date = 20; */
        if (message.releaseDate !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.releaseDate);
        /* bilibili.app.viewunite.common.Dimension dimension = 21; */
        if (message.dimension)
            Dimension.internalBinaryWrite(message.dimension, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Rights rights = 22; */
        if (message.rights)
            Rights.internalBinaryWrite(message.rights, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Interaction interaction = 23; */
        if (message.interaction)
            Interaction.internalBinaryWrite(message.interaction, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* string bvid = 24; */
        if (message.bvid !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.bvid);
        /* int32 archive_attr = 25; */
        if (message.archiveAttr !== 0)
            writer.tag(25, WireType.Varint).int32(message.archiveAttr);
        /* string link = 26; */
        if (message.link !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.link);
        /* string link_type = 27; */
        if (message.linkType !== "")
            writer.tag(27, WireType.LengthDelimited).string(message.linkType);
        /* string bmid = 28; */
        if (message.bmid !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.bmid);
        /* int64 pub_time = 29; */
        if (message.pubTime !== 0)
            writer.tag(29, WireType.Varint).int64(message.pubTime);
        /* int32 pv = 30; */
        if (message.pv !== 0)
            writer.tag(30, WireType.Varint).int32(message.pv);
        /* int32 ep_index = 31; */
        if (message.epIndex !== 0)
            writer.tag(31, WireType.Varint).int32(message.epIndex);
        /* int32 section_index = 32; */
        if (message.sectionIndex !== 0)
            writer.tag(32, WireType.Varint).int32(message.sectionIndex);
        /* repeated bilibili.app.viewunite.common.Staff up_infos = 33; */
        for (let i = 0; i < message.upInfos.length; i++)
            Staff.internalBinaryWrite(message.upInfos[i], writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Staff up_info = 34; */
        if (message.upInfo)
            Staff.internalBinaryWrite(message.upInfo, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* string dialog_type = 35; */
        if (message.dialogType !== "")
            writer.tag(35, WireType.LengthDelimited).string(message.dialogType);
        /* string toast_type = 36; */
        if (message.toastType !== "")
            writer.tag(36, WireType.LengthDelimited).string(message.toastType);
        /* repeated bilibili.app.viewunite.common.MultiViewEp multi_view_eps = 37; */
        for (let i = 0; i < message.multiViewEps.length; i++)
            MultiViewEp.internalBinaryWrite(message.multiViewEps[i], writer.tag(37, WireType.LengthDelimited).fork(), options).join();
        /* bool is_sub_view = 38; */
        if (message.isSubView !== false)
            writer.tag(38, WireType.Varint).bool(message.isSubView);
        /* bool is_view_hide = 39; */
        if (message.isViewHide !== false)
            writer.tag(39, WireType.Varint).bool(message.isViewHide);
        /* string jump_link = 40; */
        if (message.jumpLink !== "")
            writer.tag(40, WireType.LengthDelimited).string(message.jumpLink);
        /* bilibili.app.viewunite.common.Stat stat_for_unity = 41; */
        if (message.statForUnity)
            Stat.internalBinaryWrite(message.statForUnity, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> report = 42; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(42, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.ViewEpisode
 */
export const ViewEpisode = new ViewEpisode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewMaterial$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.ViewMaterial", [
            { no: 1, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "author", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.oid = 0;
        message.mid = 0;
        message.title = "";
        message.author = "";
        message.jumpUrl = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 oid */ 1:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 mid */ 2:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string author */ 4:
                    message.author = reader.string();
                    break;
                case /* string jump_url */ 5:
                    message.jumpUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 oid = 1; */
        if (message.oid !== 0)
            writer.tag(1, WireType.Varint).int64(message.oid);
        /* int64 mid = 2; */
        if (message.mid !== 0)
            writer.tag(2, WireType.Varint).int64(message.mid);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string author = 4; */
        if (message.author !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.author);
        /* string jump_url = 5; */
        if (message.jumpUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.jumpUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.ViewMaterial
 */
export const ViewMaterial = new ViewMaterial$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vip$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.Vip", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "vip_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "theme_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "label", kind: "message", T: () => VipLabel },
            { no: 5, name: "is_vip", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.vipStatus = 0;
        message.themeType = 0;
        message.isVip = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int32 vip_status */ 2:
                    message.vipStatus = reader.int32();
                    break;
                case /* int32 theme_type */ 3:
                    message.themeType = reader.int32();
                    break;
                case /* bilibili.app.viewunite.common.VipLabel label */ 4:
                    message.label = VipLabel.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                case /* int32 is_vip */ 5:
                    message.isVip = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int32 vip_status = 2; */
        if (message.vipStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.vipStatus);
        /* int32 theme_type = 3; */
        if (message.themeType !== 0)
            writer.tag(3, WireType.Varint).int32(message.themeType);
        /* bilibili.app.viewunite.common.VipLabel label = 4; */
        if (message.label)
            VipLabel.internalBinaryWrite(message.label, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 is_vip = 5; */
        if (message.isVip !== 0)
            writer.tag(5, WireType.Varint).int32(message.isVip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.Vip
 */
export const Vip = new Vip$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VipLabel$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.VipLabel", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "label_theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.path = "";
        message.text = "";
        message.labelTheme = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string label_theme */ 3:
                    message.labelTheme = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string label_theme = 3; */
        if (message.labelTheme !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.labelTheme);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.VipLabel
 */
export const VipLabel = new VipLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WikiInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.common.WikiInfo", [
            { no: 1, name: "wiki_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "wiki_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.wikiLabel = "";
        message.wikiUrl = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string wiki_label */ 1:
                    message.wikiLabel = reader.string();
                    break;
                case /* string wiki_url */ 2:
                    message.wikiUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string wiki_label = 1; */
        if (message.wikiLabel !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.wikiLabel);
        /* string wiki_url = 2; */
        if (message.wikiUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.wikiUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.common.WikiInfo
 */
export const WikiInfo = new WikiInfo$Type();
