// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/app/viewunite/v1/viewunite.proto" (package "bilibili.app.viewunite.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/app/viewunite/v1/viewunite.proto" (package "bilibili.app.viewunite.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../google/protobuf/any";
import { Owner } from "../common";
/**
 * @generated from protobuf enum bilibili.app.viewunite.v1.TabType
 */
export var TabType;
(function (TabType) {
    /**
     *
     *
     * @generated from protobuf enum value: TAB_NONE = 0;
     */
    TabType[TabType["TAB_NONE"] = 0] = "TAB_NONE";
    /**
     * 详情 Tab
     *
     * @generated from protobuf enum value: TAB_INTRODUCTION = 1;
     */
    TabType[TabType["TAB_INTRODUCTION"] = 1] = "TAB_INTRODUCTION";
    /**
     * 评论区 Tab
     *
     * @generated from protobuf enum value: TAB_REPLY = 2;
     */
    TabType[TabType["TAB_REPLY"] = 2] = "TAB_REPLY";
    /**
     * OGV 活动信息 Tab
     *
     * @generated from protobuf enum value: TAB_OGV_ACTIVITY = 3;
     */
    TabType[TabType["TAB_OGV_ACTIVITY"] = 3] = "TAB_OGV_ACTIVITY";
})(TabType || (TabType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Arc$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.v1.Arc", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "copyright", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "right", kind: "message", T: () => Rights },
            { no: 8, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "type_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.aid = 0;
        message.cid = 0;
        message.duration = 0;
        message.bvid = "";
        message.copyright = 0;
        message.cover = "";
        message.typeId = 0;
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid = 1 [jstype = JS_NUMBER];*/ 1:
                    message.aid = reader.int64().toNumber();
                    break;
                case /* int64 cid = 2 [jstype = JS_NUMBER];*/ 2:
                    message.cid = reader.int64().toNumber();
                    break;
                case /* int64 duration = 3 [jstype = JS_NUMBER];*/ 3:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* string bvid */ 5:
                    message.bvid = reader.string();
                    break;
                case /* int32 copyright */ 6:
                    message.copyright = reader.int32();
                    break;
                case /* bilibili.app.viewunite.v1.Rights right */ 7:
                    message.right = Rights.internalBinaryRead(reader, reader.uint32(), options, message.right);
                    break;
                case /* string cover */ 8:
                    message.cover = reader.string();
                    break;
                case /* int64 type_id = 9 [jstype = JS_NUMBER];*/ 9:
                    message.typeId = reader.int64().toNumber();
                    break;
                case /* string title */ 10:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1 [jstype = JS_NUMBER]; */
        if (message.aid !== 0)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* int64 cid = 2 [jstype = JS_NUMBER]; */
        if (message.cid !== 0)
            writer.tag(2, WireType.Varint).int64(message.cid);
        /* int64 duration = 3 [jstype = JS_NUMBER]; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* string bvid = 5; */
        if (message.bvid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bvid);
        /* int32 copyright = 6; */
        if (message.copyright !== 0)
            writer.tag(6, WireType.Varint).int32(message.copyright);
        /* bilibili.app.viewunite.v1.Rights right = 7; */
        if (message.right)
            Rights.internalBinaryWrite(message.right, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string cover = 8; */
        if (message.cover !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.cover);
        /* int64 type_id = 9 [jstype = JS_NUMBER]; */
        if (message.typeId !== 0)
            writer.tag(9, WireType.Varint).int64(message.typeId);
        /* string title = 10; */
        if (message.title !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.v1.Arc
 */
export const Arc = new Arc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntroductionTab$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.v1.IntroductionTab", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.v1.IntroductionTab
 */
export const IntroductionTab = new IntroductionTab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplyTab$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.v1.ReplyTab", [
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "control", kind: "message", T: () => TabControl }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* bilibili.app.viewunite.v1.TabControl control */ 3:
                    message.control = TabControl.internalBinaryRead(reader, reader.uint32(), options, message.control);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* bilibili.app.viewunite.v1.TabControl control = 3; */
        if (message.control)
            TabControl.internalBinaryWrite(message.control, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.v1.ReplyTab
 */
export const ReplyTab = new ReplyTab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rights$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.v1.Rights", [
            { no: 1, name: "only_vip_download", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "no_reprint", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "download", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.onlyVipDownload = false;
        message.noReprint = false;
        message.download = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool only_vip_download */ 1:
                    message.onlyVipDownload = reader.bool();
                    break;
                case /* bool no_reprint */ 2:
                    message.noReprint = reader.bool();
                    break;
                case /* bool download */ 3:
                    message.download = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool only_vip_download = 1; */
        if (message.onlyVipDownload !== false)
            writer.tag(1, WireType.Varint).bool(message.onlyVipDownload);
        /* bool no_reprint = 2; */
        if (message.noReprint !== false)
            writer.tag(2, WireType.Varint).bool(message.noReprint);
        /* bool download = 3; */
        if (message.download !== false)
            writer.tag(3, WireType.Varint).bool(message.download);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.v1.Rights
 */
export const Rights = new Rights$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tab$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.v1.Tab", [
            { no: 1, name: "tab_module", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TabModule },
            { no: 2, name: "tab_bg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tabModule = [];
        message.tabBg = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.viewunite.v1.TabModule tab_module */ 1:
                    message.tabModule.push(TabModule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string tab_bg */ 2:
                    message.tabBg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.viewunite.v1.TabModule tab_module = 1; */
        for (let i = 0; i < message.tabModule.length; i++)
            TabModule.internalBinaryWrite(message.tabModule[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string tab_bg = 2; */
        if (message.tabBg !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tabBg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.v1.Tab
 */
export const Tab = new Tab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TabControl$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.v1.TabControl", [
            { no: 1, name: "limit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "disable_click_tip", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.limit = false;
        message.disable = false;
        message.disableClickTip = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool limit */ 1:
                    message.limit = reader.bool();
                    break;
                case /* bool disable */ 2:
                    message.disable = reader.bool();
                    break;
                case /* string disable_click_tip */ 3:
                    message.disableClickTip = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool limit = 1; */
        if (message.limit !== false)
            writer.tag(1, WireType.Varint).bool(message.limit);
        /* bool disable = 2; */
        if (message.disable !== false)
            writer.tag(2, WireType.Varint).bool(message.disable);
        /* string disable_click_tip = 3; */
        if (message.disableClickTip !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.disableClickTip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.v1.TabControl
 */
export const TabControl = new TabControl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TabModule$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.v1.TabModule", [
            { no: 1, name: "tab_type", kind: "enum", T: () => ["bilibili.app.viewunite.v1.TabType", TabType] },
            { no: 2, name: "introduction", kind: "message", oneof: "tab", T: () => IntroductionTab },
            { no: 3, name: "reply", kind: "message", oneof: "tab", T: () => ReplyTab }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tabType = 0;
        message.tab = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.v1.TabType tab_type */ 1:
                    message.tabType = reader.int32();
                    break;
                case /* bilibili.app.viewunite.v1.IntroductionTab introduction */ 2:
                    message.tab = {
                        oneofKind: "introduction",
                        introduction: IntroductionTab.internalBinaryRead(reader, reader.uint32(), options, message.tab.introduction)
                    };
                    break;
                case /* bilibili.app.viewunite.v1.ReplyTab reply */ 3:
                    message.tab = {
                        oneofKind: "reply",
                        reply: ReplyTab.internalBinaryRead(reader, reader.uint32(), options, message.tab.reply)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.v1.TabType tab_type = 1; */
        if (message.tabType !== 0)
            writer.tag(1, WireType.Varint).int32(message.tabType);
        /* bilibili.app.viewunite.v1.IntroductionTab introduction = 2; */
        if (message.tab.oneofKind === "introduction")
            IntroductionTab.internalBinaryWrite(message.tab.introduction, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.v1.ReplyTab reply = 3; */
        if (message.tab.oneofKind === "reply")
            ReplyTab.internalBinaryWrite(message.tab.reply, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.v1.TabModule
 */
export const TabModule = new TabModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.v1.ViewReply", [
            { no: 2, name: "arc", kind: "message", T: () => Arc },
            { no: 4, name: "owner", kind: "message", T: () => Owner },
            { no: 5, name: "tab", kind: "message", T: () => Tab },
            { no: 6, name: "supplement", kind: "message", T: () => Any },
            { no: 10, name: "report", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.report = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.viewunite.v1.Arc arc */ 2:
                    message.arc = Arc.internalBinaryRead(reader, reader.uint32(), options, message.arc);
                    break;
                case /* bilibili.app.viewunite.common.Owner owner */ 4:
                    message.owner = Owner.internalBinaryRead(reader, reader.uint32(), options, message.owner);
                    break;
                case /* bilibili.app.viewunite.v1.Tab tab */ 5:
                    message.tab = Tab.internalBinaryRead(reader, reader.uint32(), options, message.tab);
                    break;
                case /* google.protobuf.Any supplement */ 6:
                    message.supplement = Any.internalBinaryRead(reader, reader.uint32(), options, message.supplement);
                    break;
                case /* map<string, string> report */ 10:
                    this.binaryReadMap10(message.report, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap10(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.v1.ViewReply.report");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.viewunite.v1.Arc arc = 2; */
        if (message.arc)
            Arc.internalBinaryWrite(message.arc, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.common.Owner owner = 4; */
        if (message.owner)
            Owner.internalBinaryWrite(message.owner, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.viewunite.v1.Tab tab = 5; */
        if (message.tab)
            Tab.internalBinaryWrite(message.tab, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any supplement = 6; */
        if (message.supplement)
            Any.internalBinaryWrite(message.supplement, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> report = 10; */
        for (let k of globalThis.Object.keys(message.report))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.report[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.v1.ViewReply
 */
export const ViewReply = new ViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.viewunite.v1.ViewReq", [
            { no: 1, name: "aid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "track_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "extra_content", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 10, name: "play_mode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "biz_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "ad_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.aid = 0;
        message.bvid = "";
        message.from = "";
        message.spmid = "";
        message.fromSpmid = "";
        message.sessionId = "";
        message.trackId = "";
        message.extraContent = {};
        message.playMode = "";
        message.bizExtra = "";
        message.adExtra = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 aid = 1 [jstype = JS_NUMBER];*/ 1:
                    message.aid = reader.uint64().toNumber();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* string from */ 3:
                    message.from = reader.string();
                    break;
                case /* string spmid */ 4:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 5:
                    message.fromSpmid = reader.string();
                    break;
                case /* string session_id */ 6:
                    message.sessionId = reader.string();
                    break;
                case /* string track_id */ 8:
                    message.trackId = reader.string();
                    break;
                case /* map<string, string> extra_content */ 9:
                    this.binaryReadMap9(message.extraContent, reader, options);
                    break;
                case /* string play_mode */ 10:
                    message.playMode = reader.string();
                    break;
                case /* string biz_extra */ 12:
                    message.bizExtra = reader.string();
                    break;
                case /* string ad_extra */ 13:
                    message.adExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap9(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.viewunite.v1.ViewReq.extra_content");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 aid = 1 [jstype = JS_NUMBER]; */
        if (message.aid !== 0)
            writer.tag(1, WireType.Varint).uint64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* string from = 3; */
        if (message.from !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.from);
        /* string spmid = 4; */
        if (message.spmid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 5; */
        if (message.fromSpmid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fromSpmid);
        /* string session_id = 6; */
        if (message.sessionId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.sessionId);
        /* string track_id = 8; */
        if (message.trackId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.trackId);
        /* map<string, string> extra_content = 9; */
        for (let k of globalThis.Object.keys(message.extraContent))
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.extraContent[k]).join();
        /* string play_mode = 10; */
        if (message.playMode !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.playMode);
        /* string biz_extra = 12; */
        if (message.bizExtra !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.bizExtra);
        /* string ad_extra = 13; */
        if (message.adExtra !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.adExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.viewunite.v1.ViewReq
 */
export const ViewReq = new ViewReq$Type();
/**
 * @generated ServiceType for protobuf service bilibili.app.viewunite.v1.View
 */
export const View = new ServiceType("bilibili.app.viewunite.v1.View", [
    { name: "View", options: {}, I: ViewReq, O: ViewReply }
]);
