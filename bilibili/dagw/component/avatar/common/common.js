// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/dagw/component/avatar/common/common.proto" (package "bilibili.dagw.component.avatar.common", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum bilibili.dagw.component.avatar.common.ResourceSource.LocalRes
 */
export var ResourceSource_LocalRes;
(function (ResourceSource_LocalRes) {
    /**
     * @generated from protobuf enum value: LOCAL_RES_INVALID = 0;
     */
    ResourceSource_LocalRes[ResourceSource_LocalRes["INVALID"] = 0] = "INVALID";
    /**
     * @generated from protobuf enum value: LOCAL_RES_ICON_VIP = 1;
     */
    ResourceSource_LocalRes[ResourceSource_LocalRes["ICON_VIP"] = 1] = "ICON_VIP";
    /**
     * @generated from protobuf enum value: LOCAL_RES_ICON_SMALL_VIP = 2;
     */
    ResourceSource_LocalRes[ResourceSource_LocalRes["ICON_SMALL_VIP"] = 2] = "ICON_SMALL_VIP";
    /**
     * @generated from protobuf enum value: LOCAL_RES_ICON_PERSONAL_VERIFY = 3;
     */
    ResourceSource_LocalRes[ResourceSource_LocalRes["ICON_PERSONAL_VERIFY"] = 3] = "ICON_PERSONAL_VERIFY";
    /**
     * @generated from protobuf enum value: LOCAL_RES_ICON_ENTERPRISE_VERIFY = 4;
     */
    ResourceSource_LocalRes[ResourceSource_LocalRes["ICON_ENTERPRISE_VERIFY"] = 4] = "ICON_ENTERPRISE_VERIFY";
    /**
     * @generated from protobuf enum value: LOCAL_RES_ICON_NFT_MAINLAND = 5;
     */
    ResourceSource_LocalRes[ResourceSource_LocalRes["ICON_NFT_MAINLAND"] = 5] = "ICON_NFT_MAINLAND";
    /**
     * @generated from protobuf enum value: LOCAL_RES_DEFAULT_AVATAR = 6;
     */
    ResourceSource_LocalRes[ResourceSource_LocalRes["DEFAULT_AVATAR"] = 6] = "DEFAULT_AVATAR";
})(ResourceSource_LocalRes || (ResourceSource_LocalRes = {}));
// @generated message type with reflection information, may provide speed optimized methods
class BasicRenderSpec$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.BasicRenderSpec", [
            { no: 1, name: "opacity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.opacity = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double opacity */ 1:
                    message.opacity = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* double opacity = 1; */
        if (message.opacity !== 0)
            writer.tag(1, WireType.Bit64).double(message.opacity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.BasicRenderSpec
 */
export const BasicRenderSpec = new BasicRenderSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColorConfig$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.ColorConfig", [
            { no: 1, name: "is_dark_mode_aware", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "day", kind: "message", T: () => ColorSpec },
            { no: 3, name: "night", kind: "message", T: () => ColorSpec }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.isDarkModeAware = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_dark_mode_aware */ 1:
                    message.isDarkModeAware = reader.bool();
                    break;
                case /* bilibili.dagw.component.avatar.common.ColorSpec day */ 2:
                    message.day = ColorSpec.internalBinaryRead(reader, reader.uint32(), options, message.day);
                    break;
                case /* bilibili.dagw.component.avatar.common.ColorSpec night */ 3:
                    message.night = ColorSpec.internalBinaryRead(reader, reader.uint32(), options, message.night);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_dark_mode_aware = 1; */
        if (message.isDarkModeAware !== false)
            writer.tag(1, WireType.Varint).bool(message.isDarkModeAware);
        /* bilibili.dagw.component.avatar.common.ColorSpec day = 2; */
        if (message.day)
            ColorSpec.internalBinaryWrite(message.day, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.dagw.component.avatar.common.ColorSpec night = 3; */
        if (message.night)
            ColorSpec.internalBinaryWrite(message.night, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.ColorConfig
 */
export const ColorConfig = new ColorConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColorSpec$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.ColorSpec", [
            { no: 1, name: "argb", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.argb = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string argb */ 1:
                    message.argb = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string argb = 1; */
        if (message.argb !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.argb);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.ColorSpec
 */
export const ColorSpec = new ColorSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LayerGeneralSpec$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.LayerGeneralSpec", [
            { no: 1, name: "pos_spec", kind: "message", T: () => PositionSpec },
            { no: 2, name: "size_spec", kind: "message", T: () => SizeSpec },
            { no: 3, name: "render_spec", kind: "message", T: () => BasicRenderSpec }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.dagw.component.avatar.common.PositionSpec pos_spec */ 1:
                    message.posSpec = PositionSpec.internalBinaryRead(reader, reader.uint32(), options, message.posSpec);
                    break;
                case /* bilibili.dagw.component.avatar.common.SizeSpec size_spec */ 2:
                    message.sizeSpec = SizeSpec.internalBinaryRead(reader, reader.uint32(), options, message.sizeSpec);
                    break;
                case /* bilibili.dagw.component.avatar.common.BasicRenderSpec render_spec */ 3:
                    message.renderSpec = BasicRenderSpec.internalBinaryRead(reader, reader.uint32(), options, message.renderSpec);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.dagw.component.avatar.common.PositionSpec pos_spec = 1; */
        if (message.posSpec)
            PositionSpec.internalBinaryWrite(message.posSpec, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.dagw.component.avatar.common.SizeSpec size_spec = 2; */
        if (message.sizeSpec)
            SizeSpec.internalBinaryWrite(message.sizeSpec, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.dagw.component.avatar.common.BasicRenderSpec render_spec = 3; */
        if (message.renderSpec)
            BasicRenderSpec.internalBinaryWrite(message.renderSpec, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.LayerGeneralSpec
 */
export const LayerGeneralSpec = new LayerGeneralSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaskProperty$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.MaskProperty", [
            { no: 1, name: "general_spec", kind: "message", T: () => LayerGeneralSpec },
            { no: 2, name: "mask_src", kind: "message", T: () => ResourceSource }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.dagw.component.avatar.common.LayerGeneralSpec general_spec */ 1:
                    message.generalSpec = LayerGeneralSpec.internalBinaryRead(reader, reader.uint32(), options, message.generalSpec);
                    break;
                case /* bilibili.dagw.component.avatar.common.ResourceSource mask_src */ 2:
                    message.maskSrc = ResourceSource.internalBinaryRead(reader, reader.uint32(), options, message.maskSrc);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.dagw.component.avatar.common.LayerGeneralSpec general_spec = 1; */
        if (message.generalSpec)
            LayerGeneralSpec.internalBinaryWrite(message.generalSpec, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.dagw.component.avatar.common.ResourceSource mask_src = 2; */
        if (message.maskSrc)
            ResourceSource.internalBinaryWrite(message.maskSrc, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.MaskProperty
 */
export const MaskProperty = new MaskProperty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NativeDrawRes$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.NativeDrawRes", [
            { no: 1, name: "draw_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "fill_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "color_config", kind: "message", T: () => ColorConfig },
            { no: 4, name: "edge_weight", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.drawType = 0;
        message.fillMode = 0;
        message.edgeWeight = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 draw_type */ 1:
                    message.drawType = reader.int32();
                    break;
                case /* int32 fill_mode */ 2:
                    message.fillMode = reader.int32();
                    break;
                case /* bilibili.dagw.component.avatar.common.ColorConfig color_config */ 3:
                    message.colorConfig = ColorConfig.internalBinaryRead(reader, reader.uint32(), options, message.colorConfig);
                    break;
                case /* double edge_weight */ 4:
                    message.edgeWeight = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 draw_type = 1; */
        if (message.drawType !== 0)
            writer.tag(1, WireType.Varint).int32(message.drawType);
        /* int32 fill_mode = 2; */
        if (message.fillMode !== 0)
            writer.tag(2, WireType.Varint).int32(message.fillMode);
        /* bilibili.dagw.component.avatar.common.ColorConfig color_config = 3; */
        if (message.colorConfig)
            ColorConfig.internalBinaryWrite(message.colorConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* double edge_weight = 4; */
        if (message.edgeWeight !== 0)
            writer.tag(4, WireType.Bit64).double(message.edgeWeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.NativeDrawRes
 */
export const NativeDrawRes = new NativeDrawRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PositionSpec$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.PositionSpec", [
            { no: 1, name: "coordinate_pos", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "axis_x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "axis_y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.coordinatePos = 0;
        message.axisX = 0;
        message.axisY = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 coordinate_pos */ 1:
                    message.coordinatePos = reader.int32();
                    break;
                case /* double axis_x */ 2:
                    message.axisX = reader.double();
                    break;
                case /* double axis_y */ 3:
                    message.axisY = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 coordinate_pos = 1; */
        if (message.coordinatePos !== 0)
            writer.tag(1, WireType.Varint).int32(message.coordinatePos);
        /* double axis_x = 2; */
        if (message.axisX !== 0)
            writer.tag(2, WireType.Bit64).double(message.axisX);
        /* double axis_y = 3; */
        if (message.axisY !== 0)
            writer.tag(3, WireType.Bit64).double(message.axisY);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.PositionSpec
 */
export const PositionSpec = new PositionSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoteRes$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.RemoteRes", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bfs_style", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.url = "";
        message.bfsStyle = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* string bfs_style */ 2:
                    message.bfsStyle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* string bfs_style = 2; */
        if (message.bfsStyle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bfsStyle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.RemoteRes
 */
export const RemoteRes = new RemoteRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceSource$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.ResourceSource", [
            { no: 1, name: "src_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "placeholder", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "remote", kind: "message", oneof: "res", T: () => RemoteRes },
            { no: 4, name: "local", kind: "enum", oneof: "res", T: () => ["bilibili.dagw.component.avatar.common.ResourceSource.LocalRes", ResourceSource_LocalRes, "LOCAL_RES_"] },
            { no: 5, name: "draw", kind: "message", oneof: "res", T: () => NativeDrawRes }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.srcType = 0;
        message.placeholder = 0;
        message.res = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 src_type */ 1:
                    message.srcType = reader.int32();
                    break;
                case /* int32 placeholder */ 2:
                    message.placeholder = reader.int32();
                    break;
                case /* bilibili.dagw.component.avatar.common.RemoteRes remote */ 3:
                    message.res = {
                        oneofKind: "remote",
                        remote: RemoteRes.internalBinaryRead(reader, reader.uint32(), options, message.res.remote)
                    };
                    break;
                case /* bilibili.dagw.component.avatar.common.ResourceSource.LocalRes local */ 4:
                    message.res = {
                        oneofKind: "local",
                        local: reader.int32()
                    };
                    break;
                case /* bilibili.dagw.component.avatar.common.NativeDrawRes draw */ 5:
                    message.res = {
                        oneofKind: "draw",
                        draw: NativeDrawRes.internalBinaryRead(reader, reader.uint32(), options, message.res.draw)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 src_type = 1; */
        if (message.srcType !== 0)
            writer.tag(1, WireType.Varint).int32(message.srcType);
        /* int32 placeholder = 2; */
        if (message.placeholder !== 0)
            writer.tag(2, WireType.Varint).int32(message.placeholder);
        /* bilibili.dagw.component.avatar.common.RemoteRes remote = 3; */
        if (message.res.oneofKind === "remote")
            RemoteRes.internalBinaryWrite(message.res.remote, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.dagw.component.avatar.common.ResourceSource.LocalRes local = 4; */
        if (message.res.oneofKind === "local")
            writer.tag(4, WireType.Varint).int32(message.res.local);
        /* bilibili.dagw.component.avatar.common.NativeDrawRes draw = 5; */
        if (message.res.oneofKind === "draw")
            NativeDrawRes.internalBinaryWrite(message.res.draw, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.ResourceSource
 */
export const ResourceSource = new ResourceSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SizeSpec$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.common.SizeSpec", [
            { no: 1, name: "width", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "height", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.width = 0;
        message.height = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double width */ 1:
                    message.width = reader.double();
                    break;
                case /* double height */ 2:
                    message.height = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* double width = 1; */
        if (message.width !== 0)
            writer.tag(1, WireType.Bit64).double(message.width);
        /* double height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Bit64).double(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.common.SizeSpec
 */
export const SizeSpec = new SizeSpec$Type();
