// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/dagw/component/avatar/v1/plugin.proto" (package "bilibili.dagw.component.avatar.v1.plugin", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ColorConfig } from "../common/common";
// @generated message type with reflection information, may provide speed optimized methods
class CommentDoubleClickConfig$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.CommentDoubleClickConfig", [
            { no: 1, name: "interaction", kind: "message", T: () => Interaction },
            { no: 2, name: "animation_scale", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.animationScale = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.dagw.component.avatar.v1.plugin.Interaction interaction */ 1:
                    message.interaction = Interaction.internalBinaryRead(reader, reader.uint32(), options, message.interaction);
                    break;
                case /* double animation_scale */ 2:
                    message.animationScale = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.dagw.component.avatar.v1.plugin.Interaction interaction = 1; */
        if (message.interaction)
            Interaction.internalBinaryWrite(message.interaction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* double animation_scale = 2; */
        if (message.animationScale !== 0)
            writer.tag(2, WireType.Bit64).double(message.animationScale);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.CommentDoubleClickConfig
 */
export const CommentDoubleClickConfig = new CommentDoubleClickConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GyroConfig$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.GyroConfig", [
            { no: 1, name: "gyroscope", kind: "message", T: () => NFTImageV2 }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.dagw.component.avatar.v1.plugin.NFTImageV2 gyroscope */ 1:
                    message.gyroscope = NFTImageV2.internalBinaryRead(reader, reader.uint32(), options, message.gyroscope);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.dagw.component.avatar.v1.plugin.NFTImageV2 gyroscope = 1; */
        if (message.gyroscope)
            NFTImageV2.internalBinaryWrite(message.gyroscope, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.GyroConfig
 */
export const GyroConfig = new GyroConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GyroscopeContentV2$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.GyroscopeContentV2", [
            { no: 1, name: "file_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "physical_orientation", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PhysicalOrientationV2 }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.fileUrl = "";
        message.scale = 0;
        message.physicalOrientation = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file_url */ 1:
                    message.fileUrl = reader.string();
                    break;
                case /* float scale */ 2:
                    message.scale = reader.float();
                    break;
                case /* repeated bilibili.dagw.component.avatar.v1.plugin.PhysicalOrientationV2 physical_orientation */ 3:
                    message.physicalOrientation.push(PhysicalOrientationV2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string file_url = 1; */
        if (message.fileUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fileUrl);
        /* float scale = 2; */
        if (message.scale !== 0)
            writer.tag(2, WireType.Bit32).float(message.scale);
        /* repeated bilibili.dagw.component.avatar.v1.plugin.PhysicalOrientationV2 physical_orientation = 3; */
        for (let i = 0; i < message.physicalOrientation.length; i++)
            PhysicalOrientationV2.internalBinaryWrite(message.physicalOrientation[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.GyroscopeContentV2
 */
export const GyroscopeContentV2 = new GyroscopeContentV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GyroscopeEntityV2$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.GyroscopeEntityV2", [
            { no: 1, name: "display_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GyroscopeContentV2 }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.displayType = "";
        message.contents = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string display_type */ 1:
                    message.displayType = reader.string();
                    break;
                case /* repeated bilibili.dagw.component.avatar.v1.plugin.GyroscopeContentV2 contents */ 2:
                    message.contents.push(GyroscopeContentV2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string display_type = 1; */
        if (message.displayType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.displayType);
        /* repeated bilibili.dagw.component.avatar.v1.plugin.GyroscopeContentV2 contents = 2; */
        for (let i = 0; i < message.contents.length; i++)
            GyroscopeContentV2.internalBinaryWrite(message.contents[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.GyroscopeEntityV2
 */
export const GyroscopeEntityV2 = new GyroscopeEntityV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Interaction$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.Interaction", [
            { no: 1, name: "nft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "itype", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "metadata_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.nftId = "";
        message.enabled = false;
        message.itype = "";
        message.metadataUrl = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nft_id */ 1:
                    message.nftId = reader.string();
                    break;
                case /* bool enabled */ 2:
                    message.enabled = reader.bool();
                    break;
                case /* string itype */ 3:
                    message.itype = reader.string();
                    break;
                case /* string metadata_url */ 4:
                    message.metadataUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string nft_id = 1; */
        if (message.nftId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nftId);
        /* bool enabled = 2; */
        if (message.enabled !== false)
            writer.tag(2, WireType.Varint).bool(message.enabled);
        /* string itype = 3; */
        if (message.itype !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itype);
        /* string metadata_url = 4; */
        if (message.metadataUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.metadataUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.Interaction
 */
export const Interaction = new Interaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveAnimeConfig$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.LiveAnimeConfig", [
            { no: 1, name: "is_live", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.isLive = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_live */ 1:
                    message.isLive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_live = 1; */
        if (message.isLive !== false)
            writer.tag(1, WireType.Varint).bool(message.isLive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.LiveAnimeConfig
 */
export const LiveAnimeConfig = new LiveAnimeConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveAnimeItem$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.LiveAnimeItem", [
            { no: 1, name: "color", kind: "message", T: () => ColorConfig },
            { no: 2, name: "start_ratio", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "end_ratio", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "start_stroke", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "start_opacity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "phase", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.startRatio = 0;
        message.endRatio = 0;
        message.startStroke = 0;
        message.startOpacity = 0;
        message.phase = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.dagw.component.avatar.common.ColorConfig color */ 1:
                    message.color = ColorConfig.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                case /* double start_ratio */ 2:
                    message.startRatio = reader.double();
                    break;
                case /* double end_ratio */ 3:
                    message.endRatio = reader.double();
                    break;
                case /* double start_stroke */ 4:
                    message.startStroke = reader.double();
                    break;
                case /* double start_opacity */ 5:
                    message.startOpacity = reader.double();
                    break;
                case /* int64 phase */ 6:
                    message.phase = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.dagw.component.avatar.common.ColorConfig color = 1; */
        if (message.color)
            ColorConfig.internalBinaryWrite(message.color, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* double start_ratio = 2; */
        if (message.startRatio !== 0)
            writer.tag(2, WireType.Bit64).double(message.startRatio);
        /* double end_ratio = 3; */
        if (message.endRatio !== 0)
            writer.tag(3, WireType.Bit64).double(message.endRatio);
        /* double start_stroke = 4; */
        if (message.startStroke !== 0)
            writer.tag(4, WireType.Bit64).double(message.startStroke);
        /* double start_opacity = 5; */
        if (message.startOpacity !== 0)
            writer.tag(5, WireType.Bit64).double(message.startOpacity);
        /* int64 phase = 6; */
        if (message.phase !== 0)
            writer.tag(6, WireType.Varint).int64(message.phase);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.LiveAnimeItem
 */
export const LiveAnimeItem = new LiveAnimeItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NFTImageV2$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.NFTImageV2", [
            { no: 1, name: "gyroscope", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GyroscopeEntityV2 }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.gyroscope = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.dagw.component.avatar.v1.plugin.GyroscopeEntityV2 gyroscope */ 1:
                    message.gyroscope.push(GyroscopeEntityV2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.dagw.component.avatar.v1.plugin.GyroscopeEntityV2 gyroscope = 1; */
        for (let i = 0; i < message.gyroscope.length; i++)
            GyroscopeEntityV2.internalBinaryWrite(message.gyroscope[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.NFTImageV2
 */
export const NFTImageV2 = new NFTImageV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhysicalOrientationAnimation$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.PhysicalOrientationAnimation", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bezier", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = "";
        message.bezier = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string bezier */ 3:
                    message.bezier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string bezier = 3; */
        if (message.bezier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bezier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.PhysicalOrientationAnimation
 */
export const PhysicalOrientationAnimation = new PhysicalOrientationAnimation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhysicalOrientationV2$Type extends MessageType {
    constructor() {
        super("bilibili.dagw.component.avatar.v1.plugin.PhysicalOrientationV2", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "animations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PhysicalOrientationAnimation }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = "";
        message.animations = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* repeated bilibili.dagw.component.avatar.v1.plugin.PhysicalOrientationAnimation animations */ 3:
                    message.animations.push(PhysicalOrientationAnimation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* repeated bilibili.dagw.component.avatar.v1.plugin.PhysicalOrientationAnimation animations = 3; */
        for (let i = 0; i < message.animations.length; i++)
            PhysicalOrientationAnimation.internalBinaryWrite(message.animations[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.dagw.component.avatar.v1.plugin.PhysicalOrientationV2
 */
export const PhysicalOrientationV2 = new PhysicalOrientationV2$Type();
