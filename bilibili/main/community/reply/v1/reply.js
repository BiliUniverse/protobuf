// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/main/community/reply/v1/reply.proto" (package "bilibili.main.community.reply.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/main/community/reply/v1/reply.proto" (package "bilibili.main.community.reply.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../../google/protobuf/any";
/**
 * 地区类型
 *
 * @generated from protobuf enum bilibili.main.community.reply.v1.Member.RegionType
 */
export var Member_RegionType;
(function (Member_RegionType) {
    /**
     * 默认
     *
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    Member_RegionType[Member_RegionType["DEFAULT"] = 0] = "DEFAULT";
    /**
     * 大陆地区
     *
     * @generated from protobuf enum value: MAINLAND = 1;
     */
    Member_RegionType[Member_RegionType["MAINLAND"] = 1] = "MAINLAND";
    /**
     * @generated from protobuf enum value: GAT = 2;
     */
    Member_RegionType[Member_RegionType["GAT"] = 2] = "GAT";
})(Member_RegionType || (Member_RegionType = {}));
/**
 * @generated from protobuf enum bilibili.main.community.reply.v1.Member.ShowStatus
 */
export var Member_ShowStatus;
(function (Member_ShowStatus) {
    /**
     * 默认
     *
     * @generated from protobuf enum value: SHOWDEFAULT = 0;
     */
    Member_ShowStatus[Member_ShowStatus["SHOWDEFAULT"] = 0] = "SHOWDEFAULT";
    /**
     * @generated from protobuf enum value: ZOOMINMAINLAND = 1;
     */
    Member_ShowStatus[Member_ShowStatus["ZOOMINMAINLAND"] = 1] = "ZOOMINMAINLAND";
    /**
     * @generated from protobuf enum value: RAW = 2;
     */
    Member_ShowStatus[Member_ShowStatus["RAW"] = 2] = "RAW";
})(Member_ShowStatus || (Member_ShowStatus = {}));
/**
 * 地区类型
 *
 * @generated from protobuf enum bilibili.main.community.reply.v1.MemberV2.RegionType
 */
export var MemberV2_RegionType;
(function (MemberV2_RegionType) {
    /**
     * 默认
     *
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    MemberV2_RegionType[MemberV2_RegionType["DEFAULT"] = 0] = "DEFAULT";
    /**
     * 大陆地区
     *
     * @generated from protobuf enum value: MAINLAND = 1;
     */
    MemberV2_RegionType[MemberV2_RegionType["MAINLAND"] = 1] = "MAINLAND";
    /**
     * @generated from protobuf enum value: GAT = 2;
     */
    MemberV2_RegionType[MemberV2_RegionType["GAT"] = 2] = "GAT";
})(MemberV2_RegionType || (MemberV2_RegionType = {}));
/**
 * @generated from protobuf enum bilibili.main.community.reply.v1.MemberV2.ShowStatus
 */
export var MemberV2_ShowStatus;
(function (MemberV2_ShowStatus) {
    /**
     * @generated from protobuf enum value: SHOWDEFAULT = 0;
     */
    MemberV2_ShowStatus[MemberV2_ShowStatus["SHOWDEFAULT"] = 0] = "SHOWDEFAULT";
    /**
     * @generated from protobuf enum value: ZOOMINMAINLAND = 1;
     */
    MemberV2_ShowStatus[MemberV2_ShowStatus["ZOOMINMAINLAND"] = 1] = "ZOOMINMAINLAND";
    /**
     * @generated from protobuf enum value: RAW = 2;
     */
    MemberV2_ShowStatus[MemberV2_ShowStatus["RAW"] = 2] = "RAW";
})(MemberV2_ShowStatus || (MemberV2_ShowStatus = {}));
/**
 * 来源标识
 *
 * @generated from protobuf enum bilibili.main.community.reply.v1.DetailListScene
 */
export var DetailListScene;
(function (DetailListScene) {
    /**
     * 评论区展开
     *
     * @generated from protobuf enum value: REPLY = 0;
     */
    DetailListScene[DetailListScene["REPLY"] = 0] = "REPLY";
    /**
     * 回复消息推送
     *
     * @generated from protobuf enum value: MSG_FEED = 1;
     */
    DetailListScene[DetailListScene["MSG_FEED"] = 1] = "MSG_FEED";
    /**
     * @generated from protobuf enum value: NOTIFY = 2;
     */
    DetailListScene[DetailListScene["NOTIFY"] = 2] = "NOTIFY";
})(DetailListScene || (DetailListScene = {}));
/**
 * 排序方式
 *
 * @generated from protobuf enum bilibili.main.community.reply.v1.Mode
 */
export var Mode;
(function (Mode) {
    /**
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    Mode[Mode["DEFAULT"] = 0] = "DEFAULT";
    /**
     * 默认排序
     *
     * @generated from protobuf enum value: UNSPECIFIED = 1;
     */
    Mode[Mode["UNSPECIFIED"] = 1] = "UNSPECIFIED";
    /**
     * 按时间
     *
     * @generated from protobuf enum value: MAIN_LIST_TIME = 2;
     */
    Mode[Mode["MAIN_LIST_TIME"] = 2] = "MAIN_LIST_TIME";
    /**
     * 按热度
     *
     * @generated from protobuf enum value: MAIN_LIST_HOT = 3;
     */
    Mode[Mode["MAIN_LIST_HOT"] = 3] = "MAIN_LIST_HOT";
})(Mode || (Mode = {}));
/**
 * @generated from protobuf enum bilibili.main.community.reply.v1.SearchItemType
 */
export var SearchItemType;
(function (SearchItemType) {
    /**
     * @generated from protobuf enum value: DEFAULT_ITEM_TYPE = 0;
     */
    SearchItemType[SearchItemType["DEFAULT_ITEM_TYPE"] = 0] = "DEFAULT_ITEM_TYPE";
    /**
     * @generated from protobuf enum value: GOODS = 1;
     */
    SearchItemType[SearchItemType["GOODS"] = 1] = "GOODS";
    /**
     * @generated from protobuf enum value: VIDEO = 2;
     */
    SearchItemType[SearchItemType["VIDEO"] = 2] = "VIDEO";
    /**
     * @generated from protobuf enum value: ARTICLE = 3;
     */
    SearchItemType[SearchItemType["ARTICLE"] = 3] = "ARTICLE";
})(SearchItemType || (SearchItemType = {}));
/**
 * @generated from protobuf enum bilibili.main.community.reply.v1.SearchItemVideoSubType
 */
export var SearchItemVideoSubType;
(function (SearchItemVideoSubType) {
    /**
     * @generated from protobuf enum value: UGC = 0;
     */
    SearchItemVideoSubType[SearchItemVideoSubType["UGC"] = 0] = "UGC";
    /**
     * @generated from protobuf enum value: PGC = 1;
     */
    SearchItemVideoSubType[SearchItemVideoSubType["PGC"] = 1] = "PGC";
})(SearchItemVideoSubType || (SearchItemVideoSubType = {}));
/**
 * @generated from protobuf enum bilibili.main.community.reply.v1.UserCallbackAction
 */
export var UserCallbackAction;
(function (UserCallbackAction) {
    /**
     * @generated from protobuf enum value: Dismiss = 0;
     */
    UserCallbackAction[UserCallbackAction["Dismiss"] = 0] = "Dismiss";
})(UserCallbackAction || (UserCallbackAction = {}));
/**
 * @generated from protobuf enum bilibili.main.community.reply.v1.UserCallbackScene
 */
export var UserCallbackScene;
(function (UserCallbackScene) {
    /**
     * @generated from protobuf enum value: Insert = 0;
     */
    UserCallbackScene[UserCallbackScene["Insert"] = 0] = "Insert";
})(UserCallbackScene || (UserCallbackScene = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Activity$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Activity", [
            { no: 1, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "activity_state", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "activity_placeholder", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.activityId = 0;
        message.activityState = 0;
        message.activityPlaceholder = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 activity_id */ 1:
                    message.activityId = reader.int64().toNumber();
                    break;
                case /* int64 activity_state */ 2:
                    message.activityState = reader.int64().toNumber();
                    break;
                case /* string activity_placeholder */ 3:
                    message.activityPlaceholder = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 activity_id = 1; */
        if (message.activityId !== 0)
            writer.tag(1, WireType.Varint).int64(message.activityId);
        /* int64 activity_state = 2; */
        if (message.activityState !== 0)
            writer.tag(2, WireType.Varint).int64(message.activityState);
        /* string activity_placeholder = 3; */
        if (message.activityPlaceholder !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.activityPlaceholder);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Activity
 */
export const Activity = new Activity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArticleSearchItem$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ArticleSearchItem", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "up_nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "covers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.upNickname = "";
        message.covers = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string up_nickname */ 2:
                    message.upNickname = reader.string();
                    break;
                case /* repeated string covers */ 3:
                    message.covers.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string up_nickname = 2; */
        if (message.upNickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.upNickname);
        /* repeated string covers = 3; */
        for (let i = 0; i < message.covers.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.covers[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ArticleSearchItem
 */
export const ArticleSearchItem = new ArticleSearchItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AtGroup$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.AtGroup", [
            { no: 1, name: "group_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AtItem }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.groupType = 0;
        message.groupName = "";
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 group_type */ 1:
                    message.groupType = reader.int32();
                    break;
                case /* string group_name */ 2:
                    message.groupName = reader.string();
                    break;
                case /* repeated bilibili.main.community.reply.v1.AtItem items */ 3:
                    message.items.push(AtItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 group_type = 1; */
        if (message.groupType !== 0)
            writer.tag(1, WireType.Varint).int32(message.groupType);
        /* string group_name = 2; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* repeated bilibili.main.community.reply.v1.AtItem items = 3; */
        for (let i = 0; i < message.items.length; i++)
            AtItem.internalBinaryWrite(message.items[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.AtGroup
 */
export const AtGroup = new AtGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AtItem$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.AtItem", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "face", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fans", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "official_verify_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mid = 0;
        message.name = "";
        message.face = "";
        message.fans = 0;
        message.officialVerifyType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string face */ 3:
                    message.face = reader.string();
                    break;
                case /* int32 fans */ 4:
                    message.fans = reader.int32();
                    break;
                case /* int32 official_verify_type */ 5:
                    message.officialVerifyType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string face = 3; */
        if (message.face !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.face);
        /* int32 fans = 4; */
        if (message.fans !== 0)
            writer.tag(4, WireType.Varint).int32(message.fans);
        /* int32 official_verify_type = 5; */
        if (message.officialVerifyType !== 0)
            writer.tag(5, WireType.Varint).int32(message.officialVerifyType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.AtItem
 */
export const AtItem = new AtItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AtSearchReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.AtSearchReply", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AtGroup }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.groups = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.main.community.reply.v1.AtGroup groups */ 1:
                    message.groups.push(AtGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.main.community.reply.v1.AtGroup groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            AtGroup.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.AtSearchReply
 */
export const AtSearchReply = new AtSearchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AtSearchReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.AtSearchReq", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "keyword", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mid = 0;
        message.keyword = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* string keyword */ 2:
                    message.keyword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* string keyword = 2; */
        if (message.keyword !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.keyword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.AtSearchReq
 */
export const AtSearchReq = new AtSearchReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CM$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.CM", [
            { no: 1, name: "source_content", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any source_content */ 1:
                    message.sourceContent = Any.internalBinaryRead(reader, reader.uint32(), options, message.sourceContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Any source_content = 1; */
        if (message.sourceContent)
            Any.internalBinaryWrite(message.sourceContent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.CM
 */
export const CM = new CM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Content", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "menber", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Member } },
            { no: 3, name: "emote", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Emote } },
            { no: 4, name: "topic", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Topic } },
            { no: 5, name: "url", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Url } },
            { no: 6, name: "vote", kind: "message", T: () => Vote },
            { no: 7, name: "at_name_to_mid", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ } },
            { no: 8, name: "rich_text", kind: "message", T: () => RichText },
            { no: 9, name: "pictures", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Picture }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.message = "";
        message.menber = {};
        message.emote = {};
        message.topic = {};
        message.url = {};
        message.atNameToMid = {};
        message.pictures = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* map<string, bilibili.main.community.reply.v1.Member> menber */ 2:
                    this.binaryReadMap2(message.menber, reader, options);
                    break;
                case /* map<string, bilibili.main.community.reply.v1.Emote> emote */ 3:
                    this.binaryReadMap3(message.emote, reader, options);
                    break;
                case /* map<string, bilibili.main.community.reply.v1.Topic> topic */ 4:
                    this.binaryReadMap4(message.topic, reader, options);
                    break;
                case /* map<string, bilibili.main.community.reply.v1.Url> url */ 5:
                    this.binaryReadMap5(message.url, reader, options);
                    break;
                case /* bilibili.main.community.reply.v1.Vote vote */ 6:
                    message.vote = Vote.internalBinaryRead(reader, reader.uint32(), options, message.vote);
                    break;
                case /* map<string, int64> at_name_to_mid */ 7:
                    this.binaryReadMap7(message.atNameToMid, reader, options);
                    break;
                case /* bilibili.main.community.reply.v1.RichText rich_text */ 8:
                    message.richText = RichText.internalBinaryRead(reader, reader.uint32(), options, message.richText);
                    break;
                case /* repeated bilibili.main.community.reply.v1.Picture pictures */ 9:
                    message.pictures.push(Picture.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Member.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.main.community.reply.v1.Content.menber");
            }
        }
        map[key ?? ""] = val ?? Member.create();
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Emote.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.main.community.reply.v1.Content.emote");
            }
        }
        map[key ?? ""] = val ?? Emote.create();
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Topic.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.main.community.reply.v1.Content.topic");
            }
        }
        map[key ?? ""] = val ?? Topic.create();
    }
    binaryReadMap5(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Url.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.main.community.reply.v1.Content.url");
            }
        }
        map[key ?? ""] = val ?? Url.create();
    }
    binaryReadMap7(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int64().toNumber();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.main.community.reply.v1.Content.at_name_to_mid");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* map<string, bilibili.main.community.reply.v1.Member> menber = 2; */
        for (let k of globalThis.Object.keys(message.menber)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Member.internalBinaryWrite(message.menber[k], writer, options);
            writer.join().join();
        }
        /* map<string, bilibili.main.community.reply.v1.Emote> emote = 3; */
        for (let k of globalThis.Object.keys(message.emote)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Emote.internalBinaryWrite(message.emote[k], writer, options);
            writer.join().join();
        }
        /* map<string, bilibili.main.community.reply.v1.Topic> topic = 4; */
        for (let k of globalThis.Object.keys(message.topic)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Topic.internalBinaryWrite(message.topic[k], writer, options);
            writer.join().join();
        }
        /* map<string, bilibili.main.community.reply.v1.Url> url = 5; */
        for (let k of globalThis.Object.keys(message.url)) {
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Url.internalBinaryWrite(message.url[k], writer, options);
            writer.join().join();
        }
        /* bilibili.main.community.reply.v1.Vote vote = 6; */
        if (message.vote)
            Vote.internalBinaryWrite(message.vote, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* map<string, int64> at_name_to_mid = 7; */
        for (let k of globalThis.Object.keys(message.atNameToMid))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int64(message.atNameToMid[k]).join();
        /* bilibili.main.community.reply.v1.RichText rich_text = 8; */
        if (message.richText)
            RichText.internalBinaryWrite(message.richText, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.main.community.reply.v1.Picture pictures = 9; */
        for (let i = 0; i < message.pictures.length; i++)
            Picture.internalBinaryWrite(message.pictures[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Content
 */
export const Content = new Content$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Picture$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Picture", [
            { no: 1, name: "img_src", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "img_width", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "img_height", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "img_size", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.imgSrc = "";
        message.imgWidth = 0;
        message.imgHeight = 0;
        message.imgSize = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string img_src */ 1:
                    message.imgSrc = reader.string();
                    break;
                case /* double img_width */ 2:
                    message.imgWidth = reader.double();
                    break;
                case /* double img_height */ 3:
                    message.imgHeight = reader.double();
                    break;
                case /* double img_size */ 4:
                    message.imgSize = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string img_src = 1; */
        if (message.imgSrc !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imgSrc);
        /* double img_width = 2; */
        if (message.imgWidth !== 0)
            writer.tag(2, WireType.Bit64).double(message.imgWidth);
        /* double img_height = 3; */
        if (message.imgHeight !== 0)
            writer.tag(3, WireType.Bit64).double(message.imgHeight);
        /* double img_size = 4; */
        if (message.imgSize !== 0)
            writer.tag(4, WireType.Bit64).double(message.imgSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Picture
 */
export const Picture = new Picture$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CursorReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.CursorReply", [
            { no: 1, name: "next", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "prev", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "isBegin", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "isEnd", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "mode", kind: "enum", T: () => ["bilibili.main.community.reply.v1.Mode", Mode] },
            { no: 6, name: "mode_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.next = 0;
        message.prev = 0;
        message.isBegin = false;
        message.isEnd = false;
        message.mode = 0;
        message.modeText = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 next */ 1:
                    message.next = reader.int64().toNumber();
                    break;
                case /* int64 prev */ 2:
                    message.prev = reader.int64().toNumber();
                    break;
                case /* bool isBegin */ 3:
                    message.isBegin = reader.bool();
                    break;
                case /* bool isEnd */ 4:
                    message.isEnd = reader.bool();
                    break;
                case /* bilibili.main.community.reply.v1.Mode mode */ 5:
                    message.mode = reader.int32();
                    break;
                case /* string mode_text */ 6:
                    message.modeText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 next = 1; */
        if (message.next !== 0)
            writer.tag(1, WireType.Varint).int64(message.next);
        /* int64 prev = 2; */
        if (message.prev !== 0)
            writer.tag(2, WireType.Varint).int64(message.prev);
        /* bool isBegin = 3; */
        if (message.isBegin !== false)
            writer.tag(3, WireType.Varint).bool(message.isBegin);
        /* bool isEnd = 4; */
        if (message.isEnd !== false)
            writer.tag(4, WireType.Varint).bool(message.isEnd);
        /* bilibili.main.community.reply.v1.Mode mode = 5; */
        if (message.mode !== 0)
            writer.tag(5, WireType.Varint).int32(message.mode);
        /* string mode_text = 6; */
        if (message.modeText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.modeText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.CursorReply
 */
export const CursorReply = new CursorReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CursorReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.CursorReq", [
            { no: 1, name: "next", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "prev", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "mode", kind: "enum", T: () => ["bilibili.main.community.reply.v1.Mode", Mode] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.next = 0;
        message.prev = 0;
        message.mode = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 next */ 1:
                    message.next = reader.int64().toNumber();
                    break;
                case /* int64 prev */ 2:
                    message.prev = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.Mode mode */ 4:
                    message.mode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 next = 1; */
        if (message.next !== 0)
            writer.tag(1, WireType.Varint).int64(message.next);
        /* int64 prev = 2; */
        if (message.prev !== 0)
            writer.tag(2, WireType.Varint).int64(message.prev);
        /* bilibili.main.community.reply.v1.Mode mode = 4; */
        if (message.mode !== 0)
            writer.tag(4, WireType.Varint).int32(message.mode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.CursorReq
 */
export const CursorReq = new CursorReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetailListReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.DetailListReply", [
            { no: 1, name: "cursor", kind: "message", T: () => CursorReply },
            { no: 2, name: "subject_control", kind: "message", T: () => SubjectControl },
            { no: 3, name: "root", kind: "message", T: () => ReplyInfo },
            { no: 4, name: "activity", kind: "message", T: () => Activity },
            { no: 5, name: "likes", kind: "message", T: () => LikeInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.CursorReply cursor */ 1:
                    message.cursor = CursorReply.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                case /* bilibili.main.community.reply.v1.SubjectControl subject_control */ 2:
                    message.subjectControl = SubjectControl.internalBinaryRead(reader, reader.uint32(), options, message.subjectControl);
                    break;
                case /* bilibili.main.community.reply.v1.ReplyInfo root */ 3:
                    message.root = ReplyInfo.internalBinaryRead(reader, reader.uint32(), options, message.root);
                    break;
                case /* bilibili.main.community.reply.v1.Activity activity */ 4:
                    message.activity = Activity.internalBinaryRead(reader, reader.uint32(), options, message.activity);
                    break;
                case /* bilibili.main.community.reply.v1.LikeInfo likes */ 5:
                    message.likes = LikeInfo.internalBinaryRead(reader, reader.uint32(), options, message.likes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.CursorReply cursor = 1; */
        if (message.cursor)
            CursorReply.internalBinaryWrite(message.cursor, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.SubjectControl subject_control = 2; */
        if (message.subjectControl)
            SubjectControl.internalBinaryWrite(message.subjectControl, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ReplyInfo root = 3; */
        if (message.root)
            ReplyInfo.internalBinaryWrite(message.root, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Activity activity = 4; */
        if (message.activity)
            Activity.internalBinaryWrite(message.activity, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.LikeInfo likes = 5; */
        if (message.likes)
            LikeInfo.internalBinaryWrite(message.likes, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.DetailListReply
 */
export const DetailListReply = new DetailListReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetailListReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.DetailListReq", [
            { no: 1, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "root", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "rpid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "cursor", kind: "message", T: () => CursorReq },
            { no: 6, name: "scene", kind: "enum", T: () => ["bilibili.main.community.reply.v1.DetailListScene", DetailListScene] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.oid = 0;
        message.type = 0;
        message.root = 0;
        message.rpid = 0;
        message.scene = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 oid */ 1:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 2:
                    message.type = reader.int64().toNumber();
                    break;
                case /* int64 root */ 3:
                    message.root = reader.int64().toNumber();
                    break;
                case /* int64 rpid */ 4:
                    message.rpid = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.CursorReq cursor */ 5:
                    message.cursor = CursorReq.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                case /* bilibili.main.community.reply.v1.DetailListScene scene */ 6:
                    message.scene = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 oid = 1; */
        if (message.oid !== 0)
            writer.tag(1, WireType.Varint).int64(message.oid);
        /* int64 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int64(message.type);
        /* int64 root = 3; */
        if (message.root !== 0)
            writer.tag(3, WireType.Varint).int64(message.root);
        /* int64 rpid = 4; */
        if (message.rpid !== 0)
            writer.tag(4, WireType.Varint).int64(message.rpid);
        /* bilibili.main.community.reply.v1.CursorReq cursor = 5; */
        if (message.cursor)
            CursorReq.internalBinaryWrite(message.cursor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.DetailListScene scene = 6; */
        if (message.scene !== 0)
            writer.tag(6, WireType.Varint).int32(message.scene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.DetailListReq
 */
export const DetailListReq = new DetailListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DialogListReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.DialogListReply", [
            { no: 1, name: "cursor", kind: "message", T: () => CursorReply },
            { no: 2, name: "subject_control", kind: "message", T: () => SubjectControl },
            { no: 3, name: "replies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReplyInfo },
            { no: 4, name: "activity", kind: "message", T: () => Activity }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.replies = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.CursorReply cursor */ 1:
                    message.cursor = CursorReply.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                case /* bilibili.main.community.reply.v1.SubjectControl subject_control */ 2:
                    message.subjectControl = SubjectControl.internalBinaryRead(reader, reader.uint32(), options, message.subjectControl);
                    break;
                case /* repeated bilibili.main.community.reply.v1.ReplyInfo replies */ 3:
                    message.replies.push(ReplyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.main.community.reply.v1.Activity activity */ 4:
                    message.activity = Activity.internalBinaryRead(reader, reader.uint32(), options, message.activity);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.CursorReply cursor = 1; */
        if (message.cursor)
            CursorReply.internalBinaryWrite(message.cursor, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.SubjectControl subject_control = 2; */
        if (message.subjectControl)
            SubjectControl.internalBinaryWrite(message.subjectControl, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.main.community.reply.v1.ReplyInfo replies = 3; */
        for (let i = 0; i < message.replies.length; i++)
            ReplyInfo.internalBinaryWrite(message.replies[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Activity activity = 4; */
        if (message.activity)
            Activity.internalBinaryWrite(message.activity, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.DialogListReply
 */
export const DialogListReply = new DialogListReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DialogListReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.DialogListReq", [
            { no: 1, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "root", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "rpid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "cursor", kind: "message", T: () => CursorReq }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.oid = 0;
        message.type = 0;
        message.root = 0;
        message.rpid = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 oid */ 1:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 2:
                    message.type = reader.int64().toNumber();
                    break;
                case /* int64 root */ 3:
                    message.root = reader.int64().toNumber();
                    break;
                case /* int64 rpid */ 4:
                    message.rpid = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.CursorReq cursor */ 5:
                    message.cursor = CursorReq.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 oid = 1; */
        if (message.oid !== 0)
            writer.tag(1, WireType.Varint).int64(message.oid);
        /* int64 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int64(message.type);
        /* int64 root = 3; */
        if (message.root !== 0)
            writer.tag(3, WireType.Varint).int64(message.root);
        /* int64 rpid = 4; */
        if (message.rpid !== 0)
            writer.tag(4, WireType.Varint).int64(message.rpid);
        /* bilibili.main.community.reply.v1.CursorReq cursor = 5; */
        if (message.cursor)
            CursorReq.internalBinaryWrite(message.cursor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.DialogListReq
 */
export const DialogListReq = new DialogListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Effects$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Effects", [
            { no: 1, name: "preloading", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.preloading = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string preloading */ 1:
                    message.preloading = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string preloading = 1; */
        if (message.preloading !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.preloading);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Effects
 */
export const Effects = new Effects$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Emote$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Emote", [
            { no: 1, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "jump_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "package_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "gif_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.size = 0;
        message.url = "";
        message.jumpUrl = "";
        message.jumpTitle = "";
        message.id = 0;
        message.packageId = 0;
        message.gifUrl = "";
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 size */ 1:
                    message.size = reader.int64().toNumber();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string jump_url */ 3:
                    message.jumpUrl = reader.string();
                    break;
                case /* string jump_title */ 4:
                    message.jumpTitle = reader.string();
                    break;
                case /* int64 id */ 5:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 package_id */ 6:
                    message.packageId = reader.int64().toNumber();
                    break;
                case /* string gif_url */ 7:
                    message.gifUrl = reader.string();
                    break;
                case /* string text */ 8:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 size = 1; */
        if (message.size !== 0)
            writer.tag(1, WireType.Varint).int64(message.size);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string jump_url = 3; */
        if (message.jumpUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.jumpUrl);
        /* string jump_title = 4; */
        if (message.jumpTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.jumpTitle);
        /* int64 id = 5; */
        if (message.id !== 0)
            writer.tag(5, WireType.Varint).int64(message.id);
        /* int64 package_id = 6; */
        if (message.packageId !== 0)
            writer.tag(6, WireType.Varint).int64(message.packageId);
        /* string gif_url = 7; */
        if (message.gifUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.gifUrl);
        /* string text = 8; */
        if (message.text !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Emote
 */
export const Emote = new Emote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GoodsSearchItem$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.GoodsSearchItem", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "income", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.name = "";
        message.price = "";
        message.income = "";
        message.img = "";
        message.label = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string price */ 3:
                    message.price = reader.string();
                    break;
                case /* string income */ 4:
                    message.income = reader.string();
                    break;
                case /* string img */ 5:
                    message.img = reader.string();
                    break;
                case /* string label */ 6:
                    message.label = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string price = 3; */
        if (message.price !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.price);
        /* string income = 4; */
        if (message.income !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.income);
        /* string img = 5; */
        if (message.img !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.img);
        /* string label = 6; */
        if (message.label !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.label);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.GoodsSearchItem
 */
export const GoodsSearchItem = new GoodsSearchItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeInfo$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.LikeInfo", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LikeInfo_Item },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.items = [];
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.main.community.reply.v1.LikeInfo.Item items */ 1:
                    message.items.push(LikeInfo_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.main.community.reply.v1.LikeInfo.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            LikeInfo_Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.LikeInfo
 */
export const LikeInfo = new LikeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeInfo_Item$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.LikeInfo.Item", [
            { no: 1, name: "member", kind: "message", T: () => Member }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.Member member */ 1:
                    message.member = Member.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.Member member = 1; */
        if (message.member)
            Member.internalBinaryWrite(message.member, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.LikeInfo.Item
 */
export const LikeInfo_Item = new LikeInfo_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Lottery$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Lottery", [
            { no: 1, name: "lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "lottery_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "lottery_mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "lottery_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "ctime", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "content", kind: "message", T: () => Content },
            { no: 9, name: "member", kind: "message", T: () => Member },
            { no: 10, name: "reply_control", kind: "message", T: () => ReplyControl }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.lotteryId = 0;
        message.lotteryStatus = 0;
        message.lotteryMid = 0;
        message.lotteryTime = 0;
        message.oid = 0;
        message.type = 0;
        message.ctime = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 lottery_id */ 1:
                    message.lotteryId = reader.int64().toNumber();
                    break;
                case /* int64 lottery_status */ 2:
                    message.lotteryStatus = reader.int64().toNumber();
                    break;
                case /* int64 lottery_mid */ 3:
                    message.lotteryMid = reader.int64().toNumber();
                    break;
                case /* int64 lottery_time */ 4:
                    message.lotteryTime = reader.int64().toNumber();
                    break;
                case /* int64 oid */ 5:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 6:
                    message.type = reader.int64().toNumber();
                    break;
                case /* int64 ctime */ 7:
                    message.ctime = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.Content content */ 8:
                    message.content = Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* bilibili.main.community.reply.v1.Member member */ 9:
                    message.member = Member.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                case /* bilibili.main.community.reply.v1.ReplyControl reply_control */ 10:
                    message.replyControl = ReplyControl.internalBinaryRead(reader, reader.uint32(), options, message.replyControl);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 lottery_id = 1; */
        if (message.lotteryId !== 0)
            writer.tag(1, WireType.Varint).int64(message.lotteryId);
        /* int64 lottery_status = 2; */
        if (message.lotteryStatus !== 0)
            writer.tag(2, WireType.Varint).int64(message.lotteryStatus);
        /* int64 lottery_mid = 3; */
        if (message.lotteryMid !== 0)
            writer.tag(3, WireType.Varint).int64(message.lotteryMid);
        /* int64 lottery_time = 4; */
        if (message.lotteryTime !== 0)
            writer.tag(4, WireType.Varint).int64(message.lotteryTime);
        /* int64 oid = 5; */
        if (message.oid !== 0)
            writer.tag(5, WireType.Varint).int64(message.oid);
        /* int64 type = 6; */
        if (message.type !== 0)
            writer.tag(6, WireType.Varint).int64(message.type);
        /* int64 ctime = 7; */
        if (message.ctime !== 0)
            writer.tag(7, WireType.Varint).int64(message.ctime);
        /* bilibili.main.community.reply.v1.Content content = 8; */
        if (message.content)
            Content.internalBinaryWrite(message.content, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Member member = 9; */
        if (message.member)
            Member.internalBinaryWrite(message.member, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ReplyControl reply_control = 10; */
        if (message.replyControl)
            ReplyControl.internalBinaryWrite(message.replyControl, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Lottery
 */
export const Lottery = new Lottery$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MainListReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MainListReply", [
            { no: 1, name: "cursor", kind: "message", T: () => CursorReply },
            { no: 2, name: "replies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReplyInfo },
            { no: 3, name: "subject_control", kind: "message", T: () => SubjectControl },
            { no: 4, name: "up_top", kind: "message", T: () => ReplyInfo },
            { no: 5, name: "admin_top", kind: "message", T: () => ReplyInfo },
            { no: 6, name: "vote_top", kind: "message", T: () => ReplyInfo },
            { no: 7, name: "notice", kind: "message", T: () => Notice },
            { no: 8, name: "lottery", kind: "message", T: () => Lottery },
            { no: 9, name: "activity", kind: "message", T: () => Activity },
            { no: 10, name: "up_selection", kind: "message", T: () => UpSelection },
            { no: 11, name: "cm", kind: "message", T: () => CM },
            { no: 12, name: "effects", kind: "message", T: () => Effects },
            { no: 13, name: "operation", kind: "message", T: () => Operation },
            { no: 14, name: "top_replies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReplyInfo },
            { no: 15, name: "qoe", kind: "message", T: () => QoeInfo },
            { no: 16, name: "callbacks", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.replies = [];
        message.topReplies = [];
        message.callbacks = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.CursorReply cursor */ 1:
                    message.cursor = CursorReply.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                case /* repeated bilibili.main.community.reply.v1.ReplyInfo replies */ 2:
                    message.replies.push(ReplyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.main.community.reply.v1.SubjectControl subject_control */ 3:
                    message.subjectControl = SubjectControl.internalBinaryRead(reader, reader.uint32(), options, message.subjectControl);
                    break;
                case /* bilibili.main.community.reply.v1.ReplyInfo up_top */ 4:
                    message.upTop = ReplyInfo.internalBinaryRead(reader, reader.uint32(), options, message.upTop);
                    break;
                case /* bilibili.main.community.reply.v1.ReplyInfo admin_top */ 5:
                    message.adminTop = ReplyInfo.internalBinaryRead(reader, reader.uint32(), options, message.adminTop);
                    break;
                case /* bilibili.main.community.reply.v1.ReplyInfo vote_top */ 6:
                    message.voteTop = ReplyInfo.internalBinaryRead(reader, reader.uint32(), options, message.voteTop);
                    break;
                case /* bilibili.main.community.reply.v1.Notice notice */ 7:
                    message.notice = Notice.internalBinaryRead(reader, reader.uint32(), options, message.notice);
                    break;
                case /* bilibili.main.community.reply.v1.Lottery lottery */ 8:
                    message.lottery = Lottery.internalBinaryRead(reader, reader.uint32(), options, message.lottery);
                    break;
                case /* bilibili.main.community.reply.v1.Activity activity */ 9:
                    message.activity = Activity.internalBinaryRead(reader, reader.uint32(), options, message.activity);
                    break;
                case /* bilibili.main.community.reply.v1.UpSelection up_selection */ 10:
                    message.upSelection = UpSelection.internalBinaryRead(reader, reader.uint32(), options, message.upSelection);
                    break;
                case /* bilibili.main.community.reply.v1.CM cm */ 11:
                    message.cm = CM.internalBinaryRead(reader, reader.uint32(), options, message.cm);
                    break;
                case /* bilibili.main.community.reply.v1.Effects effects */ 12:
                    message.effects = Effects.internalBinaryRead(reader, reader.uint32(), options, message.effects);
                    break;
                case /* bilibili.main.community.reply.v1.Operation operation */ 13:
                    message.operation = Operation.internalBinaryRead(reader, reader.uint32(), options, message.operation);
                    break;
                case /* repeated bilibili.main.community.reply.v1.ReplyInfo top_replies */ 14:
                    message.topReplies.push(ReplyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.main.community.reply.v1.QoeInfo qoe */ 15:
                    message.qoe = QoeInfo.internalBinaryRead(reader, reader.uint32(), options, message.qoe);
                    break;
                case /* map<string, int32> callbacks */ 16:
                    this.binaryReadMap16(message.callbacks, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap16(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.main.community.reply.v1.MainListReply.callbacks");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.CursorReply cursor = 1; */
        if (message.cursor)
            CursorReply.internalBinaryWrite(message.cursor, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.main.community.reply.v1.ReplyInfo replies = 2; */
        for (let i = 0; i < message.replies.length; i++)
            ReplyInfo.internalBinaryWrite(message.replies[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.SubjectControl subject_control = 3; */
        if (message.subjectControl)
            SubjectControl.internalBinaryWrite(message.subjectControl, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ReplyInfo up_top = 4; */
        if (message.upTop)
            ReplyInfo.internalBinaryWrite(message.upTop, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ReplyInfo admin_top = 5; */
        if (message.adminTop)
            ReplyInfo.internalBinaryWrite(message.adminTop, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ReplyInfo vote_top = 6; */
        if (message.voteTop)
            ReplyInfo.internalBinaryWrite(message.voteTop, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Notice notice = 7; */
        if (message.notice)
            Notice.internalBinaryWrite(message.notice, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Lottery lottery = 8; */
        if (message.lottery)
            Lottery.internalBinaryWrite(message.lottery, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Activity activity = 9; */
        if (message.activity)
            Activity.internalBinaryWrite(message.activity, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.UpSelection up_selection = 10; */
        if (message.upSelection)
            UpSelection.internalBinaryWrite(message.upSelection, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.CM cm = 11; */
        if (message.cm)
            CM.internalBinaryWrite(message.cm, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Effects effects = 12; */
        if (message.effects)
            Effects.internalBinaryWrite(message.effects, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Operation operation = 13; */
        if (message.operation)
            Operation.internalBinaryWrite(message.operation, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.main.community.reply.v1.ReplyInfo top_replies = 14; */
        for (let i = 0; i < message.topReplies.length; i++)
            ReplyInfo.internalBinaryWrite(message.topReplies[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.QoeInfo qoe = 15; */
        if (message.qoe)
            QoeInfo.internalBinaryWrite(message.qoe, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* map<string, int32> callbacks = 16; */
        for (let k of globalThis.Object.keys(message.callbacks))
            writer.tag(16, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.callbacks[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MainListReply
 */
export const MainListReply = new MainListReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MainListReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MainListReq", [
            { no: 1, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "cursor", kind: "message", T: () => CursorReq },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ad_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "rpid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "seek_rpid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "filter_tag_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.oid = 0;
        message.type = 0;
        message.extra = "";
        message.adExtra = "";
        message.rpid = 0;
        message.seekRpid = 0;
        message.filterTagName = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 oid */ 1:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 2:
                    message.type = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.CursorReq cursor */ 3:
                    message.cursor = CursorReq.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                case /* string ad_extra */ 5:
                    message.adExtra = reader.string();
                    break;
                case /* int64 rpid */ 6:
                    message.rpid = reader.int64().toNumber();
                    break;
                case /* int64 seek_rpid */ 7:
                    message.seekRpid = reader.int64().toNumber();
                    break;
                case /* string filter_tag_name */ 8:
                    message.filterTagName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 oid = 1; */
        if (message.oid !== 0)
            writer.tag(1, WireType.Varint).int64(message.oid);
        /* int64 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int64(message.type);
        /* bilibili.main.community.reply.v1.CursorReq cursor = 3; */
        if (message.cursor)
            CursorReq.internalBinaryWrite(message.cursor, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        /* string ad_extra = 5; */
        if (message.adExtra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.adExtra);
        /* int64 rpid = 6; */
        if (message.rpid !== 0)
            writer.tag(6, WireType.Varint).int64(message.rpid);
        /* int64 seek_rpid = 7; */
        if (message.seekRpid !== 0)
            writer.tag(7, WireType.Varint).int64(message.seekRpid);
        /* string filter_tag_name = 8; */
        if (message.filterTagName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.filterTagName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MainListReq
 */
export const MainListReq = new MainListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Member$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Member", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sex", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "face", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "official_verify_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "vip_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "vip_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "vip_theme_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "vip_label_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "garb_pendant_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "garb_card_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "garb_card_image_with_focus", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "garb_card_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "garb_card_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "garb_card_fan_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "garb_card_is_fan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "fans_medal_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "fans_medal_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 20, name: "fans_medal_color", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 21, name: "vip_nickname_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "vip_avatar_subscript", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "vip_label_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "vip_label_theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "fans_medal_color_end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 26, name: "fans_medal_color_border", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 27, name: "fans_medal_color_name", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 28, name: "fans_medal_color_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 29, name: "fans_guard_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 30, name: "face_nft", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "face_nft_new", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "is_senior_member", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 33, name: "nft_interaction", kind: "message", T: () => Member_NftInteraction },
            { no: 34, name: "fans_guard_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 35, name: "fans_honor_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mid = 0;
        message.name = "";
        message.sex = "";
        message.face = "";
        message.level = 0;
        message.officialVerifyType = 0;
        message.vipType = 0;
        message.vipStatus = 0;
        message.vipThemeType = 0;
        message.vipLabelPath = "";
        message.garbPendantImage = "";
        message.garbCardImage = "";
        message.garbCardImageWithFocus = "";
        message.garbCardJumpUrl = "";
        message.garbCardNumber = "";
        message.garbCardFanColor = "";
        message.garbCardIsFan = false;
        message.fansMedalName = "";
        message.fansMedalLevel = 0;
        message.fansMedalColor = 0;
        message.vipNicknameColor = "";
        message.vipAvatarSubscript = 0;
        message.vipLabelText = "";
        message.vipLabelTheme = "";
        message.fansMedalColorEnd = 0;
        message.fansMedalColorBorder = 0;
        message.fansMedalColorName = 0;
        message.fansMedalColorLevel = 0;
        message.fansGuardLevel = 0;
        message.faceNft = 0;
        message.faceNftNew = 0;
        message.isSeniorMember = 0;
        message.fansGuardIcon = "";
        message.fansHonorIcon = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string sex */ 3:
                    message.sex = reader.string();
                    break;
                case /* string face */ 4:
                    message.face = reader.string();
                    break;
                case /* int64 level */ 5:
                    message.level = reader.int64().toNumber();
                    break;
                case /* int64 official_verify_type */ 6:
                    message.officialVerifyType = reader.int64().toNumber();
                    break;
                case /* int64 vip_type */ 7:
                    message.vipType = reader.int64().toNumber();
                    break;
                case /* int64 vip_status */ 8:
                    message.vipStatus = reader.int64().toNumber();
                    break;
                case /* int64 vip_theme_type */ 9:
                    message.vipThemeType = reader.int64().toNumber();
                    break;
                case /* string vip_label_path */ 10:
                    message.vipLabelPath = reader.string();
                    break;
                case /* string garb_pendant_image */ 11:
                    message.garbPendantImage = reader.string();
                    break;
                case /* string garb_card_image */ 12:
                    message.garbCardImage = reader.string();
                    break;
                case /* string garb_card_image_with_focus */ 13:
                    message.garbCardImageWithFocus = reader.string();
                    break;
                case /* string garb_card_jump_url */ 14:
                    message.garbCardJumpUrl = reader.string();
                    break;
                case /* string garb_card_number */ 15:
                    message.garbCardNumber = reader.string();
                    break;
                case /* string garb_card_fan_color */ 16:
                    message.garbCardFanColor = reader.string();
                    break;
                case /* bool garb_card_is_fan */ 17:
                    message.garbCardIsFan = reader.bool();
                    break;
                case /* string fans_medal_name */ 18:
                    message.fansMedalName = reader.string();
                    break;
                case /* int64 fans_medal_level */ 19:
                    message.fansMedalLevel = reader.int64().toNumber();
                    break;
                case /* int64 fans_medal_color */ 20:
                    message.fansMedalColor = reader.int64().toNumber();
                    break;
                case /* string vip_nickname_color */ 21:
                    message.vipNicknameColor = reader.string();
                    break;
                case /* int32 vip_avatar_subscript */ 22:
                    message.vipAvatarSubscript = reader.int32();
                    break;
                case /* string vip_label_text */ 23:
                    message.vipLabelText = reader.string();
                    break;
                case /* string vip_label_theme */ 24:
                    message.vipLabelTheme = reader.string();
                    break;
                case /* int64 fans_medal_color_end */ 25:
                    message.fansMedalColorEnd = reader.int64().toNumber();
                    break;
                case /* int64 fans_medal_color_border */ 26:
                    message.fansMedalColorBorder = reader.int64().toNumber();
                    break;
                case /* int64 fans_medal_color_name */ 27:
                    message.fansMedalColorName = reader.int64().toNumber();
                    break;
                case /* int64 fans_medal_color_level */ 28:
                    message.fansMedalColorLevel = reader.int64().toNumber();
                    break;
                case /* int64 fans_guard_level */ 29:
                    message.fansGuardLevel = reader.int64().toNumber();
                    break;
                case /* int32 face_nft */ 30:
                    message.faceNft = reader.int32();
                    break;
                case /* int32 face_nft_new */ 31:
                    message.faceNftNew = reader.int32();
                    break;
                case /* int32 is_senior_member */ 32:
                    message.isSeniorMember = reader.int32();
                    break;
                case /* bilibili.main.community.reply.v1.Member.NftInteraction nft_interaction */ 33:
                    message.nftInteraction = Member_NftInteraction.internalBinaryRead(reader, reader.uint32(), options, message.nftInteraction);
                    break;
                case /* string fans_guard_icon */ 34:
                    message.fansGuardIcon = reader.string();
                    break;
                case /* string fans_honor_icon */ 35:
                    message.fansHonorIcon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string sex = 3; */
        if (message.sex !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sex);
        /* string face = 4; */
        if (message.face !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.face);
        /* int64 level = 5; */
        if (message.level !== 0)
            writer.tag(5, WireType.Varint).int64(message.level);
        /* int64 official_verify_type = 6; */
        if (message.officialVerifyType !== 0)
            writer.tag(6, WireType.Varint).int64(message.officialVerifyType);
        /* int64 vip_type = 7; */
        if (message.vipType !== 0)
            writer.tag(7, WireType.Varint).int64(message.vipType);
        /* int64 vip_status = 8; */
        if (message.vipStatus !== 0)
            writer.tag(8, WireType.Varint).int64(message.vipStatus);
        /* int64 vip_theme_type = 9; */
        if (message.vipThemeType !== 0)
            writer.tag(9, WireType.Varint).int64(message.vipThemeType);
        /* string vip_label_path = 10; */
        if (message.vipLabelPath !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.vipLabelPath);
        /* string garb_pendant_image = 11; */
        if (message.garbPendantImage !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.garbPendantImage);
        /* string garb_card_image = 12; */
        if (message.garbCardImage !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.garbCardImage);
        /* string garb_card_image_with_focus = 13; */
        if (message.garbCardImageWithFocus !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.garbCardImageWithFocus);
        /* string garb_card_jump_url = 14; */
        if (message.garbCardJumpUrl !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.garbCardJumpUrl);
        /* string garb_card_number = 15; */
        if (message.garbCardNumber !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.garbCardNumber);
        /* string garb_card_fan_color = 16; */
        if (message.garbCardFanColor !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.garbCardFanColor);
        /* bool garb_card_is_fan = 17; */
        if (message.garbCardIsFan !== false)
            writer.tag(17, WireType.Varint).bool(message.garbCardIsFan);
        /* string fans_medal_name = 18; */
        if (message.fansMedalName !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.fansMedalName);
        /* int64 fans_medal_level = 19; */
        if (message.fansMedalLevel !== 0)
            writer.tag(19, WireType.Varint).int64(message.fansMedalLevel);
        /* int64 fans_medal_color = 20; */
        if (message.fansMedalColor !== 0)
            writer.tag(20, WireType.Varint).int64(message.fansMedalColor);
        /* string vip_nickname_color = 21; */
        if (message.vipNicknameColor !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.vipNicknameColor);
        /* int32 vip_avatar_subscript = 22; */
        if (message.vipAvatarSubscript !== 0)
            writer.tag(22, WireType.Varint).int32(message.vipAvatarSubscript);
        /* string vip_label_text = 23; */
        if (message.vipLabelText !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.vipLabelText);
        /* string vip_label_theme = 24; */
        if (message.vipLabelTheme !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.vipLabelTheme);
        /* int64 fans_medal_color_end = 25; */
        if (message.fansMedalColorEnd !== 0)
            writer.tag(25, WireType.Varint).int64(message.fansMedalColorEnd);
        /* int64 fans_medal_color_border = 26; */
        if (message.fansMedalColorBorder !== 0)
            writer.tag(26, WireType.Varint).int64(message.fansMedalColorBorder);
        /* int64 fans_medal_color_name = 27; */
        if (message.fansMedalColorName !== 0)
            writer.tag(27, WireType.Varint).int64(message.fansMedalColorName);
        /* int64 fans_medal_color_level = 28; */
        if (message.fansMedalColorLevel !== 0)
            writer.tag(28, WireType.Varint).int64(message.fansMedalColorLevel);
        /* int64 fans_guard_level = 29; */
        if (message.fansGuardLevel !== 0)
            writer.tag(29, WireType.Varint).int64(message.fansGuardLevel);
        /* int32 face_nft = 30; */
        if (message.faceNft !== 0)
            writer.tag(30, WireType.Varint).int32(message.faceNft);
        /* int32 face_nft_new = 31; */
        if (message.faceNftNew !== 0)
            writer.tag(31, WireType.Varint).int32(message.faceNftNew);
        /* int32 is_senior_member = 32; */
        if (message.isSeniorMember !== 0)
            writer.tag(32, WireType.Varint).int32(message.isSeniorMember);
        /* bilibili.main.community.reply.v1.Member.NftInteraction nft_interaction = 33; */
        if (message.nftInteraction)
            Member_NftInteraction.internalBinaryWrite(message.nftInteraction, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* string fans_guard_icon = 34; */
        if (message.fansGuardIcon !== "")
            writer.tag(34, WireType.LengthDelimited).string(message.fansGuardIcon);
        /* string fans_honor_icon = 35; */
        if (message.fansHonorIcon !== "")
            writer.tag(35, WireType.LengthDelimited).string(message.fansHonorIcon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Member
 */
export const Member = new Member$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Member_Region$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Member.Region", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.main.community.reply.v1.Member.RegionType", Member_RegionType] },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "show_status", kind: "enum", T: () => ["bilibili.main.community.reply.v1.Member.ShowStatus", Member_ShowStatus] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.icon = "";
        message.showStatus = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.Member.RegionType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                case /* bilibili.main.community.reply.v1.Member.ShowStatus show_status */ 3:
                    message.showStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.Member.RegionType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        /* bilibili.main.community.reply.v1.Member.ShowStatus show_status = 3; */
        if (message.showStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.showStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Member.Region
 */
export const Member_Region = new Member_Region$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Member_NftInteraction$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Member.NftInteraction", [
            { no: 1, name: "itype", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "nft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "region", kind: "message", T: () => Member_Region }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.itype = "";
        message.metadataUrl = "";
        message.nftId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string itype */ 1:
                    message.itype = reader.string();
                    break;
                case /* string metadata_url */ 2:
                    message.metadataUrl = reader.string();
                    break;
                case /* string nft_id */ 3:
                    message.nftId = reader.string();
                    break;
                case /* bilibili.main.community.reply.v1.Member.Region region */ 4:
                    message.region = Member_Region.internalBinaryRead(reader, reader.uint32(), options, message.region);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string itype = 1; */
        if (message.itype !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itype);
        /* string metadata_url = 2; */
        if (message.metadataUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.metadataUrl);
        /* string nft_id = 3; */
        if (message.nftId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nftId);
        /* bilibili.main.community.reply.v1.Member.Region region = 4; */
        if (message.region)
            Member_Region.internalBinaryWrite(message.region, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Member.NftInteraction
 */
export const Member_NftInteraction = new Member_NftInteraction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2", [
            { no: 1, name: "basic", kind: "message", T: () => MemberV2_Basic },
            { no: 2, name: "official", kind: "message", T: () => MemberV2_Official },
            { no: 3, name: "vip", kind: "message", T: () => MemberV2_Vip },
            { no: 4, name: "garb", kind: "message", T: () => MemberV2_Garb },
            { no: 5, name: "medal", kind: "message", T: () => MemberV2_Medal },
            { no: 6, name: "nft", kind: "message", T: () => MemberV2_Nft },
            { no: 7, name: "senior", kind: "message", T: () => MemberV2_Senior },
            { no: 8, name: "contractor", kind: "message", T: () => MemberV2_Contractor }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.MemberV2.Basic basic */ 1:
                    message.basic = MemberV2_Basic.internalBinaryRead(reader, reader.uint32(), options, message.basic);
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.Official official */ 2:
                    message.official = MemberV2_Official.internalBinaryRead(reader, reader.uint32(), options, message.official);
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.Vip vip */ 3:
                    message.vip = MemberV2_Vip.internalBinaryRead(reader, reader.uint32(), options, message.vip);
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.Garb garb */ 4:
                    message.garb = MemberV2_Garb.internalBinaryRead(reader, reader.uint32(), options, message.garb);
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.Medal medal */ 5:
                    message.medal = MemberV2_Medal.internalBinaryRead(reader, reader.uint32(), options, message.medal);
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.Nft nft */ 6:
                    message.nft = MemberV2_Nft.internalBinaryRead(reader, reader.uint32(), options, message.nft);
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.Senior senior */ 7:
                    message.senior = MemberV2_Senior.internalBinaryRead(reader, reader.uint32(), options, message.senior);
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.Contractor contractor */ 8:
                    message.contractor = MemberV2_Contractor.internalBinaryRead(reader, reader.uint32(), options, message.contractor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.MemberV2.Basic basic = 1; */
        if (message.basic)
            MemberV2_Basic.internalBinaryWrite(message.basic, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.MemberV2.Official official = 2; */
        if (message.official)
            MemberV2_Official.internalBinaryWrite(message.official, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.MemberV2.Vip vip = 3; */
        if (message.vip)
            MemberV2_Vip.internalBinaryWrite(message.vip, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.MemberV2.Garb garb = 4; */
        if (message.garb)
            MemberV2_Garb.internalBinaryWrite(message.garb, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.MemberV2.Medal medal = 5; */
        if (message.medal)
            MemberV2_Medal.internalBinaryWrite(message.medal, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.MemberV2.Nft nft = 6; */
        if (message.nft)
            MemberV2_Nft.internalBinaryWrite(message.nft, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.MemberV2.Senior senior = 7; */
        if (message.senior)
            MemberV2_Senior.internalBinaryWrite(message.senior, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.MemberV2.Contractor contractor = 8; */
        if (message.contractor)
            MemberV2_Contractor.internalBinaryWrite(message.contractor, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2
 */
export const MemberV2 = new MemberV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Basic$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Basic", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sex", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "face", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mid = 0;
        message.name = "";
        message.sex = "";
        message.face = "";
        message.level = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string sex */ 3:
                    message.sex = reader.string();
                    break;
                case /* string face */ 4:
                    message.face = reader.string();
                    break;
                case /* int64 level */ 5:
                    message.level = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string sex = 3; */
        if (message.sex !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sex);
        /* string face = 4; */
        if (message.face !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.face);
        /* int64 level = 5; */
        if (message.level !== 0)
            writer.tag(5, WireType.Varint).int64(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Basic
 */
export const MemberV2_Basic = new MemberV2_Basic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Official$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Official", [
            { no: 1, name: "verify_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.verifyType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 verify_type */ 1:
                    message.verifyType = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 verify_type = 1; */
        if (message.verifyType !== 0)
            writer.tag(1, WireType.Varint).int64(message.verifyType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Official
 */
export const MemberV2_Official = new MemberV2_Official$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Vip$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Vip", [
            { no: 1, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "theme_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "label_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "nickname_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "avatar_subscript", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "label_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "vip_label_theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.status = 0;
        message.themeType = 0;
        message.labelPath = "";
        message.nicknameColor = "";
        message.avatarSubscript = 0;
        message.labelText = "";
        message.vipLabelTheme = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 type */ 1:
                    message.type = reader.int64().toNumber();
                    break;
                case /* int64 status */ 2:
                    message.status = reader.int64().toNumber();
                    break;
                case /* int64 theme_type */ 3:
                    message.themeType = reader.int64().toNumber();
                    break;
                case /* string label_path */ 4:
                    message.labelPath = reader.string();
                    break;
                case /* string nickname_color */ 5:
                    message.nicknameColor = reader.string();
                    break;
                case /* int32 avatar_subscript */ 6:
                    message.avatarSubscript = reader.int32();
                    break;
                case /* string label_text */ 7:
                    message.labelText = reader.string();
                    break;
                case /* string vip_label_theme */ 8:
                    message.vipLabelTheme = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int64(message.type);
        /* int64 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int64(message.status);
        /* int64 theme_type = 3; */
        if (message.themeType !== 0)
            writer.tag(3, WireType.Varint).int64(message.themeType);
        /* string label_path = 4; */
        if (message.labelPath !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.labelPath);
        /* string nickname_color = 5; */
        if (message.nicknameColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.nicknameColor);
        /* int32 avatar_subscript = 6; */
        if (message.avatarSubscript !== 0)
            writer.tag(6, WireType.Varint).int32(message.avatarSubscript);
        /* string label_text = 7; */
        if (message.labelText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.labelText);
        /* string vip_label_theme = 8; */
        if (message.vipLabelTheme !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.vipLabelTheme);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Vip
 */
export const MemberV2_Vip = new MemberV2_Vip$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Garb$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Garb", [
            { no: 1, name: "pendant_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "card_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "card_image_with_focus", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "card_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "card_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "card_fan_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "card_is_fan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pendantImage = "";
        message.cardImage = "";
        message.cardImageWithFocus = "";
        message.cardJumpUrl = "";
        message.cardNumber = "";
        message.cardFanColor = "";
        message.cardIsFan = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pendant_image */ 1:
                    message.pendantImage = reader.string();
                    break;
                case /* string card_image */ 2:
                    message.cardImage = reader.string();
                    break;
                case /* string card_image_with_focus */ 3:
                    message.cardImageWithFocus = reader.string();
                    break;
                case /* string card_jump_url */ 4:
                    message.cardJumpUrl = reader.string();
                    break;
                case /* string card_number */ 5:
                    message.cardNumber = reader.string();
                    break;
                case /* string card_fan_color */ 6:
                    message.cardFanColor = reader.string();
                    break;
                case /* bool card_is_fan */ 7:
                    message.cardIsFan = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string pendant_image = 1; */
        if (message.pendantImage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pendantImage);
        /* string card_image = 2; */
        if (message.cardImage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cardImage);
        /* string card_image_with_focus = 3; */
        if (message.cardImageWithFocus !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cardImageWithFocus);
        /* string card_jump_url = 4; */
        if (message.cardJumpUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.cardJumpUrl);
        /* string card_number = 5; */
        if (message.cardNumber !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cardNumber);
        /* string card_fan_color = 6; */
        if (message.cardFanColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.cardFanColor);
        /* bool card_is_fan = 7; */
        if (message.cardIsFan !== false)
            writer.tag(7, WireType.Varint).bool(message.cardIsFan);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Garb
 */
export const MemberV2_Garb = new MemberV2_Garb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Medal$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Medal", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "color_start", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "color_end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "color_border", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "color_name", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "color_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "guard_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "first_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "level_bg_color", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.level = 0;
        message.colorStart = 0;
        message.colorEnd = 0;
        message.colorBorder = 0;
        message.colorName = 0;
        message.colorLevel = 0;
        message.guardLevel = 0;
        message.firstIcon = "";
        message.levelBgColor = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 level */ 2:
                    message.level = reader.int64().toNumber();
                    break;
                case /* int64 color_start */ 3:
                    message.colorStart = reader.int64().toNumber();
                    break;
                case /* int64 color_end */ 4:
                    message.colorEnd = reader.int64().toNumber();
                    break;
                case /* int64 color_border */ 5:
                    message.colorBorder = reader.int64().toNumber();
                    break;
                case /* int64 color_name */ 6:
                    message.colorName = reader.int64().toNumber();
                    break;
                case /* int64 color_level */ 7:
                    message.colorLevel = reader.int64().toNumber();
                    break;
                case /* int64 guard_level */ 8:
                    message.guardLevel = reader.int64().toNumber();
                    break;
                case /* string first_icon */ 9:
                    message.firstIcon = reader.string();
                    break;
                case /* int64 level_bg_color */ 11:
                    message.levelBgColor = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 level = 2; */
        if (message.level !== 0)
            writer.tag(2, WireType.Varint).int64(message.level);
        /* int64 color_start = 3; */
        if (message.colorStart !== 0)
            writer.tag(3, WireType.Varint).int64(message.colorStart);
        /* int64 color_end = 4; */
        if (message.colorEnd !== 0)
            writer.tag(4, WireType.Varint).int64(message.colorEnd);
        /* int64 color_border = 5; */
        if (message.colorBorder !== 0)
            writer.tag(5, WireType.Varint).int64(message.colorBorder);
        /* int64 color_name = 6; */
        if (message.colorName !== 0)
            writer.tag(6, WireType.Varint).int64(message.colorName);
        /* int64 color_level = 7; */
        if (message.colorLevel !== 0)
            writer.tag(7, WireType.Varint).int64(message.colorLevel);
        /* int64 guard_level = 8; */
        if (message.guardLevel !== 0)
            writer.tag(8, WireType.Varint).int64(message.guardLevel);
        /* string first_icon = 9; */
        if (message.firstIcon !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.firstIcon);
        /* int64 level_bg_color = 11; */
        if (message.levelBgColor !== 0)
            writer.tag(11, WireType.Varint).int64(message.levelBgColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Medal
 */
export const MemberV2_Medal = new MemberV2_Medal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Region$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Region", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.main.community.reply.v1.MemberV2.RegionType", MemberV2_RegionType] },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "show_status", kind: "enum", T: () => ["bilibili.main.community.reply.v1.MemberV2.ShowStatus", MemberV2_ShowStatus] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.icon = "";
        message.showStatus = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.MemberV2.RegionType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.ShowStatus show_status */ 3:
                    message.showStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.MemberV2.RegionType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        /* bilibili.main.community.reply.v1.MemberV2.ShowStatus show_status = 3; */
        if (message.showStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.showStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Region
 */
export const MemberV2_Region = new MemberV2_Region$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Interaction$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Interaction", [
            { no: 1, name: "itype", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "nft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "region", kind: "message", T: () => MemberV2_Region }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.itype = "";
        message.metadataUrl = "";
        message.nftId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string itype */ 1:
                    message.itype = reader.string();
                    break;
                case /* string metadata_url */ 2:
                    message.metadataUrl = reader.string();
                    break;
                case /* string nft_id */ 3:
                    message.nftId = reader.string();
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.Region region */ 4:
                    message.region = MemberV2_Region.internalBinaryRead(reader, reader.uint32(), options, message.region);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string itype = 1; */
        if (message.itype !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itype);
        /* string metadata_url = 2; */
        if (message.metadataUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.metadataUrl);
        /* string nft_id = 3; */
        if (message.nftId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nftId);
        /* bilibili.main.community.reply.v1.MemberV2.Region region = 4; */
        if (message.region)
            MemberV2_Region.internalBinaryWrite(message.region, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Interaction
 */
export const MemberV2_Interaction = new MemberV2_Interaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Nft$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Nft", [
            { no: 1, name: "face", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "interaction", kind: "message", T: () => MemberV2_Interaction }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.face = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 face */ 1:
                    message.face = reader.int32();
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2.Interaction interaction */ 2:
                    message.interaction = MemberV2_Interaction.internalBinaryRead(reader, reader.uint32(), options, message.interaction);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 face = 1; */
        if (message.face !== 0)
            writer.tag(1, WireType.Varint).int32(message.face);
        /* bilibili.main.community.reply.v1.MemberV2.Interaction interaction = 2; */
        if (message.interaction)
            MemberV2_Interaction.internalBinaryWrite(message.interaction, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Nft
 */
export const MemberV2_Nft = new MemberV2_Nft$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Senior$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Senior", [
            { no: 1, name: "is_senior_member", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.isSeniorMember = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 is_senior_member */ 1:
                    message.isSeniorMember = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 is_senior_member = 1; */
        if (message.isSeniorMember !== 0)
            writer.tag(1, WireType.Varint).int32(message.isSeniorMember);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Senior
 */
export const MemberV2_Senior = new MemberV2_Senior$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberV2_Contractor$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.MemberV2.Contractor", [
            { no: 1, name: "is_contractor", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "contract_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.isContractor = false;
        message.contractDesc = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_contractor */ 1:
                    message.isContractor = reader.bool();
                    break;
                case /* string contract_desc */ 2:
                    message.contractDesc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_contractor = 1; */
        if (message.isContractor !== false)
            writer.tag(1, WireType.Varint).bool(message.isContractor);
        /* string contract_desc = 2; */
        if (message.contractDesc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractDesc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.MemberV2.Contractor
 */
export const MemberV2_Contractor = new MemberV2_Contractor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Notice$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Notice", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.content = "";
        message.link = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string link */ 3:
                    message.link = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string link = 3; */
        if (message.link !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.link);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Notice
 */
export const Notice = new Notice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Operation$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Operation", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "title", kind: "message", T: () => OperationTitle },
            { no: 4, name: "subtitle", kind: "message", T: () => OperationTitle },
            { no: 5, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "report_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.id = 0;
        message.link = "";
        message.reportExtra = "";
        message.icon = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.OperationTitle title */ 3:
                    message.title = OperationTitle.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* bilibili.main.community.reply.v1.OperationTitle subtitle */ 4:
                    message.subtitle = OperationTitle.internalBinaryRead(reader, reader.uint32(), options, message.subtitle);
                    break;
                case /* string link */ 5:
                    message.link = reader.string();
                    break;
                case /* string report_extra */ 6:
                    message.reportExtra = reader.string();
                    break;
                case /* string icon */ 7:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).int64(message.id);
        /* bilibili.main.community.reply.v1.OperationTitle title = 3; */
        if (message.title)
            OperationTitle.internalBinaryWrite(message.title, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.OperationTitle subtitle = 4; */
        if (message.subtitle)
            OperationTitle.internalBinaryWrite(message.subtitle, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string link = 5; */
        if (message.link !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.link);
        /* string report_extra = 6; */
        if (message.reportExtra !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.reportExtra);
        /* string icon = 7; */
        if (message.icon !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Operation
 */
export const Operation = new Operation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationTitle$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.OperationTitle", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_highlight", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.content = "";
        message.isHighlight = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* bool is_highlight */ 2:
                    message.isHighlight = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* bool is_highlight = 2; */
        if (message.isHighlight !== false)
            writer.tag(2, WireType.Varint).bool(message.isHighlight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.OperationTitle
 */
export const OperationTitle = new OperationTitle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PGCVideoSearchItem$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.PGCVideoSearchItem", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "category", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.category = "";
        message.cover = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string category */ 2:
                    message.category = reader.string();
                    break;
                case /* string cover */ 3:
                    message.cover = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string category = 2; */
        if (message.category !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.category);
        /* string cover = 3; */
        if (message.cover !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cover);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.PGCVideoSearchItem
 */
export const PGCVideoSearchItem = new PGCVideoSearchItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewListReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.PreviewListReply", [
            { no: 1, name: "cursor", kind: "message", T: () => CursorReply },
            { no: 2, name: "replies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReplyInfo },
            { no: 3, name: "subject_control", kind: "message", T: () => SubjectControl },
            { no: 4, name: "upTop", kind: "message", T: () => ReplyInfo },
            { no: 5, name: "admin_top", kind: "message", T: () => ReplyInfo },
            { no: 6, name: "vote_top", kind: "message", T: () => ReplyInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.replies = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.CursorReply cursor */ 1:
                    message.cursor = CursorReply.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                case /* repeated bilibili.main.community.reply.v1.ReplyInfo replies */ 2:
                    message.replies.push(ReplyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.main.community.reply.v1.SubjectControl subject_control */ 3:
                    message.subjectControl = SubjectControl.internalBinaryRead(reader, reader.uint32(), options, message.subjectControl);
                    break;
                case /* bilibili.main.community.reply.v1.ReplyInfo upTop */ 4:
                    message.upTop = ReplyInfo.internalBinaryRead(reader, reader.uint32(), options, message.upTop);
                    break;
                case /* bilibili.main.community.reply.v1.ReplyInfo admin_top */ 5:
                    message.adminTop = ReplyInfo.internalBinaryRead(reader, reader.uint32(), options, message.adminTop);
                    break;
                case /* bilibili.main.community.reply.v1.ReplyInfo vote_top */ 6:
                    message.voteTop = ReplyInfo.internalBinaryRead(reader, reader.uint32(), options, message.voteTop);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.CursorReply cursor = 1; */
        if (message.cursor)
            CursorReply.internalBinaryWrite(message.cursor, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.main.community.reply.v1.ReplyInfo replies = 2; */
        for (let i = 0; i < message.replies.length; i++)
            ReplyInfo.internalBinaryWrite(message.replies[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.SubjectControl subject_control = 3; */
        if (message.subjectControl)
            SubjectControl.internalBinaryWrite(message.subjectControl, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ReplyInfo upTop = 4; */
        if (message.upTop)
            ReplyInfo.internalBinaryWrite(message.upTop, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ReplyInfo admin_top = 5; */
        if (message.adminTop)
            ReplyInfo.internalBinaryWrite(message.adminTop, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ReplyInfo vote_top = 6; */
        if (message.voteTop)
            ReplyInfo.internalBinaryWrite(message.voteTop, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.PreviewListReply
 */
export const PreviewListReply = new PreviewListReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewListReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.PreviewListReq", [
            { no: 1, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "cursor", kind: "message", T: () => CursorReq }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.oid = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 oid */ 1:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 2:
                    message.type = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.CursorReq cursor */ 3:
                    message.cursor = CursorReq.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 oid = 1; */
        if (message.oid !== 0)
            writer.tag(1, WireType.Varint).int64(message.oid);
        /* int64 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int64(message.type);
        /* bilibili.main.community.reply.v1.CursorReq cursor = 3; */
        if (message.cursor)
            CursorReq.internalBinaryWrite(message.cursor, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.PreviewListReq
 */
export const PreviewListReq = new PreviewListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QoeInfo$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.QoeInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "feedback_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "score_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QoeScoreItem },
            { no: 7, name: "display_rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.type = 0;
        message.style = 0;
        message.title = "";
        message.feedbackTitle = "";
        message.scoreItems = [];
        message.displayRank = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* int32 style */ 3:
                    message.style = reader.int32();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string feedback_title */ 5:
                    message.feedbackTitle = reader.string();
                    break;
                case /* repeated bilibili.main.community.reply.v1.QoeScoreItem score_items */ 6:
                    message.scoreItems.push(QoeScoreItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 display_rank */ 7:
                    message.displayRank = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* int32 style = 3; */
        if (message.style !== 0)
            writer.tag(3, WireType.Varint).int32(message.style);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string feedback_title = 5; */
        if (message.feedbackTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.feedbackTitle);
        /* repeated bilibili.main.community.reply.v1.QoeScoreItem score_items = 6; */
        for (let i = 0; i < message.scoreItems.length; i++)
            QoeScoreItem.internalBinaryWrite(message.scoreItems[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 display_rank = 7; */
        if (message.displayRank !== 0)
            writer.tag(7, WireType.Varint).int64(message.displayRank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.QoeInfo
 */
export const QoeInfo = new QoeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QoeScoreItem$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.QoeScoreItem", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "score", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.url = "";
        message.score = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* float score */ 3:
                    message.score = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* float score = 3; */
        if (message.score !== 0)
            writer.tag(3, WireType.Bit32).float(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.QoeScoreItem
 */
export const QoeScoreItem = new QoeScoreItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplyCardLabel$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ReplyCardLabel", [
            { no: 1, name: "text_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color_day", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "label_color_day", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "label_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "background", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "background_width", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "background_height", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "effect", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "effect_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.textContent = "";
        message.textColorDay = "";
        message.textColorNight = "";
        message.labelColorDay = "";
        message.labelColorNight = "";
        message.image = "";
        message.type = 0;
        message.background = "";
        message.backgroundWidth = 0;
        message.backgroundHeight = 0;
        message.jumpUrl = "";
        message.effect = 0;
        message.effectStartTime = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text_content */ 1:
                    message.textContent = reader.string();
                    break;
                case /* string text_color_day */ 2:
                    message.textColorDay = reader.string();
                    break;
                case /* string text_color_night */ 3:
                    message.textColorNight = reader.string();
                    break;
                case /* string label_color_day */ 4:
                    message.labelColorDay = reader.string();
                    break;
                case /* string label_color_night */ 5:
                    message.labelColorNight = reader.string();
                    break;
                case /* string image */ 6:
                    message.image = reader.string();
                    break;
                case /* int32 type */ 7:
                    message.type = reader.int32();
                    break;
                case /* string background */ 8:
                    message.background = reader.string();
                    break;
                case /* double background_width */ 9:
                    message.backgroundWidth = reader.double();
                    break;
                case /* double background_height */ 10:
                    message.backgroundHeight = reader.double();
                    break;
                case /* string jump_url */ 11:
                    message.jumpUrl = reader.string();
                    break;
                case /* int64 effect */ 12:
                    message.effect = reader.int64().toNumber();
                    break;
                case /* int64 effect_start_time */ 13:
                    message.effectStartTime = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text_content = 1; */
        if (message.textContent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.textContent);
        /* string text_color_day = 2; */
        if (message.textColorDay !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColorDay);
        /* string text_color_night = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        /* string label_color_day = 4; */
        if (message.labelColorDay !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.labelColorDay);
        /* string label_color_night = 5; */
        if (message.labelColorNight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.labelColorNight);
        /* string image = 6; */
        if (message.image !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.image);
        /* int32 type = 7; */
        if (message.type !== 0)
            writer.tag(7, WireType.Varint).int32(message.type);
        /* string background = 8; */
        if (message.background !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.background);
        /* double background_width = 9; */
        if (message.backgroundWidth !== 0)
            writer.tag(9, WireType.Bit64).double(message.backgroundWidth);
        /* double background_height = 10; */
        if (message.backgroundHeight !== 0)
            writer.tag(10, WireType.Bit64).double(message.backgroundHeight);
        /* string jump_url = 11; */
        if (message.jumpUrl !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.jumpUrl);
        /* int64 effect = 12; */
        if (message.effect !== 0)
            writer.tag(12, WireType.Varint).int64(message.effect);
        /* int64 effect_start_time = 13; */
        if (message.effectStartTime !== 0)
            writer.tag(13, WireType.Varint).int64(message.effectStartTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ReplyCardLabel
 */
export const ReplyCardLabel = new ReplyCardLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplyControl$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ReplyControl", [
            { no: 1, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "up_like", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "up_reply", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "show_follow_btn", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "is_assist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "label_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "following", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "followed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "blocked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "has_folded_reply", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "is_folded_reply", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_up_top", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "is_admin_top", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "is_vote_top", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "max_line", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 16, name: "invisible", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "is_contractor", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "is_note", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "card_labels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReplyCardLabel },
            { no: 20, name: "sub_reply_entry_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "sub_reply_title_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "contract_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "time_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "biz_scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.action = 0;
        message.upLike = false;
        message.upReply = false;
        message.showFollowBtn = false;
        message.isAssist = false;
        message.labelText = "";
        message.following = false;
        message.followed = false;
        message.blocked = false;
        message.hasFoldedReply = false;
        message.isFoldedReply = false;
        message.isUpTop = false;
        message.isAdminTop = false;
        message.isVoteTop = false;
        message.maxLine = 0;
        message.invisible = false;
        message.isContractor = false;
        message.isNote = false;
        message.cardLabels = [];
        message.subReplyEntryText = "";
        message.subReplyTitleText = "";
        message.contractDesc = "";
        message.timeDesc = "";
        message.bizScene = "";
        message.location = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 action */ 1:
                    message.action = reader.int64().toNumber();
                    break;
                case /* bool up_like */ 2:
                    message.upLike = reader.bool();
                    break;
                case /* bool up_reply */ 3:
                    message.upReply = reader.bool();
                    break;
                case /* bool show_follow_btn */ 4:
                    message.showFollowBtn = reader.bool();
                    break;
                case /* bool is_assist */ 5:
                    message.isAssist = reader.bool();
                    break;
                case /* string label_text */ 6:
                    message.labelText = reader.string();
                    break;
                case /* bool following */ 7:
                    message.following = reader.bool();
                    break;
                case /* bool followed */ 8:
                    message.followed = reader.bool();
                    break;
                case /* bool blocked */ 9:
                    message.blocked = reader.bool();
                    break;
                case /* bool has_folded_reply */ 10:
                    message.hasFoldedReply = reader.bool();
                    break;
                case /* bool is_folded_reply */ 11:
                    message.isFoldedReply = reader.bool();
                    break;
                case /* bool is_up_top */ 12:
                    message.isUpTop = reader.bool();
                    break;
                case /* bool is_admin_top */ 13:
                    message.isAdminTop = reader.bool();
                    break;
                case /* bool is_vote_top */ 14:
                    message.isVoteTop = reader.bool();
                    break;
                case /* int64 max_line */ 15:
                    message.maxLine = reader.int64().toNumber();
                    break;
                case /* bool invisible */ 16:
                    message.invisible = reader.bool();
                    break;
                case /* bool is_contractor */ 17:
                    message.isContractor = reader.bool();
                    break;
                case /* bool is_note */ 18:
                    message.isNote = reader.bool();
                    break;
                case /* repeated bilibili.main.community.reply.v1.ReplyCardLabel card_labels */ 19:
                    message.cardLabels.push(ReplyCardLabel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string sub_reply_entry_text */ 20:
                    message.subReplyEntryText = reader.string();
                    break;
                case /* string sub_reply_title_text */ 21:
                    message.subReplyTitleText = reader.string();
                    break;
                case /* string contract_desc */ 22:
                    message.contractDesc = reader.string();
                    break;
                case /* string time_desc */ 23:
                    message.timeDesc = reader.string();
                    break;
                case /* string biz_scene */ 24:
                    message.bizScene = reader.string();
                    break;
                case /* string location */ 25:
                    message.location = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 action = 1; */
        if (message.action !== 0)
            writer.tag(1, WireType.Varint).int64(message.action);
        /* bool up_like = 2; */
        if (message.upLike !== false)
            writer.tag(2, WireType.Varint).bool(message.upLike);
        /* bool up_reply = 3; */
        if (message.upReply !== false)
            writer.tag(3, WireType.Varint).bool(message.upReply);
        /* bool show_follow_btn = 4; */
        if (message.showFollowBtn !== false)
            writer.tag(4, WireType.Varint).bool(message.showFollowBtn);
        /* bool is_assist = 5; */
        if (message.isAssist !== false)
            writer.tag(5, WireType.Varint).bool(message.isAssist);
        /* string label_text = 6; */
        if (message.labelText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.labelText);
        /* bool following = 7; */
        if (message.following !== false)
            writer.tag(7, WireType.Varint).bool(message.following);
        /* bool followed = 8; */
        if (message.followed !== false)
            writer.tag(8, WireType.Varint).bool(message.followed);
        /* bool blocked = 9; */
        if (message.blocked !== false)
            writer.tag(9, WireType.Varint).bool(message.blocked);
        /* bool has_folded_reply = 10; */
        if (message.hasFoldedReply !== false)
            writer.tag(10, WireType.Varint).bool(message.hasFoldedReply);
        /* bool is_folded_reply = 11; */
        if (message.isFoldedReply !== false)
            writer.tag(11, WireType.Varint).bool(message.isFoldedReply);
        /* bool is_up_top = 12; */
        if (message.isUpTop !== false)
            writer.tag(12, WireType.Varint).bool(message.isUpTop);
        /* bool is_admin_top = 13; */
        if (message.isAdminTop !== false)
            writer.tag(13, WireType.Varint).bool(message.isAdminTop);
        /* bool is_vote_top = 14; */
        if (message.isVoteTop !== false)
            writer.tag(14, WireType.Varint).bool(message.isVoteTop);
        /* int64 max_line = 15; */
        if (message.maxLine !== 0)
            writer.tag(15, WireType.Varint).int64(message.maxLine);
        /* bool invisible = 16; */
        if (message.invisible !== false)
            writer.tag(16, WireType.Varint).bool(message.invisible);
        /* bool is_contractor = 17; */
        if (message.isContractor !== false)
            writer.tag(17, WireType.Varint).bool(message.isContractor);
        /* bool is_note = 18; */
        if (message.isNote !== false)
            writer.tag(18, WireType.Varint).bool(message.isNote);
        /* repeated bilibili.main.community.reply.v1.ReplyCardLabel card_labels = 19; */
        for (let i = 0; i < message.cardLabels.length; i++)
            ReplyCardLabel.internalBinaryWrite(message.cardLabels[i], writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* string sub_reply_entry_text = 20; */
        if (message.subReplyEntryText !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.subReplyEntryText);
        /* string sub_reply_title_text = 21; */
        if (message.subReplyTitleText !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.subReplyTitleText);
        /* string contract_desc = 22; */
        if (message.contractDesc !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.contractDesc);
        /* string time_desc = 23; */
        if (message.timeDesc !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.timeDesc);
        /* string biz_scene = 24; */
        if (message.bizScene !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.bizScene);
        /* string location = 25; */
        if (message.location !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.location);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ReplyControl
 */
export const ReplyControl = new ReplyControl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplyExtra$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ReplyExtra", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "season_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "ep_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "is_story", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.seasonId = 0;
        message.seasonType = 0;
        message.epId = 0;
        message.isStory = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toNumber();
                    break;
                case /* int64 season_type */ 2:
                    message.seasonType = reader.int64().toNumber();
                    break;
                case /* int64 ep_id */ 3:
                    message.epId = reader.int64().toNumber();
                    break;
                case /* bool is_story */ 4:
                    message.isStory = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        /* int64 season_type = 2; */
        if (message.seasonType !== 0)
            writer.tag(2, WireType.Varint).int64(message.seasonType);
        /* int64 ep_id = 3; */
        if (message.epId !== 0)
            writer.tag(3, WireType.Varint).int64(message.epId);
        /* bool is_story = 4; */
        if (message.isStory !== false)
            writer.tag(4, WireType.Varint).bool(message.isStory);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ReplyExtra
 */
export const ReplyExtra = new ReplyExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplyInfo$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ReplyInfo", [
            { no: 1, name: "replies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReplyInfo },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "root", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "parent", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "dialog", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "like", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "ctime", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "content", kind: "message", T: () => Content },
            { no: 13, name: "member", kind: "message", T: () => Member },
            { no: 14, name: "reply_control", kind: "message", T: () => ReplyControl },
            { no: 15, name: "member_v2", kind: "message", T: () => MemberV2 }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.replies = [];
        message.id = 0;
        message.oid = 0;
        message.type = 0;
        message.mid = 0;
        message.root = 0;
        message.parent = 0;
        message.dialog = 0;
        message.like = 0;
        message.ctime = 0;
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.main.community.reply.v1.ReplyInfo replies */ 1:
                    message.replies.push(ReplyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 oid */ 3:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 4:
                    message.type = reader.int64().toNumber();
                    break;
                case /* int64 mid */ 5:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* int64 root */ 6:
                    message.root = reader.int64().toNumber();
                    break;
                case /* int64 parent */ 7:
                    message.parent = reader.int64().toNumber();
                    break;
                case /* int64 dialog */ 8:
                    message.dialog = reader.int64().toNumber();
                    break;
                case /* int64 like */ 9:
                    message.like = reader.int64().toNumber();
                    break;
                case /* int64 ctime */ 10:
                    message.ctime = reader.int64().toNumber();
                    break;
                case /* int64 count */ 11:
                    message.count = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.Content content */ 12:
                    message.content = Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* bilibili.main.community.reply.v1.Member member */ 13:
                    message.member = Member.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                case /* bilibili.main.community.reply.v1.ReplyControl reply_control */ 14:
                    message.replyControl = ReplyControl.internalBinaryRead(reader, reader.uint32(), options, message.replyControl);
                    break;
                case /* bilibili.main.community.reply.v1.MemberV2 member_v2 */ 15:
                    message.memberV2 = MemberV2.internalBinaryRead(reader, reader.uint32(), options, message.memberV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.main.community.reply.v1.ReplyInfo replies = 1; */
        for (let i = 0; i < message.replies.length; i++)
            ReplyInfo.internalBinaryWrite(message.replies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).int64(message.id);
        /* int64 oid = 3; */
        if (message.oid !== 0)
            writer.tag(3, WireType.Varint).int64(message.oid);
        /* int64 type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int64(message.type);
        /* int64 mid = 5; */
        if (message.mid !== 0)
            writer.tag(5, WireType.Varint).int64(message.mid);
        /* int64 root = 6; */
        if (message.root !== 0)
            writer.tag(6, WireType.Varint).int64(message.root);
        /* int64 parent = 7; */
        if (message.parent !== 0)
            writer.tag(7, WireType.Varint).int64(message.parent);
        /* int64 dialog = 8; */
        if (message.dialog !== 0)
            writer.tag(8, WireType.Varint).int64(message.dialog);
        /* int64 like = 9; */
        if (message.like !== 0)
            writer.tag(9, WireType.Varint).int64(message.like);
        /* int64 ctime = 10; */
        if (message.ctime !== 0)
            writer.tag(10, WireType.Varint).int64(message.ctime);
        /* int64 count = 11; */
        if (message.count !== 0)
            writer.tag(11, WireType.Varint).int64(message.count);
        /* bilibili.main.community.reply.v1.Content content = 12; */
        if (message.content)
            Content.internalBinaryWrite(message.content, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Member member = 13; */
        if (message.member)
            Member.internalBinaryWrite(message.member, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ReplyControl reply_control = 14; */
        if (message.replyControl)
            ReplyControl.internalBinaryWrite(message.replyControl, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.MemberV2 member_v2 = 15; */
        if (message.memberV2)
            MemberV2.internalBinaryWrite(message.memberV2, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ReplyInfo
 */
export const ReplyInfo = new ReplyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplyInfoReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ReplyInfoReply", [
            { no: 1, name: "reply", kind: "message", T: () => ReplyInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.ReplyInfo reply */ 1:
                    message.reply = ReplyInfo.internalBinaryRead(reader, reader.uint32(), options, message.reply);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.ReplyInfo reply = 1; */
        if (message.reply)
            ReplyInfo.internalBinaryWrite(message.reply, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ReplyInfoReply
 */
export const ReplyInfoReply = new ReplyInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplyInfoReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ReplyInfoReq", [
            { no: 1, name: "rpid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.rpid = 0;
        message.scene = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 rpid */ 1:
                    message.rpid = reader.int64().toNumber();
                    break;
                case /* int32 scene */ 2:
                    message.scene = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 rpid = 1; */
        if (message.rpid !== 0)
            writer.tag(1, WireType.Varint).int64(message.rpid);
        /* int32 scene = 2; */
        if (message.scene !== 0)
            writer.tag(2, WireType.Varint).int32(message.scene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ReplyInfoReq
 */
export const ReplyInfoReq = new ReplyInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RichText$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.RichText", [
            { no: 1, name: "note", kind: "message", oneof: "item", T: () => RichTextNote }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.item = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.RichTextNote note */ 1:
                    message.item = {
                        oneofKind: "note",
                        note: RichTextNote.internalBinaryRead(reader, reader.uint32(), options, message.item.note)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.RichTextNote note = 1; */
        if (message.item.oneofKind === "note")
            RichTextNote.internalBinaryWrite(message.item.note, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.RichText
 */
export const RichText = new RichText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RichTextNote$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.RichTextNote", [
            { no: 1, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "images", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "click_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_mtime_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.summary = "";
        message.images = [];
        message.clickUrl = "";
        message.lastMtimeText = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string summary */ 1:
                    message.summary = reader.string();
                    break;
                case /* repeated string images */ 2:
                    message.images.push(reader.string());
                    break;
                case /* string click_url */ 3:
                    message.clickUrl = reader.string();
                    break;
                case /* string last_mtime_text */ 4:
                    message.lastMtimeText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string summary = 1; */
        if (message.summary !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.summary);
        /* repeated string images = 2; */
        for (let i = 0; i < message.images.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.images[i]);
        /* string click_url = 3; */
        if (message.clickUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.clickUrl);
        /* string last_mtime_text = 4; */
        if (message.lastMtimeText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastMtimeText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.RichTextNote
 */
export const RichTextNote = new RichTextNote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchItem$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SearchItem", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "goods", kind: "message", oneof: "item", T: () => GoodsSearchItem },
            { no: 3, name: "video", kind: "message", oneof: "item", T: () => VideoSearchItem },
            { no: 4, name: "article", kind: "message", oneof: "item", T: () => ArticleSearchItem }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.url = "";
        message.item = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* bilibili.main.community.reply.v1.GoodsSearchItem goods */ 2:
                    message.item = {
                        oneofKind: "goods",
                        goods: GoodsSearchItem.internalBinaryRead(reader, reader.uint32(), options, message.item.goods)
                    };
                    break;
                case /* bilibili.main.community.reply.v1.VideoSearchItem video */ 3:
                    message.item = {
                        oneofKind: "video",
                        video: VideoSearchItem.internalBinaryRead(reader, reader.uint32(), options, message.item.video)
                    };
                    break;
                case /* bilibili.main.community.reply.v1.ArticleSearchItem article */ 4:
                    message.item = {
                        oneofKind: "article",
                        article: ArticleSearchItem.internalBinaryRead(reader, reader.uint32(), options, message.item.article)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* bilibili.main.community.reply.v1.GoodsSearchItem goods = 2; */
        if (message.item.oneofKind === "goods")
            GoodsSearchItem.internalBinaryWrite(message.item.goods, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.VideoSearchItem video = 3; */
        if (message.item.oneofKind === "video")
            VideoSearchItem.internalBinaryWrite(message.item.video, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ArticleSearchItem article = 4; */
        if (message.item.oneofKind === "article")
            ArticleSearchItem.internalBinaryWrite(message.item.article, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SearchItem
 */
export const SearchItem = new SearchItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchItemCursorReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SearchItemCursorReply", [
            { no: 1, name: "has_next", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "next", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.hasNext = false;
        message.next = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool has_next */ 1:
                    message.hasNext = reader.bool();
                    break;
                case /* int64 next */ 2:
                    message.next = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool has_next = 1; */
        if (message.hasNext !== false)
            writer.tag(1, WireType.Varint).bool(message.hasNext);
        /* int64 next = 2; */
        if (message.next !== 0)
            writer.tag(2, WireType.Varint).int64(message.next);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SearchItemCursorReply
 */
export const SearchItemCursorReply = new SearchItemCursorReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchItemCursorReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SearchItemCursorReq", [
            { no: 1, name: "next", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "item_type", kind: "enum", T: () => ["bilibili.main.community.reply.v1.SearchItemType", SearchItemType] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.next = 0;
        message.itemType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 next */ 1:
                    message.next = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.SearchItemType item_type */ 2:
                    message.itemType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 next = 1; */
        if (message.next !== 0)
            writer.tag(1, WireType.Varint).int64(message.next);
        /* bilibili.main.community.reply.v1.SearchItemType item_type = 2; */
        if (message.itemType !== 0)
            writer.tag(2, WireType.Varint).int32(message.itemType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SearchItemCursorReq
 */
export const SearchItemCursorReq = new SearchItemCursorReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchItemPreHookReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SearchItemPreHookReply", [
            { no: 1, name: "placeholder_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "background_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ordered_type", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["bilibili.main.community.reply.v1.SearchItemType", SearchItemType] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.placeholderText = "";
        message.backgroundText = "";
        message.orderedType = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string placeholder_text */ 1:
                    message.placeholderText = reader.string();
                    break;
                case /* string background_text */ 2:
                    message.backgroundText = reader.string();
                    break;
                case /* repeated bilibili.main.community.reply.v1.SearchItemType ordered_type */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.orderedType.push(reader.int32());
                    else
                        message.orderedType.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string placeholder_text = 1; */
        if (message.placeholderText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.placeholderText);
        /* string background_text = 2; */
        if (message.backgroundText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.backgroundText);
        /* repeated bilibili.main.community.reply.v1.SearchItemType ordered_type = 3; */
        if (message.orderedType.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.orderedType.length; i++)
                writer.int32(message.orderedType[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SearchItemPreHookReply
 */
export const SearchItemPreHookReply = new SearchItemPreHookReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchItemPreHookReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SearchItemPreHookReq", [
            { no: 1, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.oid = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 oid */ 1:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 2:
                    message.type = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 oid = 1; */
        if (message.oid !== 0)
            writer.tag(1, WireType.Varint).int64(message.oid);
        /* int64 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int64(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SearchItemPreHookReq
 */
export const SearchItemPreHookReq = new SearchItemPreHookReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchItemReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SearchItemReply", [
            { no: 1, name: "cursor", kind: "message", T: () => SearchItemCursorReply },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SearchItem },
            { no: 3, name: "extra", kind: "message", T: () => SearchItemReplyExtraInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.SearchItemCursorReply cursor */ 1:
                    message.cursor = SearchItemCursorReply.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                case /* repeated bilibili.main.community.reply.v1.SearchItem items */ 2:
                    message.items.push(SearchItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.main.community.reply.v1.SearchItemReplyExtraInfo extra */ 3:
                    message.extra = SearchItemReplyExtraInfo.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.SearchItemCursorReply cursor = 1; */
        if (message.cursor)
            SearchItemCursorReply.internalBinaryWrite(message.cursor, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.main.community.reply.v1.SearchItem items = 2; */
        for (let i = 0; i < message.items.length; i++)
            SearchItem.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.SearchItemReplyExtraInfo extra = 3; */
        if (message.extra)
            SearchItemReplyExtraInfo.internalBinaryWrite(message.extra, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SearchItemReply
 */
export const SearchItemReply = new SearchItemReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchItemReplyExtraInfo$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SearchItemReplyExtraInfo", [
            { no: 1, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.eventId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string event_id */ 1:
                    message.eventId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string event_id = 1; */
        if (message.eventId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.eventId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SearchItemReplyExtraInfo
 */
export const SearchItemReplyExtraInfo = new SearchItemReplyExtraInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchItemReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SearchItemReq", [
            { no: 1, name: "cursor", kind: "message", T: () => SearchItemCursorReq },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "keyword", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.oid = 0;
        message.type = 0;
        message.keyword = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.SearchItemCursorReq cursor */ 1:
                    message.cursor = SearchItemCursorReq.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toNumber();
                    break;
                case /* string keyword */ 4:
                    message.keyword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.SearchItemCursorReq cursor = 1; */
        if (message.cursor)
            SearchItemCursorReq.internalBinaryWrite(message.cursor, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 oid = 2; */
        if (message.oid !== 0)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int64 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int64(message.type);
        /* string keyword = 4; */
        if (message.keyword !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.keyword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SearchItemReq
 */
export const SearchItemReq = new SearchItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareRepliesInfoReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ShareRepliesInfoReq", [
            { no: 1, name: "rpids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.rpids = [];
        message.oid = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 rpids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rpids.push(reader.int64().toNumber());
                    else
                        message.rpids.push(reader.int64().toNumber());
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated int64 rpids = 1; */
        if (message.rpids.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.rpids.length; i++)
                writer.int64(message.rpids[i]);
            writer.join();
        }
        /* int64 oid = 2; */
        if (message.oid !== 0)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int64 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int64(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ShareRepliesInfoReq
 */
export const ShareRepliesInfoReq = new ShareRepliesInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareRepliesInfoResp$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ShareRepliesInfoResp", [
            { no: 1, name: "infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ShareReplyInfo },
            { no: 2, name: "from_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from_up", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "from_pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "slogan_pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "slogan_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "topic", kind: "message", T: () => ShareReplyTopic },
            { no: 9, name: "extra", kind: "message", T: () => ShareRepliesInfoResp_ShareExtra }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.infos = [];
        message.fromTitle = "";
        message.fromUp = "";
        message.fromPic = "";
        message.url = "";
        message.sloganPic = "";
        message.sloganText = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.main.community.reply.v1.ShareReplyInfo infos */ 1:
                    message.infos.push(ShareReplyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string from_title */ 2:
                    message.fromTitle = reader.string();
                    break;
                case /* string from_up */ 3:
                    message.fromUp = reader.string();
                    break;
                case /* string from_pic */ 4:
                    message.fromPic = reader.string();
                    break;
                case /* string url */ 5:
                    message.url = reader.string();
                    break;
                case /* string slogan_pic */ 6:
                    message.sloganPic = reader.string();
                    break;
                case /* string slogan_text */ 7:
                    message.sloganText = reader.string();
                    break;
                case /* bilibili.main.community.reply.v1.ShareReplyTopic topic */ 8:
                    message.topic = ShareReplyTopic.internalBinaryRead(reader, reader.uint32(), options, message.topic);
                    break;
                case /* bilibili.main.community.reply.v1.ShareRepliesInfoResp.ShareExtra extra */ 9:
                    message.extra = ShareRepliesInfoResp_ShareExtra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.main.community.reply.v1.ShareReplyInfo infos = 1; */
        for (let i = 0; i < message.infos.length; i++)
            ShareReplyInfo.internalBinaryWrite(message.infos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string from_title = 2; */
        if (message.fromTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fromTitle);
        /* string from_up = 3; */
        if (message.fromUp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromUp);
        /* string from_pic = 4; */
        if (message.fromPic !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fromPic);
        /* string url = 5; */
        if (message.url !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.url);
        /* string slogan_pic = 6; */
        if (message.sloganPic !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.sloganPic);
        /* string slogan_text = 7; */
        if (message.sloganText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.sloganText);
        /* bilibili.main.community.reply.v1.ShareReplyTopic topic = 8; */
        if (message.topic)
            ShareReplyTopic.internalBinaryWrite(message.topic, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.ShareRepliesInfoResp.ShareExtra extra = 9; */
        if (message.extra)
            ShareRepliesInfoResp_ShareExtra.internalBinaryWrite(message.extra, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ShareRepliesInfoResp
 */
export const ShareRepliesInfoResp = new ShareRepliesInfoResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareRepliesInfoResp_ShareExtra$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ShareRepliesInfoResp.ShareExtra", [
            { no: 1, name: "is_pgc", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.isPgc = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_pgc */ 1:
                    message.isPgc = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_pgc = 1; */
        if (message.isPgc !== false)
            writer.tag(1, WireType.Varint).bool(message.isPgc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ShareRepliesInfoResp.ShareExtra
 */
export const ShareRepliesInfoResp_ShareExtra = new ShareRepliesInfoResp_ShareExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareReplyInfo$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ShareReplyInfo", [
            { no: 1, name: "member", kind: "message", T: () => Member },
            { no: 2, name: "content", kind: "message", T: () => Content },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "achievement_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "label_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.subTitle = "";
        message.achievementText = "";
        message.labelUrl = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.Member member */ 1:
                    message.member = Member.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                case /* bilibili.main.community.reply.v1.Content content */ 2:
                    message.content = Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 4:
                    message.subTitle = reader.string();
                    break;
                case /* string achievement_text */ 5:
                    message.achievementText = reader.string();
                    break;
                case /* string label_url */ 6:
                    message.labelUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.Member member = 1; */
        if (message.member)
            Member.internalBinaryWrite(message.member, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.Content content = 2; */
        if (message.content)
            Content.internalBinaryWrite(message.content, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 4; */
        if (message.subTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subTitle);
        /* string achievement_text = 5; */
        if (message.achievementText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.achievementText);
        /* string label_url = 6; */
        if (message.labelUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.labelUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ShareReplyInfo
 */
export const ShareReplyInfo = new ShareReplyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareReplyTopic$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.ShareReplyTopic", [
            { no: 1, name: "topic", kind: "message", T: () => Topic },
            { no: 2, name: "origin_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.originText = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.Topic topic */ 1:
                    message.topic = Topic.internalBinaryRead(reader, reader.uint32(), options, message.topic);
                    break;
                case /* string origin_text */ 2:
                    message.originText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.Topic topic = 1; */
        if (message.topic)
            Topic.internalBinaryWrite(message.topic, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string origin_text = 2; */
        if (message.originText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.originText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.ShareReplyTopic
 */
export const ShareReplyTopic = new ShareReplyTopic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubjectControl$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SubjectControl", [
            { no: 1, name: "up_mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "is_assist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "read_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "has_vote_access", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "has_lottery_access", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "has_folded_reply", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "bg_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "up_blocked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "has_activity_access", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "show_title", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "show_up_action", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "switcher_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "input_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "root_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "child_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 17, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "giveup_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "has_note_access", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "disable_jump_emote", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "empty_background_text_plain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "empty_background_text_highlight", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "empty_background_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "support_filter_tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SubjectControl_FilterTag }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.upMid = 0;
        message.isAssist = false;
        message.readOnly = false;
        message.hasVoteAccess = false;
        message.hasLotteryAccess = false;
        message.hasFoldedReply = false;
        message.bgText = "";
        message.upBlocked = false;
        message.hasActivityAccess = false;
        message.showTitle = false;
        message.showUpAction = false;
        message.switcherType = 0;
        message.inputDisable = false;
        message.rootText = "";
        message.childText = "";
        message.count = 0;
        message.title = "";
        message.giveupText = "";
        message.hasNoteAccess = false;
        message.disableJumpEmote = false;
        message.emptyBackgroundTextPlain = "";
        message.emptyBackgroundTextHighlight = "";
        message.emptyBackgroundUri = "";
        message.supportFilterTags = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 up_mid */ 1:
                    message.upMid = reader.int64().toNumber();
                    break;
                case /* bool is_assist */ 2:
                    message.isAssist = reader.bool();
                    break;
                case /* bool read_only */ 3:
                    message.readOnly = reader.bool();
                    break;
                case /* bool has_vote_access */ 4:
                    message.hasVoteAccess = reader.bool();
                    break;
                case /* bool has_lottery_access */ 5:
                    message.hasLotteryAccess = reader.bool();
                    break;
                case /* bool has_folded_reply */ 6:
                    message.hasFoldedReply = reader.bool();
                    break;
                case /* string bg_text */ 7:
                    message.bgText = reader.string();
                    break;
                case /* bool up_blocked */ 8:
                    message.upBlocked = reader.bool();
                    break;
                case /* bool has_activity_access */ 9:
                    message.hasActivityAccess = reader.bool();
                    break;
                case /* bool show_title */ 10:
                    message.showTitle = reader.bool();
                    break;
                case /* bool show_up_action */ 11:
                    message.showUpAction = reader.bool();
                    break;
                case /* int64 switcher_type */ 12:
                    message.switcherType = reader.int64().toNumber();
                    break;
                case /* bool input_disable */ 13:
                    message.inputDisable = reader.bool();
                    break;
                case /* string root_text */ 14:
                    message.rootText = reader.string();
                    break;
                case /* string child_text */ 15:
                    message.childText = reader.string();
                    break;
                case /* int64 count */ 16:
                    message.count = reader.int64().toNumber();
                    break;
                case /* string title */ 17:
                    message.title = reader.string();
                    break;
                case /* string giveup_text */ 18:
                    message.giveupText = reader.string();
                    break;
                case /* bool has_note_access */ 19:
                    message.hasNoteAccess = reader.bool();
                    break;
                case /* bool disable_jump_emote */ 20:
                    message.disableJumpEmote = reader.bool();
                    break;
                case /* string empty_background_text_plain */ 21:
                    message.emptyBackgroundTextPlain = reader.string();
                    break;
                case /* string empty_background_text_highlight */ 22:
                    message.emptyBackgroundTextHighlight = reader.string();
                    break;
                case /* string empty_background_uri */ 23:
                    message.emptyBackgroundUri = reader.string();
                    break;
                case /* repeated bilibili.main.community.reply.v1.SubjectControl.FilterTag support_filter_tags */ 24:
                    message.supportFilterTags.push(SubjectControl_FilterTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 up_mid = 1; */
        if (message.upMid !== 0)
            writer.tag(1, WireType.Varint).int64(message.upMid);
        /* bool is_assist = 2; */
        if (message.isAssist !== false)
            writer.tag(2, WireType.Varint).bool(message.isAssist);
        /* bool read_only = 3; */
        if (message.readOnly !== false)
            writer.tag(3, WireType.Varint).bool(message.readOnly);
        /* bool has_vote_access = 4; */
        if (message.hasVoteAccess !== false)
            writer.tag(4, WireType.Varint).bool(message.hasVoteAccess);
        /* bool has_lottery_access = 5; */
        if (message.hasLotteryAccess !== false)
            writer.tag(5, WireType.Varint).bool(message.hasLotteryAccess);
        /* bool has_folded_reply = 6; */
        if (message.hasFoldedReply !== false)
            writer.tag(6, WireType.Varint).bool(message.hasFoldedReply);
        /* string bg_text = 7; */
        if (message.bgText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bgText);
        /* bool up_blocked = 8; */
        if (message.upBlocked !== false)
            writer.tag(8, WireType.Varint).bool(message.upBlocked);
        /* bool has_activity_access = 9; */
        if (message.hasActivityAccess !== false)
            writer.tag(9, WireType.Varint).bool(message.hasActivityAccess);
        /* bool show_title = 10; */
        if (message.showTitle !== false)
            writer.tag(10, WireType.Varint).bool(message.showTitle);
        /* bool show_up_action = 11; */
        if (message.showUpAction !== false)
            writer.tag(11, WireType.Varint).bool(message.showUpAction);
        /* int64 switcher_type = 12; */
        if (message.switcherType !== 0)
            writer.tag(12, WireType.Varint).int64(message.switcherType);
        /* bool input_disable = 13; */
        if (message.inputDisable !== false)
            writer.tag(13, WireType.Varint).bool(message.inputDisable);
        /* string root_text = 14; */
        if (message.rootText !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.rootText);
        /* string child_text = 15; */
        if (message.childText !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.childText);
        /* int64 count = 16; */
        if (message.count !== 0)
            writer.tag(16, WireType.Varint).int64(message.count);
        /* string title = 17; */
        if (message.title !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.title);
        /* string giveup_text = 18; */
        if (message.giveupText !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.giveupText);
        /* bool has_note_access = 19; */
        if (message.hasNoteAccess !== false)
            writer.tag(19, WireType.Varint).bool(message.hasNoteAccess);
        /* bool disable_jump_emote = 20; */
        if (message.disableJumpEmote !== false)
            writer.tag(20, WireType.Varint).bool(message.disableJumpEmote);
        /* string empty_background_text_plain = 21; */
        if (message.emptyBackgroundTextPlain !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.emptyBackgroundTextPlain);
        /* string empty_background_text_highlight = 22; */
        if (message.emptyBackgroundTextHighlight !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.emptyBackgroundTextHighlight);
        /* string empty_background_uri = 23; */
        if (message.emptyBackgroundUri !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.emptyBackgroundUri);
        /* repeated bilibili.main.community.reply.v1.SubjectControl.FilterTag support_filter_tags = 24; */
        for (let i = 0; i < message.supportFilterTags.length; i++)
            SubjectControl_FilterTag.internalBinaryWrite(message.supportFilterTags[i], writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SubjectControl
 */
export const SubjectControl = new SubjectControl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubjectControl_FilterTag$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SubjectControl.FilterTag", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.eventId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string event_id */ 2:
                    message.eventId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string event_id = 2; */
        if (message.eventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SubjectControl.FilterTag
 */
export const SubjectControl_FilterTag = new SubjectControl_FilterTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestEmotesReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SuggestEmotesReq", [
            { no: 1, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.oid = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 oid */ 1:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 2:
                    message.type = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 oid = 1; */
        if (message.oid !== 0)
            writer.tag(1, WireType.Varint).int64(message.oid);
        /* int64 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int64(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SuggestEmotesReq
 */
export const SuggestEmotesReq = new SuggestEmotesReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestEmotesResp$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.SuggestEmotesResp", [
            { no: 1, name: "emotes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Emote }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.emotes = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.main.community.reply.v1.Emote emotes */ 1:
                    message.emotes.push(Emote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.main.community.reply.v1.Emote emotes = 1; */
        for (let i = 0; i < message.emotes.length; i++)
            Emote.internalBinaryWrite(message.emotes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.SuggestEmotesResp
 */
export const SuggestEmotesResp = new SuggestEmotesResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Topic$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Topic", [
            { no: 1, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.link = "";
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string link */ 1:
                    message.link = reader.string();
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string link = 1; */
        if (message.link !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.link);
        /* int64 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Topic
 */
export const Topic = new Topic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UGCVideoSearchItem$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.UGCVideoSearchItem", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "up_nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.upNickname = "";
        message.duration = 0;
        message.cover = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string up_nickname */ 2:
                    message.upNickname = reader.string();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* string cover */ 4:
                    message.cover = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string up_nickname = 2; */
        if (message.upNickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.upNickname);
        /* int64 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* string cover = 4; */
        if (message.cover !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.cover);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.UGCVideoSearchItem
 */
export const UGCVideoSearchItem = new UGCVideoSearchItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpSelection$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.UpSelection", [
            { no: 1, name: "pending_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "ignore_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pendingCount = 0;
        message.ignoreCount = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pending_count */ 1:
                    message.pendingCount = reader.int64().toNumber();
                    break;
                case /* int64 ignore_count */ 2:
                    message.ignoreCount = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 pending_count = 1; */
        if (message.pendingCount !== 0)
            writer.tag(1, WireType.Varint).int64(message.pendingCount);
        /* int64 ignore_count = 2; */
        if (message.ignoreCount !== 0)
            writer.tag(2, WireType.Varint).int64(message.ignoreCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.UpSelection
 */
export const UpSelection = new UpSelection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Url$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Url", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "prefix_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "app_url_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "app_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "app_package_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "click_report", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "is_half_screen", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "exposure_report", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "extra", kind: "message", T: () => Url_Extra },
            { no: 11, name: "underline", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "match_once", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "pc_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "icon_position", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.state = 0;
        message.prefixIcon = "";
        message.appUrlSchema = "";
        message.appName = "";
        message.appPackageName = "";
        message.clickReport = "";
        message.isHalfScreen = false;
        message.exposureReport = "";
        message.underline = false;
        message.matchOnce = false;
        message.pcUrl = "";
        message.iconPosition = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* int64 state */ 2:
                    message.state = reader.int64().toNumber();
                    break;
                case /* string prefix_icon */ 3:
                    message.prefixIcon = reader.string();
                    break;
                case /* string app_url_schema */ 4:
                    message.appUrlSchema = reader.string();
                    break;
                case /* string app_name */ 5:
                    message.appName = reader.string();
                    break;
                case /* string app_package_name */ 6:
                    message.appPackageName = reader.string();
                    break;
                case /* string click_report */ 7:
                    message.clickReport = reader.string();
                    break;
                case /* bool is_half_screen */ 8:
                    message.isHalfScreen = reader.bool();
                    break;
                case /* string exposure_report */ 9:
                    message.exposureReport = reader.string();
                    break;
                case /* bilibili.main.community.reply.v1.Url.Extra extra */ 10:
                    message.extra = Url_Extra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                case /* bool underline */ 11:
                    message.underline = reader.bool();
                    break;
                case /* bool match_once */ 12:
                    message.matchOnce = reader.bool();
                    break;
                case /* string pc_url */ 13:
                    message.pcUrl = reader.string();
                    break;
                case /* int32 icon_position */ 14:
                    message.iconPosition = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* int64 state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int64(message.state);
        /* string prefix_icon = 3; */
        if (message.prefixIcon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.prefixIcon);
        /* string app_url_schema = 4; */
        if (message.appUrlSchema !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.appUrlSchema);
        /* string app_name = 5; */
        if (message.appName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.appName);
        /* string app_package_name = 6; */
        if (message.appPackageName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.appPackageName);
        /* string click_report = 7; */
        if (message.clickReport !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.clickReport);
        /* bool is_half_screen = 8; */
        if (message.isHalfScreen !== false)
            writer.tag(8, WireType.Varint).bool(message.isHalfScreen);
        /* string exposure_report = 9; */
        if (message.exposureReport !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.exposureReport);
        /* bilibili.main.community.reply.v1.Url.Extra extra = 10; */
        if (message.extra)
            Url_Extra.internalBinaryWrite(message.extra, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bool underline = 11; */
        if (message.underline !== false)
            writer.tag(11, WireType.Varint).bool(message.underline);
        /* bool match_once = 12; */
        if (message.matchOnce !== false)
            writer.tag(12, WireType.Varint).bool(message.matchOnce);
        /* string pc_url = 13; */
        if (message.pcUrl !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.pcUrl);
        /* int32 icon_position = 14; */
        if (message.iconPosition !== 0)
            writer.tag(14, WireType.Varint).int32(message.iconPosition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Url
 */
export const Url = new Url$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Url_Extra$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Url.Extra", [
            { no: 1, name: "goods_item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "goods_prefetched_cache", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "goods_show_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "is_word_search", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "goods_cm_control", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.goodsItemId = 0;
        message.goodsPrefetchedCache = "";
        message.goodsShowType = 0;
        message.isWordSearch = false;
        message.goodsCmControl = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 goods_item_id */ 1:
                    message.goodsItemId = reader.int64().toNumber();
                    break;
                case /* string goods_prefetched_cache */ 2:
                    message.goodsPrefetchedCache = reader.string();
                    break;
                case /* int32 goods_show_type */ 3:
                    message.goodsShowType = reader.int32();
                    break;
                case /* bool is_word_search */ 4:
                    message.isWordSearch = reader.bool();
                    break;
                case /* int64 goods_cm_control */ 5:
                    message.goodsCmControl = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 goods_item_id = 1; */
        if (message.goodsItemId !== 0)
            writer.tag(1, WireType.Varint).int64(message.goodsItemId);
        /* string goods_prefetched_cache = 2; */
        if (message.goodsPrefetchedCache !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.goodsPrefetchedCache);
        /* int32 goods_show_type = 3; */
        if (message.goodsShowType !== 0)
            writer.tag(3, WireType.Varint).int32(message.goodsShowType);
        /* bool is_word_search = 4; */
        if (message.isWordSearch !== false)
            writer.tag(4, WireType.Varint).bool(message.isWordSearch);
        /* int64 goods_cm_control = 5; */
        if (message.goodsCmControl !== 0)
            writer.tag(5, WireType.Varint).int64(message.goodsCmControl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Url.Extra
 */
export const Url_Extra = new Url_Extra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserCallbackReply$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.UserCallbackReply", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.UserCallbackReply
 */
export const UserCallbackReply = new UserCallbackReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserCallbackReq$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.UserCallbackReq", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "scene", kind: "enum", T: () => ["bilibili.main.community.reply.v1.UserCallbackScene", UserCallbackScene] },
            { no: 3, name: "action", kind: "enum", T: () => ["bilibili.main.community.reply.v1.UserCallbackAction", UserCallbackAction] },
            { no: 4, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mid = 0;
        message.scene = 0;
        message.action = 0;
        message.oid = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* bilibili.main.community.reply.v1.UserCallbackScene scene */ 2:
                    message.scene = reader.int32();
                    break;
                case /* bilibili.main.community.reply.v1.UserCallbackAction action */ 3:
                    message.action = reader.int32();
                    break;
                case /* int64 oid */ 4:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int64 type */ 5:
                    message.type = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* bilibili.main.community.reply.v1.UserCallbackScene scene = 2; */
        if (message.scene !== 0)
            writer.tag(2, WireType.Varint).int32(message.scene);
        /* bilibili.main.community.reply.v1.UserCallbackAction action = 3; */
        if (message.action !== 0)
            writer.tag(3, WireType.Varint).int32(message.action);
        /* int64 oid = 4; */
        if (message.oid !== 0)
            writer.tag(4, WireType.Varint).int64(message.oid);
        /* int64 type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int64(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.UserCallbackReq
 */
export const UserCallbackReq = new UserCallbackReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoSearchItem$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.VideoSearchItem", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.main.community.reply.v1.SearchItemVideoSubType", SearchItemVideoSubType] },
            { no: 2, name: "ugc", kind: "message", oneof: "videoItem", T: () => UGCVideoSearchItem },
            { no: 3, name: "pgc", kind: "message", oneof: "videoItem", T: () => PGCVideoSearchItem }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.videoItem = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.main.community.reply.v1.SearchItemVideoSubType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bilibili.main.community.reply.v1.UGCVideoSearchItem ugc */ 2:
                    message.videoItem = {
                        oneofKind: "ugc",
                        ugc: UGCVideoSearchItem.internalBinaryRead(reader, reader.uint32(), options, message.videoItem.ugc)
                    };
                    break;
                case /* bilibili.main.community.reply.v1.PGCVideoSearchItem pgc */ 3:
                    message.videoItem = {
                        oneofKind: "pgc",
                        pgc: PGCVideoSearchItem.internalBinaryRead(reader, reader.uint32(), options, message.videoItem.pgc)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.main.community.reply.v1.SearchItemVideoSubType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bilibili.main.community.reply.v1.UGCVideoSearchItem ugc = 2; */
        if (message.videoItem.oneofKind === "ugc")
            UGCVideoSearchItem.internalBinaryWrite(message.videoItem.ugc, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.main.community.reply.v1.PGCVideoSearchItem pgc = 3; */
        if (message.videoItem.oneofKind === "pgc")
            PGCVideoSearchItem.internalBinaryWrite(message.videoItem.pgc, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.VideoSearchItem
 */
export const VideoSearchItem = new VideoSearchItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vote$Type extends MessageType {
    constructor() {
        super("bilibili.main.community.reply.v1.Vote", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.title = "";
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int64 count */ 3:
                    message.count = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int64 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.main.community.reply.v1.Vote
 */
export const Vote = new Vote$Type();
/**
 * @generated ServiceType for protobuf service bilibili.main.community.reply.v1.Reply
 */
export const Reply = new ServiceType("bilibili.main.community.reply.v1.Reply", [
    { name: "MainList", options: {}, I: MainListReq, O: MainListReply },
    { name: "DetailList", options: {}, I: DetailListReq, O: DetailListReply },
    { name: "DialogList", options: {}, I: DialogListReq, O: DialogListReply },
    { name: "PreviewList", options: {}, I: PreviewListReq, O: PreviewListReply },
    { name: "SearchItemPreHook", options: {}, I: SearchItemPreHookReq, O: SearchItemPreHookReply },
    { name: "SearchItem", options: {}, I: SearchItemReq, O: SearchItemReply },
    { name: "AtSearch", options: {}, I: AtSearchReq, O: AtSearchReply },
    { name: "ReplyInfo", options: {}, I: ReplyInfoReq, O: ReplyInfoReply },
    { name: "UserCallback", options: {}, I: UserCallbackReq, O: UserCallbackReply },
    { name: "ShareRepliesInfo", options: {}, I: ShareRepliesInfoReq, O: ShareRepliesInfoResp },
    { name: "SuggestEmotes", options: {}, I: SuggestEmotesReq, O: SuggestEmotesResp }
]);
