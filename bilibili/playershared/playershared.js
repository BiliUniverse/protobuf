// @generated by protobuf-ts 2.8.2 with parameter output_javascript
// @generated from protobuf file "bilibili/playershared/playershared.proto" (package "bilibili.playershared", syntax proto3)
// tslint:disable
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum bilibili.playershared.Scheme.ActionType
 */
export var Scheme_ActionType;
(function (Scheme_ActionType) {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    Scheme_ActionType[Scheme_ActionType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from protobuf enum value: SHOW_TOAST = 1;
     */
    Scheme_ActionType[Scheme_ActionType["SHOW_TOAST"] = 1] = "SHOW_TOAST";
})(Scheme_ActionType || (Scheme_ActionType = {}));
/**
 * 杜比类型
 *
 * @generated from protobuf enum bilibili.playershared.DolbyItem.Type
 */
export var DolbyItem_Type;
(function (DolbyItem_Type) {
    /**
     * NONE
     *
     * @generated from protobuf enum value: NONE = 0;
     */
    DolbyItem_Type[DolbyItem_Type["NONE"] = 0] = "NONE";
    /**
     * 普通杜比音效
     *
     * @generated from protobuf enum value: COMMON = 1;
     */
    DolbyItem_Type[DolbyItem_Type["COMMON"] = 1] = "COMMON";
    /**
     * 全景杜比音效
     *
     * @generated from protobuf enum value: ATMOS = 2;
     */
    DolbyItem_Type[DolbyItem_Type["ATMOS"] = 2] = "ATMOS";
})(DolbyItem_Type || (DolbyItem_Type = {}));
/**
 * 视频编码
 *
 * @generated from protobuf enum bilibili.playershared.CodeType
 */
export var CodeType;
(function (CodeType) {
    /**
     * 不指定
     *
     * @generated from protobuf enum value: NOCODE = 0;
     */
    CodeType[CodeType["NOCODE"] = 0] = "NOCODE";
    /**
     * H264
     *
     * @generated from protobuf enum value: CODE264 = 1;
     */
    CodeType[CodeType["CODE264"] = 1] = "CODE264";
    /**
     * H265
     *
     * @generated from protobuf enum value: CODE265 = 2;
     */
    CodeType[CodeType["CODE265"] = 2] = "CODE265";
    /**
     * AV1
     *
     * @generated from protobuf enum value: CODEAV1 = 3;
     */
    CodeType[CodeType["CODEAV1"] = 3] = "CODEAV1";
})(CodeType || (CodeType = {}));
/**
 * 功能类型
 *
 * @generated from protobuf enum bilibili.playershared.ConfType
 */
export var ConfType;
(function (ConfType) {
    /**
     * @generated from protobuf enum value: NoType = 0;
     */
    ConfType[ConfType["NoType"] = 0] = "NoType";
    /**
     * @generated from protobuf enum value: FLIPCONF = 1;
     */
    ConfType[ConfType["FLIPCONF"] = 1] = "FLIPCONF";
    /**
     * @generated from protobuf enum value: CASTCONF = 2;
     */
    ConfType[ConfType["CASTCONF"] = 2] = "CASTCONF";
    /**
     * @generated from protobuf enum value: FEEDBACK = 3;
     */
    ConfType[ConfType["FEEDBACK"] = 3] = "FEEDBACK";
    /**
     * @generated from protobuf enum value: SUBTITLE = 4;
     */
    ConfType[ConfType["SUBTITLE"] = 4] = "SUBTITLE";
    /**
     * @generated from protobuf enum value: PLAYBACKRATE = 5;
     */
    ConfType[ConfType["PLAYBACKRATE"] = 5] = "PLAYBACKRATE";
    /**
     * @generated from protobuf enum value: TIMEUP = 6;
     */
    ConfType[ConfType["TIMEUP"] = 6] = "TIMEUP";
    /**
     * @generated from protobuf enum value: PLAYBACKMODE = 7;
     */
    ConfType[ConfType["PLAYBACKMODE"] = 7] = "PLAYBACKMODE";
    /**
     * @generated from protobuf enum value: SCALEMODE = 8;
     */
    ConfType[ConfType["SCALEMODE"] = 8] = "SCALEMODE";
    /**
     * @generated from protobuf enum value: BACKGROUNDPLAY = 9;
     */
    ConfType[ConfType["BACKGROUNDPLAY"] = 9] = "BACKGROUNDPLAY";
    /**
     * @generated from protobuf enum value: LIKE = 10;
     */
    ConfType[ConfType["LIKE"] = 10] = "LIKE";
    /**
     * @generated from protobuf enum value: DISLIKE = 11;
     */
    ConfType[ConfType["DISLIKE"] = 11] = "DISLIKE";
    /**
     * @generated from protobuf enum value: COIN = 12;
     */
    ConfType[ConfType["COIN"] = 12] = "COIN";
    /**
     * @generated from protobuf enum value: ELEC = 13;
     */
    ConfType[ConfType["ELEC"] = 13] = "ELEC";
    /**
     * @generated from protobuf enum value: SHARE = 14;
     */
    ConfType[ConfType["SHARE"] = 14] = "SHARE";
    /**
     * @generated from protobuf enum value: SCREENSHOT = 15;
     */
    ConfType[ConfType["SCREENSHOT"] = 15] = "SCREENSHOT";
    /**
     * @generated from protobuf enum value: LOCKSCREEN = 16;
     */
    ConfType[ConfType["LOCKSCREEN"] = 16] = "LOCKSCREEN";
    /**
     * @generated from protobuf enum value: RECOMMEND = 17;
     */
    ConfType[ConfType["RECOMMEND"] = 17] = "RECOMMEND";
    /**
     * @generated from protobuf enum value: PLAYBACKSPEED = 18;
     */
    ConfType[ConfType["PLAYBACKSPEED"] = 18] = "PLAYBACKSPEED";
    /**
     * @generated from protobuf enum value: DEFINITION = 19;
     */
    ConfType[ConfType["DEFINITION"] = 19] = "DEFINITION";
    /**
     * @generated from protobuf enum value: SELECTIONS = 20;
     */
    ConfType[ConfType["SELECTIONS"] = 20] = "SELECTIONS";
    /**
     * @generated from protobuf enum value: NEXT = 21;
     */
    ConfType[ConfType["NEXT"] = 21] = "NEXT";
    /**
     * @generated from protobuf enum value: EDITDM = 22;
     */
    ConfType[ConfType["EDITDM"] = 22] = "EDITDM";
    /**
     * @generated from protobuf enum value: SMALLWINDOW = 23;
     */
    ConfType[ConfType["SMALLWINDOW"] = 23] = "SMALLWINDOW";
    /**
     * @generated from protobuf enum value: SHAKE = 24;
     */
    ConfType[ConfType["SHAKE"] = 24] = "SHAKE";
    /**
     * @generated from protobuf enum value: OUTERDM = 25;
     */
    ConfType[ConfType["OUTERDM"] = 25] = "OUTERDM";
    /**
     * @generated from protobuf enum value: INNERDM = 26;
     */
    ConfType[ConfType["INNERDM"] = 26] = "INNERDM";
    /**
     * @generated from protobuf enum value: PANORAMA = 27;
     */
    ConfType[ConfType["PANORAMA"] = 27] = "PANORAMA";
    /**
     * @generated from protobuf enum value: DOLBY = 28;
     */
    ConfType[ConfType["DOLBY"] = 28] = "DOLBY";
    /**
     * @generated from protobuf enum value: COLORFILTER = 29;
     */
    ConfType[ConfType["COLORFILTER"] = 29] = "COLORFILTER";
    /**
     * @generated from protobuf enum value: LOSSLESS = 30;
     */
    ConfType[ConfType["LOSSLESS"] = 30] = "LOSSLESS";
    /**
     * @generated from protobuf enum value: FREYAENTER = 31;
     */
    ConfType[ConfType["FREYAENTER"] = 31] = "FREYAENTER";
    /**
     * @generated from protobuf enum value: FREYAFULLENTER = 32;
     */
    ConfType[ConfType["FREYAFULLENTER"] = 32] = "FREYAFULLENTER";
    /**
     * @generated from protobuf enum value: SKIPOPED = 33;
     */
    ConfType[ConfType["SKIPOPED"] = 33] = "SKIPOPED";
    /**
     * @generated from protobuf enum value: RECORDSCREEN = 34;
     */
    ConfType[ConfType["RECORDSCREEN"] = 34] = "RECORDSCREEN";
    /**
     * @generated from protobuf enum value: DUBBING = 35;
     */
    ConfType[ConfType["DUBBING"] = 35] = "DUBBING";
    /**
     * @generated from protobuf enum value: LISTEN = 36;
     */
    ConfType[ConfType["LISTEN"] = 36] = "LISTEN";
})(ConfType || (ConfType = {}));
/**
 * DRM类型
 *
 * @generated from protobuf enum bilibili.playershared.DrmTechType
 */
export var DrmTechType;
(function (DrmTechType) {
    /**
     *
     *
     * @generated from protobuf enum value: UNKNOWN_DRM = 0;
     */
    DrmTechType[DrmTechType["UNKNOWN_DRM"] = 0] = "UNKNOWN_DRM";
    /**
     *
     *
     * @generated from protobuf enum value: FAIR_PLAY = 1;
     */
    DrmTechType[DrmTechType["FAIR_PLAY"] = 1] = "FAIR_PLAY";
    /**
     *
     *
     * @generated from protobuf enum value: WIDE_VINE = 2;
     */
    DrmTechType[DrmTechType["WIDE_VINE"] = 2] = "WIDE_VINE";
    /**
     * 哔哩哔哩自研DRM
     *
     * @generated from protobuf enum value: BILI_DRM = 3;
     */
    DrmTechType[DrmTechType["BILI_DRM"] = 3] = "BILI_DRM";
})(DrmTechType || (DrmTechType = {}));
/**
 * 错误码
 *
 * @generated from protobuf enum bilibili.playershared.PlayErr
 */
export var PlayErr;
(function (PlayErr) {
    /**
     * @generated from protobuf enum value: NoErr = 0;
     */
    PlayErr[PlayErr["NoErr"] = 0] = "NoErr";
    /**
     * 管控类型的错误码
     *
     * @generated from protobuf enum value: WithMultiDeviceLoginErr = 1;
     */
    PlayErr[PlayErr["WithMultiDeviceLoginErr"] = 1] = "WithMultiDeviceLoginErr";
})(PlayErr || (PlayErr = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.UnsupportScene
 */
export var UnsupportScene;
(function (UnsupportScene) {
    /**
     *
     *
     * @generated from protobuf enum value: UNKNOWN_SCENE = 0;
     */
    UnsupportScene[UnsupportScene["UNKNOWN_SCENE"] = 0] = "UNKNOWN_SCENE";
    /**
     *
     *
     * @generated from protobuf enum value: PREMIERE = 1;
     */
    UnsupportScene[UnsupportScene["PREMIERE"] = 1] = "PREMIERE";
})(UnsupportScene || (UnsupportScene = {}));
/**
 * 视频类型
 *
 * @generated from protobuf enum bilibili.playershared.VideoType
 */
export var VideoType;
(function (VideoType) {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    VideoType[VideoType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * 用户生成内容
     *
     * @generated from protobuf enum value: UGC = 1;
     */
    VideoType[VideoType["UGC"] = 1] = "UGC";
    /**
     * 专业生产内容
     *
     * @generated from protobuf enum value: PGC = 2;
     */
    VideoType[VideoType["PGC"] = 2] = "PGC";
})(VideoType || (VideoType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ArcConf$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ArcConf", [
            { no: 1, name: "is_support", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "extra_content", kind: "message", T: () => ExtraContent },
            { no: 4, name: "unsupport_scene", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { isSupport: false, disable: false, unsupportScene: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_support */ 1:
                    message.isSupport = reader.bool();
                    break;
                case /* bool disable */ 2:
                    message.disable = reader.bool();
                    break;
                case /* bilibili.playershared.ExtraContent extra_content */ 3:
                    message.extraContent = ExtraContent.internalBinaryRead(reader, reader.uint32(), options, message.extraContent);
                    break;
                case /* repeated int32 unsupport_scene */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unsupportScene.push(reader.int32());
                    else
                        message.unsupportScene.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_support = 1; */
        if (message.isSupport !== false)
            writer.tag(1, WireType.Varint).bool(message.isSupport);
        /* bool disable = 2; */
        if (message.disable !== false)
            writer.tag(2, WireType.Varint).bool(message.disable);
        /* bilibili.playershared.ExtraContent extra_content = 3; */
        if (message.extraContent)
            ExtraContent.internalBinaryWrite(message.extraContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 unsupport_scene = 4; */
        if (message.unsupportScene.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unsupportScene.length; i++)
                writer.int32(message.unsupportScene[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ArcConf
 */
export const ArcConf = new ArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Button$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Button", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = { text: "", link: "", reportParams: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string link */ 2:
                    message.link = reader.string();
                    break;
                case /* map<string, string> report_params */ 3:
                    this.binaryReadMap3(message.reportParams, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.playershared.Button.report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string link = 2; */
        if (message.link !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.link);
        /* map<string, string> report_params = 3; */
        for (let k of Object.keys(message.reportParams))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.reportParams[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Button
 */
export const Button = new Button$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfValue$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ConfValue", [
            { no: 1, name: "switch_val", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "selected_val", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 switch_val */ 1:
                    message.value = {
                        oneofKind: "switchVal",
                        switchVal: reader.int32()
                    };
                    break;
                case /* int32 selected_val */ 2:
                    message.value = {
                        oneofKind: "selectedVal",
                        selectedVal: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 switch_val = 1; */
        if (message.value.oneofKind === "switchVal")
            writer.tag(1, WireType.Varint).int32(message.value.switchVal);
        /* int32 selected_val = 2; */
        if (message.value.oneofKind === "selectedVal")
            writer.tag(2, WireType.Varint).int32(message.value.selectedVal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ConfValue
 */
export const ConfValue = new ConfValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceConf$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.DeviceConf", [
            { no: 1, name: "conf_value", kind: "message", T: () => ConfValue }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.ConfValue conf_value */ 1:
                    message.confValue = ConfValue.internalBinaryRead(reader, reader.uint32(), options, message.confValue);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.ConfValue conf_value = 1; */
        if (message.confValue)
            ConfValue.internalBinaryWrite(message.confValue, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DeviceConf
 */
export const DeviceConf = new DeviceConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraContent$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ExtraContent", [
            { no: 1, name: "disable_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "disable_code", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { disableReason: "", disableCode: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string disable_reason */ 1:
                    message.disableReason = reader.string();
                    break;
                case /* uint64 disable_code */ 2:
                    message.disableCode = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string disable_reason = 1; */
        if (message.disableReason !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.disableReason);
        /* uint64 disable_code = 2; */
        if (message.disableCode !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.disableCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ExtraContent
 */
export const ExtraContent = new ExtraContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class History$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.History", [
            { no: 1, name: "current_video", kind: "message", T: () => HistoryInfo },
            { no: 2, name: "related_video", kind: "message", T: () => HistoryInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.HistoryInfo current_video */ 1:
                    message.currentVideo = HistoryInfo.internalBinaryRead(reader, reader.uint32(), options, message.currentVideo);
                    break;
                case /* bilibili.playershared.HistoryInfo related_video */ 2:
                    message.relatedVideo = HistoryInfo.internalBinaryRead(reader, reader.uint32(), options, message.relatedVideo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.HistoryInfo current_video = 1; */
        if (message.currentVideo)
            HistoryInfo.internalBinaryWrite(message.currentVideo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.HistoryInfo related_video = 2; */
        if (message.relatedVideo)
            HistoryInfo.internalBinaryWrite(message.relatedVideo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.History
 */
export const History = new History$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoryInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.HistoryInfo", [
            { no: 1, name: "progress", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "last_play_cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { progress: 0n, lastPlayCid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 progress */ 1:
                    message.progress = reader.int64().toBigInt();
                    break;
                case /* int64 last_play_cid */ 2:
                    message.lastPlayCid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 progress = 1; */
        if (message.progress !== 0n)
            writer.tag(1, WireType.Varint).int64(message.progress);
        /* int64 last_play_cid = 2; */
        if (message.lastPlayCid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lastPlayCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.HistoryInfo
 */
export const HistoryInfo = new HistoryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayDeviceConf$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.PlayDeviceConf", [
            { no: 1, name: "arc_confs", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => DeviceConf } }
        ]);
    }
    create(value) {
        const message = { arcConfs: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int32, bilibili.playershared.DeviceConf> arc_confs */ 1:
                    this.binaryReadMap1(message.arcConfs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = DeviceConf.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.playershared.PlayDeviceConf.arc_confs");
            }
        }
        map[key ?? 0] = val ?? DeviceConf.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<int32, bilibili.playershared.DeviceConf> arc_confs = 1; */
        for (let k of Object.keys(message.arcConfs)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            DeviceConf.internalBinaryWrite(message.arcConfs[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayDeviceConf
 */
export const PlayDeviceConf = new PlayDeviceConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Scheme$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Scheme", [
            { no: 1, name: "action_type", kind: "enum", T: () => ["bilibili.playershared.Scheme.ActionType", Scheme_ActionType] },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { actionType: 0, toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.Scheme.ActionType action_type */ 1:
                    message.actionType = reader.int32();
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.Scheme.ActionType action_type = 1; */
        if (message.actionType !== 0)
            writer.tag(1, WireType.Varint).int32(message.actionType);
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Scheme
 */
export const Scheme = new Scheme$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Stream$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Stream", [
            { no: 1, name: "stream_info", kind: "message", T: () => StreamInfo },
            { no: 2, name: "dash_video", kind: "message", oneof: "content", T: () => DashVideo },
            { no: 3, name: "segment_video", kind: "message", oneof: "content", T: () => SegmentVideo }
        ]);
    }
    create(value) {
        const message = { content: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.StreamInfo stream_info */ 1:
                    message.streamInfo = StreamInfo.internalBinaryRead(reader, reader.uint32(), options, message.streamInfo);
                    break;
                case /* bilibili.playershared.DashVideo dash_video */ 2:
                    message.content = {
                        oneofKind: "dashVideo",
                        dashVideo: DashVideo.internalBinaryRead(reader, reader.uint32(), options, message.content.dashVideo)
                    };
                    break;
                case /* bilibili.playershared.SegmentVideo segment_video */ 3:
                    message.content = {
                        oneofKind: "segmentVideo",
                        segmentVideo: SegmentVideo.internalBinaryRead(reader, reader.uint32(), options, message.content.segmentVideo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.StreamInfo stream_info = 1; */
        if (message.streamInfo)
            StreamInfo.internalBinaryWrite(message.streamInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.DashVideo dash_video = 2; */
        if (message.content.oneofKind === "dashVideo")
            DashVideo.internalBinaryWrite(message.content.dashVideo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.SegmentVideo segment_video = 3; */
        if (message.content.oneofKind === "segmentVideo")
            SegmentVideo.internalBinaryWrite(message.content.segmentVideo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Stream
 */
export const Stream = new Stream$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.StreamInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "err_code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "limit", kind: "message", T: () => StreamLimit },
            { no: 6, name: "need_vip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "need_login", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "intact", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "attribute", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "new_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "display_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "superscript", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "vip_free", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "scheme", kind: "message", T: () => Scheme },
            { no: 17, name: "support_drm", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { quality: 0, format: "", description: "", errCode: 0, needVip: false, needLogin: false, intact: false, noRexcode: false, attribute: 0n, newDescription: "", displayDesc: "", superscript: "", vipFree: false, subtitle: "", supportDrm: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* uint32 err_code */ 4:
                    message.errCode = reader.uint32();
                    break;
                case /* bilibili.playershared.StreamLimit limit */ 5:
                    message.limit = StreamLimit.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* bool need_vip */ 6:
                    message.needVip = reader.bool();
                    break;
                case /* bool need_login */ 7:
                    message.needLogin = reader.bool();
                    break;
                case /* bool intact */ 8:
                    message.intact = reader.bool();
                    break;
                case /* bool no_rexcode */ 9:
                    message.noRexcode = reader.bool();
                    break;
                case /* int64 attribute */ 10:
                    message.attribute = reader.int64().toBigInt();
                    break;
                case /* string new_description */ 11:
                    message.newDescription = reader.string();
                    break;
                case /* string display_desc */ 12:
                    message.displayDesc = reader.string();
                    break;
                case /* string superscript */ 13:
                    message.superscript = reader.string();
                    break;
                case /* bool vip_free */ 14:
                    message.vipFree = reader.bool();
                    break;
                case /* string subtitle */ 15:
                    message.subtitle = reader.string();
                    break;
                case /* bilibili.playershared.Scheme scheme */ 16:
                    message.scheme = Scheme.internalBinaryRead(reader, reader.uint32(), options, message.scheme);
                    break;
                case /* bool support_drm */ 17:
                    message.supportDrm = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* uint32 err_code = 4; */
        if (message.errCode !== 0)
            writer.tag(4, WireType.Varint).uint32(message.errCode);
        /* bilibili.playershared.StreamLimit limit = 5; */
        if (message.limit)
            StreamLimit.internalBinaryWrite(message.limit, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool need_vip = 6; */
        if (message.needVip !== false)
            writer.tag(6, WireType.Varint).bool(message.needVip);
        /* bool need_login = 7; */
        if (message.needLogin !== false)
            writer.tag(7, WireType.Varint).bool(message.needLogin);
        /* bool intact = 8; */
        if (message.intact !== false)
            writer.tag(8, WireType.Varint).bool(message.intact);
        /* bool no_rexcode = 9; */
        if (message.noRexcode !== false)
            writer.tag(9, WireType.Varint).bool(message.noRexcode);
        /* int64 attribute = 10; */
        if (message.attribute !== 0n)
            writer.tag(10, WireType.Varint).int64(message.attribute);
        /* string new_description = 11; */
        if (message.newDescription !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.newDescription);
        /* string display_desc = 12; */
        if (message.displayDesc !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.displayDesc);
        /* string superscript = 13; */
        if (message.superscript !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.superscript);
        /* bool vip_free = 14; */
        if (message.vipFree !== false)
            writer.tag(14, WireType.Varint).bool(message.vipFree);
        /* string subtitle = 15; */
        if (message.subtitle !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.subtitle);
        /* bilibili.playershared.Scheme scheme = 16; */
        if (message.scheme)
            Scheme.internalBinaryWrite(message.scheme, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* bool support_drm = 17; */
        if (message.supportDrm !== false)
            writer.tag(17, WireType.Varint).bool(message.supportDrm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.StreamInfo
 */
export const StreamInfo = new StreamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashItem$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.DashItem", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0, baseUrl: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0n, frameRate: "", widevinePssh: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string base_url */ 2:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 3:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 4:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 5:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 7:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* string frame_rate */ 8:
                    message.frameRate = reader.string();
                    break;
                case /* string widevine_pssh */ 9:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string base_url = 2; */
        if (message.baseUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 3; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 4; */
        if (message.bandwidth !== 0)
            writer.tag(4, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 5; */
        if (message.codecid !== 0)
            writer.tag(5, WireType.Varint).uint32(message.codecid);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 7; */
        if (message.size !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.size);
        /* string frame_rate = 8; */
        if (message.frameRate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.frameRate);
        /* string widevine_pssh = 9; */
        if (message.widevinePssh !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DashItem
 */
export const DashItem = new DashItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashVideo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.DashVideo", [
            { no: 1, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "audio_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { baseUrl: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0n, audioId: 0, noRexcode: false, frameRate: "", width: 0, height: 0, widevinePssh: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string base_url */ 1:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 2:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 3:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 4:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 5:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 6:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* uint32 audio_id */ 7:
                    message.audioId = reader.uint32();
                    break;
                case /* bool no_rexcode */ 8:
                    message.noRexcode = reader.bool();
                    break;
                case /* string frame_rate */ 9:
                    message.frameRate = reader.string();
                    break;
                case /* int32 width */ 10:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 11:
                    message.height = reader.int32();
                    break;
                case /* string widevine_pssh */ 12:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string base_url = 1; */
        if (message.baseUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 2; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 3; */
        if (message.bandwidth !== 0)
            writer.tag(3, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 4; */
        if (message.codecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.codecid);
        /* string md5 = 5; */
        if (message.md5 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 6; */
        if (message.size !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.size);
        /* uint32 audio_id = 7; */
        if (message.audioId !== 0)
            writer.tag(7, WireType.Varint).uint32(message.audioId);
        /* bool no_rexcode = 8; */
        if (message.noRexcode !== false)
            writer.tag(8, WireType.Varint).bool(message.noRexcode);
        /* string frame_rate = 9; */
        if (message.frameRate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.frameRate);
        /* int32 width = 10; */
        if (message.width !== 0)
            writer.tag(10, WireType.Varint).int32(message.width);
        /* int32 height = 11; */
        if (message.height !== 0)
            writer.tag(11, WireType.Varint).int32(message.height);
        /* string widevine_pssh = 12; */
        if (message.widevinePssh !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DashVideo
 */
export const DashVideo = new DashVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SegmentVideo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.SegmentVideo", [
            { no: 1, name: "segment", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResponseUrl }
        ]);
    }
    create(value) {
        const message = { segment: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.playershared.ResponseUrl segment */ 1:
                    message.segment.push(ResponseUrl.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.playershared.ResponseUrl segment = 1; */
        for (let i = 0; i < message.segment.length; i++)
            ResponseUrl.internalBinaryWrite(message.segment[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.SegmentVideo
 */
export const SegmentVideo = new SegmentVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseUrl$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ResponseUrl", [
            { no: 1, name: "order", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "length", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { order: 0, length: 0n, size: 0n, url: "", backupUrl: [], md5: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 order */ 1:
                    message.order = reader.uint32();
                    break;
                case /* uint64 length */ 2:
                    message.length = reader.uint64().toBigInt();
                    break;
                case /* uint64 size */ 3:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* string url */ 4:
                    message.url = reader.string();
                    break;
                case /* repeated string backup_url */ 5:
                    message.backupUrl.push(reader.string());
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 order = 1; */
        if (message.order !== 0)
            writer.tag(1, WireType.Varint).uint32(message.order);
        /* uint64 length = 2; */
        if (message.length !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.length);
        /* uint64 size = 3; */
        if (message.size !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.size);
        /* string url = 4; */
        if (message.url !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.url);
        /* repeated string backup_url = 5; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ResponseUrl
 */
export const ResponseUrl = new ResponseUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseDash$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ResponseDash", [
            { no: 1, name: "video", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem },
            { no: 2, name: "audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem }
        ]);
    }
    create(value) {
        const message = { video: [], audio: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.playershared.DashItem video */ 1:
                    message.video.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.playershared.DashItem audio */ 2:
                    message.audio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.playershared.DashItem video = 1; */
        for (let i = 0; i < message.video.length; i++)
            DashItem.internalBinaryWrite(message.video[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.playershared.DashItem audio = 2; */
        for (let i = 0; i < message.audio.length; i++)
            DashItem.internalBinaryWrite(message.audio[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ResponseDash
 */
export const ResponseDash = new ResponseDash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLimit$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.StreamLimit", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", uri: "", msg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.StreamLimit
 */
export const StreamLimit = new StreamLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoVod$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.VideoVod", [
            { no: 1, name: "aid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "qn", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "fnver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "fnval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "download", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "force_host", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fourk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "prefer_codec_type", kind: "enum", T: () => ["bilibili.playershared.CodeType", CodeType] },
            { no: 10, name: "voice_balance", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0, cid: 0, qn: 0, fnver: 0, fnval: 0, download: 0, forceHost: 0, fourk: false, preferCodecType: 0, voiceBalance: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 aid */ 1:
                    message.aid = reader.int32();
                    break;
                case /* int32 cid */ 2:
                    message.cid = reader.int32();
                    break;
                case /* uint64 qn = 3 [jstype = JS_NUMBER];*/ 3:
                    message.qn = reader.uint64().toNumber();
                    break;
                case /* int32 fnver */ 4:
                    message.fnver = reader.int32();
                    break;
                case /* int32 fnval */ 5:
                    message.fnval = reader.int32();
                    break;
                case /* uint32 download */ 6:
                    message.download = reader.uint32();
                    break;
                case /* int32 force_host */ 7:
                    message.forceHost = reader.int32();
                    break;
                case /* bool fourk */ 8:
                    message.fourk = reader.bool();
                    break;
                case /* bilibili.playershared.CodeType prefer_codec_type */ 9:
                    message.preferCodecType = reader.int32();
                    break;
                case /* uint64 voice_balance = 10 [jstype = JS_NUMBER];*/ 10:
                    message.voiceBalance = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 aid = 1; */
        if (message.aid !== 0)
            writer.tag(1, WireType.Varint).int32(message.aid);
        /* int32 cid = 2; */
        if (message.cid !== 0)
            writer.tag(2, WireType.Varint).int32(message.cid);
        /* uint64 qn = 3 [jstype = JS_NUMBER]; */
        if (message.qn !== 0)
            writer.tag(3, WireType.Varint).uint64(message.qn);
        /* int32 fnver = 4; */
        if (message.fnver !== 0)
            writer.tag(4, WireType.Varint).int32(message.fnver);
        /* int32 fnval = 5; */
        if (message.fnval !== 0)
            writer.tag(5, WireType.Varint).int32(message.fnval);
        /* uint32 download = 6; */
        if (message.download !== 0)
            writer.tag(6, WireType.Varint).uint32(message.download);
        /* int32 force_host = 7; */
        if (message.forceHost !== 0)
            writer.tag(7, WireType.Varint).int32(message.forceHost);
        /* bool fourk = 8; */
        if (message.fourk !== false)
            writer.tag(8, WireType.Varint).bool(message.fourk);
        /* bilibili.playershared.CodeType prefer_codec_type = 9; */
        if (message.preferCodecType !== 0)
            writer.tag(9, WireType.Varint).int32(message.preferCodecType);
        /* uint64 voice_balance = 10 [jstype = JS_NUMBER]; */
        if (message.voiceBalance !== 0)
            writer.tag(10, WireType.Varint).uint64(message.voiceBalance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.VideoVod
 */
export const VideoVod = new VideoVod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VodInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.VodInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timelength", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "video_codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stream_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Stream },
            { no: 6, name: "dash_audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem },
            { no: 7, name: "dolby", kind: "message", T: () => DolbyItem },
            { no: 8, name: "volume", kind: "message", T: () => VolumeInfo },
            { no: 9, name: "loss_less_item", kind: "message", T: () => LossLessItem }
        ]);
    }
    create(value) {
        const message = { quality: 0, format: "", timelength: 0, videoCodecid: 0, streamList: [], dashAudio: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* uint64 timelength = 3 [jstype = JS_NUMBER];*/ 3:
                    message.timelength = reader.uint64().toNumber();
                    break;
                case /* uint32 video_codecid */ 4:
                    message.videoCodecid = reader.uint32();
                    break;
                case /* repeated bilibili.playershared.Stream stream_list */ 5:
                    message.streamList.push(Stream.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.playershared.DashItem dash_audio */ 6:
                    message.dashAudio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.playershared.DolbyItem dolby */ 7:
                    message.dolby = DolbyItem.internalBinaryRead(reader, reader.uint32(), options, message.dolby);
                    break;
                case /* bilibili.playershared.VolumeInfo volume */ 8:
                    message.volume = VolumeInfo.internalBinaryRead(reader, reader.uint32(), options, message.volume);
                    break;
                case /* bilibili.playershared.LossLessItem loss_less_item */ 9:
                    message.lossLessItem = LossLessItem.internalBinaryRead(reader, reader.uint32(), options, message.lossLessItem);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* uint64 timelength = 3 [jstype = JS_NUMBER]; */
        if (message.timelength !== 0)
            writer.tag(3, WireType.Varint).uint64(message.timelength);
        /* uint32 video_codecid = 4; */
        if (message.videoCodecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.videoCodecid);
        /* repeated bilibili.playershared.Stream stream_list = 5; */
        for (let i = 0; i < message.streamList.length; i++)
            Stream.internalBinaryWrite(message.streamList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.playershared.DashItem dash_audio = 6; */
        for (let i = 0; i < message.dashAudio.length; i++)
            DashItem.internalBinaryWrite(message.dashAudio[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.DolbyItem dolby = 7; */
        if (message.dolby)
            DolbyItem.internalBinaryWrite(message.dolby, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.VolumeInfo volume = 8; */
        if (message.volume)
            VolumeInfo.internalBinaryWrite(message.volume, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.LossLessItem loss_less_item = 9; */
        if (message.lossLessItem)
            LossLessItem.internalBinaryWrite(message.lossLessItem, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.VodInfo
 */
export const VodInfo = new VodInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DolbyItem$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.DolbyItem", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.playershared.DolbyItem.Type", DolbyItem_Type] },
            { no: 2, name: "audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem }
        ]);
    }
    create(value) {
        const message = { type: 0, audio: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.DolbyItem.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* repeated bilibili.playershared.DashItem audio */ 2:
                    message.audio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.DolbyItem.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* repeated bilibili.playershared.DashItem audio = 2; */
        for (let i = 0; i < message.audio.length; i++)
            DashItem.internalBinaryWrite(message.audio[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DolbyItem
 */
export const DolbyItem = new DolbyItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LossLessItem$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.LossLessItem", [
            { no: 1, name: "is_lossless_audio", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "audio", kind: "message", T: () => DashItem },
            { no: 3, name: "need_vip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { isLosslessAudio: false, needVip: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_lossless_audio */ 1:
                    message.isLosslessAudio = reader.bool();
                    break;
                case /* bilibili.playershared.DashItem audio */ 2:
                    message.audio = DashItem.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                case /* bool need_vip */ 3:
                    message.needVip = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_lossless_audio = 1; */
        if (message.isLosslessAudio !== false)
            writer.tag(1, WireType.Varint).bool(message.isLosslessAudio);
        /* bilibili.playershared.DashItem audio = 2; */
        if (message.audio)
            DashItem.internalBinaryWrite(message.audio, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool need_vip = 3; */
        if (message.needVip !== false)
            writer.tag(3, WireType.Varint).bool(message.needVip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.LossLessItem
 */
export const LossLessItem = new LossLessItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VolumeInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.VolumeInfo", [
            { no: 1, name: "measured_i", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "measured_lra", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "measured_tp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "measured_threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "target_offset", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "target_i", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "target_tp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = { measuredI: 0, measuredLra: 0, measuredTp: 0, measuredThreshold: 0, targetOffset: 0, targetI: 0, targetTp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double measured_i */ 1:
                    message.measuredI = reader.double();
                    break;
                case /* double measured_lra */ 2:
                    message.measuredLra = reader.double();
                    break;
                case /* double measured_tp */ 3:
                    message.measuredTp = reader.double();
                    break;
                case /* double measured_threshold */ 4:
                    message.measuredThreshold = reader.double();
                    break;
                case /* double target_offset */ 5:
                    message.targetOffset = reader.double();
                    break;
                case /* double target_i */ 6:
                    message.targetI = reader.double();
                    break;
                case /* double target_tp */ 7:
                    message.targetTp = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* double measured_i = 1; */
        if (message.measuredI !== 0)
            writer.tag(1, WireType.Bit64).double(message.measuredI);
        /* double measured_lra = 2; */
        if (message.measuredLra !== 0)
            writer.tag(2, WireType.Bit64).double(message.measuredLra);
        /* double measured_tp = 3; */
        if (message.measuredTp !== 0)
            writer.tag(3, WireType.Bit64).double(message.measuredTp);
        /* double measured_threshold = 4; */
        if (message.measuredThreshold !== 0)
            writer.tag(4, WireType.Bit64).double(message.measuredThreshold);
        /* double target_offset = 5; */
        if (message.targetOffset !== 0)
            writer.tag(5, WireType.Bit64).double(message.targetOffset);
        /* double target_i = 6; */
        if (message.targetI !== 0)
            writer.tag(6, WireType.Bit64).double(message.targetI);
        /* double target_tp = 7; */
        if (message.targetTp !== 0)
            writer.tag(7, WireType.Bit64).double(message.targetTp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.VolumeInfo
 */
export const VolumeInfo = new VolumeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayArc$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.PlayArc", [
            { no: 1, name: "video_type", kind: "enum", T: () => ["bilibili.playershared.VideoType", VideoType] },
            { no: 2, name: "aid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "drm_tech_type", kind: "enum", T: () => ["bilibili.playershared.DrmTechType", DrmTechType] }
        ]);
    }
    create(value) {
        const message = { videoType: 0, aid: 0n, cid: 0n, drmTechType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.VideoType video_type */ 1:
                    message.videoType = reader.int32();
                    break;
                case /* uint64 aid */ 2:
                    message.aid = reader.uint64().toBigInt();
                    break;
                case /* uint64 cid */ 3:
                    message.cid = reader.uint64().toBigInt();
                    break;
                case /* bilibili.playershared.DrmTechType drm_tech_type */ 4:
                    message.drmTechType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.VideoType video_type = 1; */
        if (message.videoType !== 0)
            writer.tag(1, WireType.Varint).int32(message.videoType);
        /* uint64 aid = 2; */
        if (message.aid !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.aid);
        /* uint64 cid = 3; */
        if (message.cid !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.cid);
        /* bilibili.playershared.DrmTechType drm_tech_type = 4; */
        if (message.drmTechType !== 0)
            writer.tag(4, WireType.Varint).int32(message.drmTechType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayArc
 */
export const PlayArc = new PlayArc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayArcConf$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.PlayArcConf", [
            { no: 1, name: "arc_confs", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => ArcConf } }
        ]);
    }
    create(value) {
        const message = { arcConfs: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int32, bilibili.playershared.ArcConf> arc_confs */ 1:
                    this.binaryReadMap1(message.arcConfs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = ArcConf.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.playershared.PlayArcConf.arc_confs");
            }
        }
        map[key ?? 0] = val ?? ArcConf.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<int32, bilibili.playershared.ArcConf> arc_confs = 1; */
        for (let k of Object.keys(message.arcConfs)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            ArcConf.internalBinaryWrite(message.arcConfs[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayArcConf
 */
export const PlayArcConf = new PlayArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QnTrialInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.QnTrialInfo", [
            { no: 1, name: "trial_able", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "remaining_times", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "time_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "start_toast", kind: "message", T: () => Toast },
            { no: 6, name: "end_toast", kind: "message", T: () => Toast },
            { no: 8, name: "quality_open_tip_btn", kind: "message", T: () => Button }
        ]);
    }
    create(value) {
        const message = { trialAble: false, remainingTimes: 0, start: 0, timeLength: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool trial_able */ 1:
                    message.trialAble = reader.bool();
                    break;
                case /* int32 remaining_times */ 2:
                    message.remainingTimes = reader.int32();
                    break;
                case /* int32 start */ 3:
                    message.start = reader.int32();
                    break;
                case /* int32 time_length */ 4:
                    message.timeLength = reader.int32();
                    break;
                case /* bilibili.playershared.Toast start_toast */ 5:
                    message.startToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.startToast);
                    break;
                case /* bilibili.playershared.Toast end_toast */ 6:
                    message.endToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.endToast);
                    break;
                case /* bilibili.playershared.Button quality_open_tip_btn */ 8:
                    message.qualityOpenTipBtn = Button.internalBinaryRead(reader, reader.uint32(), options, message.qualityOpenTipBtn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool trial_able = 1; */
        if (message.trialAble !== false)
            writer.tag(1, WireType.Varint).bool(message.trialAble);
        /* int32 remaining_times = 2; */
        if (message.remainingTimes !== 0)
            writer.tag(2, WireType.Varint).int32(message.remainingTimes);
        /* int32 start = 3; */
        if (message.start !== 0)
            writer.tag(3, WireType.Varint).int32(message.start);
        /* int32 time_length = 4; */
        if (message.timeLength !== 0)
            writer.tag(4, WireType.Varint).int32(message.timeLength);
        /* bilibili.playershared.Toast start_toast = 5; */
        if (message.startToast)
            Toast.internalBinaryWrite(message.startToast, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Toast end_toast = 6; */
        if (message.endToast)
            Toast.internalBinaryWrite(message.endToast, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Button quality_open_tip_btn = 8; */
        if (message.qualityOpenTipBtn)
            Button.internalBinaryWrite(message.qualityOpenTipBtn, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.QnTrialInfo
 */
export const QnTrialInfo = new QnTrialInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Toast$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Toast", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "button", kind: "message", T: () => Button }
        ]);
    }
    create(value) {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* bilibili.playershared.Button button */ 2:
                    message.button = Button.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* bilibili.playershared.Button button = 2; */
        if (message.button)
            Button.internalBinaryWrite(message.button, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Toast
 */
export const Toast = new Toast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Event", [
            { no: 1, name: "shake", kind: "message", T: () => Shake }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.Shake shake */ 1:
                    message.shake = Shake.internalBinaryRead(reader, reader.uint32(), options, message.shake);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.Shake shake = 1; */
        if (message.shake)
            Shake.internalBinaryWrite(message.shake, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Shake$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Shake", [
            { no: 1, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { file: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file */ 1:
                    message.file = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string file = 1; */
        if (message.file !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Shake
 */
export const Shake = new Shake$Type();
