// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/playershared/playershared.proto" (package "bilibili.playershared", syntax proto3)
// tslint:disable
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../google/protobuf/any";
/**
 * 杜比类型
 *
 * @generated from protobuf enum bilibili.playershared.DolbyItem.Type
 */
export var DolbyItem_Type;
(function (DolbyItem_Type) {
    /**
     * NONE
     *
     * @generated from protobuf enum value: NONE = 0;
     */
    DolbyItem_Type[DolbyItem_Type["NONE"] = 0] = "NONE";
    /**
     * 普通杜比音效
     *
     * @generated from protobuf enum value: COMMON = 1;
     */
    DolbyItem_Type[DolbyItem_Type["COMMON"] = 1] = "COMMON";
    /**
     * 全景杜比音效
     *
     * @generated from protobuf enum value: ATMOS = 2;
     */
    DolbyItem_Type[DolbyItem_Type["ATMOS"] = 2] = "ATMOS";
})(DolbyItem_Type || (DolbyItem_Type = {}));
/**
 * @generated from protobuf enum bilibili.playershared.Scheme.ActionType
 */
export var Scheme_ActionType;
(function (Scheme_ActionType) {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    Scheme_ActionType[Scheme_ActionType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from protobuf enum value: SHOW_TOAST = 1;
     */
    Scheme_ActionType[Scheme_ActionType["SHOW_TOAST"] = 1] = "SHOW_TOAST";
})(Scheme_ActionType || (Scheme_ActionType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.ArcType
 */
export var ArcType;
(function (ArcType) {
    /**
     *
     *
     * @generated from protobuf enum value: ARC_TYPE_NORMAL = 0;
     */
    ArcType[ArcType["NORMAL"] = 0] = "NORMAL";
    /**
     *
     *
     * @generated from protobuf enum value: ARC_TYPE_INTERACT = 1;
     */
    ArcType[ArcType["INTERACT"] = 1] = "INTERACT";
})(ArcType || (ArcType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.BizType
 */
export var BizType;
(function (BizType) {
    /**
     *
     *
     * @generated from protobuf enum value: BIZ_TYPE_UNKNOWN = 0;
     */
    BizType[BizType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: BIZ_TYPE_UGC = 1;
     */
    BizType[BizType["UGC"] = 1] = "UGC";
    /**
     *
     *
     * @generated from protobuf enum value: BIZ_TYPE_PGC = 2;
     */
    BizType[BizType["PGC"] = 2] = "PGC";
    /**
     *
     *
     * @generated from protobuf enum value: BIZ_TYPE_PUGV = 3;
     */
    BizType[BizType["PUGV"] = 3] = "PUGV";
})(BizType || (BizType = {}));
/**
 * @generated from protobuf enum bilibili.playershared.ButtonAction
 */
export var ButtonAction;
(function (ButtonAction) {
    /**
     *
     *
     * @generated from protobuf enum value: BUTTON_UNKNOWN = 0;
     */
    ButtonAction[ButtonAction["BUTTON_UNKNOWN"] = 0] = "BUTTON_UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: PAY = 1;
     */
    ButtonAction[ButtonAction["PAY"] = 1] = "PAY";
    /**
     *
     *
     * @generated from protobuf enum value: VIP = 2;
     */
    ButtonAction[ButtonAction["VIP"] = 2] = "VIP";
    /**
     *
     *
     * @generated from protobuf enum value: PACK = 3;
     */
    ButtonAction[ButtonAction["PACK"] = 3] = "PACK";
    /**
     *
     *
     * @generated from protobuf enum value: LINK = 4;
     */
    ButtonAction[ButtonAction["LINK"] = 4] = "LINK";
    /**
     *
     *
     * @generated from protobuf enum value: COUPON = 5;
     */
    ButtonAction[ButtonAction["COUPON"] = 5] = "COUPON";
    /**
     *
     *
     * @generated from protobuf enum value: DEMAND = 6;
     */
    ButtonAction[ButtonAction["DEMAND"] = 6] = "DEMAND";
    /**
     *
     *
     * @generated from protobuf enum value: DEMAND_PACK = 7;
     */
    ButtonAction[ButtonAction["DEMAND_PACK"] = 7] = "DEMAND_PACK";
    /**
     *
     *
     * @generated from protobuf enum value: FOLLOW = 8;
     */
    ButtonAction[ButtonAction["FOLLOW"] = 8] = "FOLLOW";
    /**
     *
     *
     * @generated from protobuf enum value: APPOINTMENT = 9;
     */
    ButtonAction[ButtonAction["APPOINTMENT"] = 9] = "APPOINTMENT";
    /**
     *
     *
     * @generated from protobuf enum value: VIP_FREE = 10;
     */
    ButtonAction[ButtonAction["VIP_FREE"] = 10] = "VIP_FREE";
    /**
     *
     *
     * @generated from protobuf enum value: TASK = 11;
     */
    ButtonAction[ButtonAction["TASK"] = 11] = "TASK";
    /**
     *
     *
     * @generated from protobuf enum value: CHARGINGPLUS = 12;
     */
    ButtonAction[ButtonAction["CHARGINGPLUS"] = 12] = "CHARGINGPLUS";
    /**
     *
     *
     * @generated from protobuf enum value: BP = 13;
     */
    ButtonAction[ButtonAction["BP"] = 13] = "BP";
    /**
     *
     *
     * @generated from protobuf enum value: PRE_SELL = 14;
     */
    ButtonAction[ButtonAction["PRE_SELL"] = 14] = "PRE_SELL";
    /**
     *
     *
     * @generated from protobuf enum value: LOGIN = 15;
     */
    ButtonAction[ButtonAction["LOGIN"] = 15] = "LOGIN";
})(ButtonAction || (ButtonAction = {}));
/**
 * 视频编码
 *
 * @generated from protobuf enum bilibili.playershared.CodeType
 */
export var CodeType;
(function (CodeType) {
    /**
     * 不指定
     *
     * @generated from protobuf enum value: NOCODE = 0;
     */
    CodeType[CodeType["NOCODE"] = 0] = "NOCODE";
    /**
     * H264
     *
     * @generated from protobuf enum value: CODE264 = 1;
     */
    CodeType[CodeType["CODE264"] = 1] = "CODE264";
    /**
     * H265
     *
     * @generated from protobuf enum value: CODE265 = 2;
     */
    CodeType[CodeType["CODE265"] = 2] = "CODE265";
    /**
     * AV1
     *
     * @generated from protobuf enum value: CODEAV1 = 3;
     */
    CodeType[CodeType["CODEAV1"] = 3] = "CODEAV1";
})(CodeType || (CodeType = {}));
/**
 * 功能类型
 *
 * @generated from protobuf enum bilibili.playershared.ConfType
 */
export var ConfType;
(function (ConfType) {
    /**
     * @generated from protobuf enum value: NoType = 0;
     */
    ConfType[ConfType["NoType"] = 0] = "NoType";
    /**
     * @generated from protobuf enum value: FLIPCONF = 1;
     */
    ConfType[ConfType["FLIPCONF"] = 1] = "FLIPCONF";
    /**
     * @generated from protobuf enum value: CASTCONF = 2;
     */
    ConfType[ConfType["CASTCONF"] = 2] = "CASTCONF";
    /**
     * @generated from protobuf enum value: FEEDBACK = 3;
     */
    ConfType[ConfType["FEEDBACK"] = 3] = "FEEDBACK";
    /**
     * @generated from protobuf enum value: SUBTITLE = 4;
     */
    ConfType[ConfType["SUBTITLE"] = 4] = "SUBTITLE";
    /**
     * @generated from protobuf enum value: PLAYBACKRATE = 5;
     */
    ConfType[ConfType["PLAYBACKRATE"] = 5] = "PLAYBACKRATE";
    /**
     * @generated from protobuf enum value: TIMEUP = 6;
     */
    ConfType[ConfType["TIMEUP"] = 6] = "TIMEUP";
    /**
     * @generated from protobuf enum value: PLAYBACKMODE = 7;
     */
    ConfType[ConfType["PLAYBACKMODE"] = 7] = "PLAYBACKMODE";
    /**
     * @generated from protobuf enum value: SCALEMODE = 8;
     */
    ConfType[ConfType["SCALEMODE"] = 8] = "SCALEMODE";
    /**
     * @generated from protobuf enum value: BACKGROUNDPLAY = 9;
     */
    ConfType[ConfType["BACKGROUNDPLAY"] = 9] = "BACKGROUNDPLAY";
    /**
     * @generated from protobuf enum value: LIKE = 10;
     */
    ConfType[ConfType["LIKE"] = 10] = "LIKE";
    /**
     * @generated from protobuf enum value: DISLIKE = 11;
     */
    ConfType[ConfType["DISLIKE"] = 11] = "DISLIKE";
    /**
     * @generated from protobuf enum value: COIN = 12;
     */
    ConfType[ConfType["COIN"] = 12] = "COIN";
    /**
     * @generated from protobuf enum value: ELEC = 13;
     */
    ConfType[ConfType["ELEC"] = 13] = "ELEC";
    /**
     * @generated from protobuf enum value: SHARE = 14;
     */
    ConfType[ConfType["SHARE"] = 14] = "SHARE";
    /**
     * @generated from protobuf enum value: SCREENSHOT = 15;
     */
    ConfType[ConfType["SCREENSHOT"] = 15] = "SCREENSHOT";
    /**
     * @generated from protobuf enum value: LOCKSCREEN = 16;
     */
    ConfType[ConfType["LOCKSCREEN"] = 16] = "LOCKSCREEN";
    /**
     * @generated from protobuf enum value: RECOMMEND = 17;
     */
    ConfType[ConfType["RECOMMEND"] = 17] = "RECOMMEND";
    /**
     * @generated from protobuf enum value: PLAYBACKSPEED = 18;
     */
    ConfType[ConfType["PLAYBACKSPEED"] = 18] = "PLAYBACKSPEED";
    /**
     * @generated from protobuf enum value: DEFINITION = 19;
     */
    ConfType[ConfType["DEFINITION"] = 19] = "DEFINITION";
    /**
     * @generated from protobuf enum value: SELECTIONS = 20;
     */
    ConfType[ConfType["SELECTIONS"] = 20] = "SELECTIONS";
    /**
     * @generated from protobuf enum value: NEXT = 21;
     */
    ConfType[ConfType["NEXT"] = 21] = "NEXT";
    /**
     * @generated from protobuf enum value: EDITDM = 22;
     */
    ConfType[ConfType["EDITDM"] = 22] = "EDITDM";
    /**
     * @generated from protobuf enum value: SMALLWINDOW = 23;
     */
    ConfType[ConfType["SMALLWINDOW"] = 23] = "SMALLWINDOW";
    /**
     * @generated from protobuf enum value: SHAKE = 24;
     */
    ConfType[ConfType["SHAKE"] = 24] = "SHAKE";
    /**
     * @generated from protobuf enum value: OUTERDM = 25;
     */
    ConfType[ConfType["OUTERDM"] = 25] = "OUTERDM";
    /**
     * @generated from protobuf enum value: INNERDM = 26;
     */
    ConfType[ConfType["INNERDM"] = 26] = "INNERDM";
    /**
     * @generated from protobuf enum value: PANORAMA = 27;
     */
    ConfType[ConfType["PANORAMA"] = 27] = "PANORAMA";
    /**
     * @generated from protobuf enum value: DOLBY = 28;
     */
    ConfType[ConfType["DOLBY"] = 28] = "DOLBY";
    /**
     * @generated from protobuf enum value: COLORFILTER = 29;
     */
    ConfType[ConfType["COLORFILTER"] = 29] = "COLORFILTER";
    /**
     * @generated from protobuf enum value: LOSSLESS = 30;
     */
    ConfType[ConfType["LOSSLESS"] = 30] = "LOSSLESS";
    /**
     * @generated from protobuf enum value: FREYAENTER = 31;
     */
    ConfType[ConfType["FREYAENTER"] = 31] = "FREYAENTER";
    /**
     * @generated from protobuf enum value: FREYAFULLENTER = 32;
     */
    ConfType[ConfType["FREYAFULLENTER"] = 32] = "FREYAFULLENTER";
    /**
     * @generated from protobuf enum value: SKIPOPED = 33;
     */
    ConfType[ConfType["SKIPOPED"] = 33] = "SKIPOPED";
    /**
     * @generated from protobuf enum value: RECORDSCREEN = 34;
     */
    ConfType[ConfType["RECORDSCREEN"] = 34] = "RECORDSCREEN";
    /**
     * @generated from protobuf enum value: DUBBING = 35;
     */
    ConfType[ConfType["DUBBING"] = 35] = "DUBBING";
    /**
     * @generated from protobuf enum value: LISTEN = 36;
     */
    ConfType[ConfType["LISTEN"] = 36] = "LISTEN";
})(ConfType || (ConfType = {}));
/**
 * DRM类型
 *
 * @generated from protobuf enum bilibili.playershared.DrmTechType
 */
export var DrmTechType;
(function (DrmTechType) {
    /**
     *
     *
     * @generated from protobuf enum value: UNKNOWN_DRM = 0;
     */
    DrmTechType[DrmTechType["UNKNOWN_DRM"] = 0] = "UNKNOWN_DRM";
    /**
     *
     *
     * @generated from protobuf enum value: FAIR_PLAY = 1;
     */
    DrmTechType[DrmTechType["FAIR_PLAY"] = 1] = "FAIR_PLAY";
    /**
     *
     *
     * @generated from protobuf enum value: WIDE_VINE = 2;
     */
    DrmTechType[DrmTechType["WIDE_VINE"] = 2] = "WIDE_VINE";
    /**
     * 哔哩哔哩自研DRM
     *
     * @generated from protobuf enum value: BILI_DRM = 3;
     */
    DrmTechType[DrmTechType["BILI_DRM"] = 3] = "BILI_DRM";
})(DrmTechType || (DrmTechType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.Effects
 */
export var Effects;
(function (Effects) {
    /**
     *
     *
     * @generated from protobuf enum value: EFFECTS_UNKNOWN = 0;
     */
    Effects[Effects["EFFECTS_UNKNOWN"] = 0] = "EFFECTS_UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: GAUSSIAN_BLUR = 1;
     */
    Effects[Effects["GAUSSIAN_BLUR"] = 1] = "GAUSSIAN_BLUR";
    /**
     *
     *
     * @generated from protobuf enum value: HALF_ALPHA = 2;
     */
    Effects[Effects["HALF_ALPHA"] = 2] = "HALF_ALPHA";
})(Effects || (Effects = {}));
/**
 * @generated from protobuf enum bilibili.playershared.ExtDataType
 */
export var ExtDataType;
(function (ExtDataType) {
    /**
     *
     *
     * @generated from protobuf enum value: EXT_DATA_TYPE_UNKNOWN = 0;
     */
    ExtDataType[ExtDataType["EXT_DATA_TYPE_UNKNOWN"] = 0] = "EXT_DATA_TYPE_UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: PLAY_LIST = 1;
     */
    ExtDataType[ExtDataType["PLAY_LIST"] = 1] = "PLAY_LIST";
})(ExtDataType || (ExtDataType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.FragmentPosition
 */
export var FragmentPosition;
(function (FragmentPosition) {
    /**
     * @generated from protobuf enum value: INVALID = 0;
     */
    FragmentPosition[FragmentPosition["INVALID"] = 0] = "INVALID";
    /**
     * @generated from protobuf enum value: PRE = 1;
     */
    FragmentPosition[FragmentPosition["PRE"] = 1] = "PRE";
    /**
     * @generated from protobuf enum value: MIDDLE = 2;
     */
    FragmentPosition[FragmentPosition["MIDDLE"] = 2] = "MIDDLE";
    /**
     * @generated from protobuf enum value: POST = 3;
     */
    FragmentPosition[FragmentPosition["POST"] = 3] = "POST";
})(FragmentPosition || (FragmentPosition = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.FragmentType
 */
export var FragmentType;
(function (FragmentType) {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    FragmentType[FragmentType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from protobuf enum value: AD_FRAGMENT = 1;
     */
    FragmentType[FragmentType["AD_FRAGMENT"] = 1] = "AD_FRAGMENT";
    /**
     * @generated from protobuf enum value: OGV_FRAGMENT = 2;
     */
    FragmentType[FragmentType["OGV_FRAGMENT"] = 2] = "OGV_FRAGMENT";
})(FragmentType || (FragmentType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.GuideStyle
 */
export var GuideStyle;
(function (GuideStyle) {
    /**
     *
     *
     * @generated from protobuf enum value: STYLE_UNKNOWN = 0;
     */
    GuideStyle[GuideStyle["STYLE_UNKNOWN"] = 0] = "STYLE_UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: HORIZONTAL_IMAGE = 1;
     */
    GuideStyle[GuideStyle["HORIZONTAL_IMAGE"] = 1] = "HORIZONTAL_IMAGE";
    /**
     *
     *
     * @generated from protobuf enum value: VERTICAL_TEXT = 2;
     */
    GuideStyle[GuideStyle["VERTICAL_TEXT"] = 2] = "VERTICAL_TEXT";
    /**
     *
     *
     * @generated from protobuf enum value: SIMPLE_TEXT = 3;
     */
    GuideStyle[GuideStyle["SIMPLE_TEXT"] = 3] = "SIMPLE_TEXT";
    /**
     *
     *
     * @generated from protobuf enum value: CHARGING_TEXT = 4;
     */
    GuideStyle[GuideStyle["CHARGING_TEXT"] = 4] = "CHARGING_TEXT";
})(GuideStyle || (GuideStyle = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.LimitActionType
 */
export var LimitActionType;
(function (LimitActionType) {
    /**
     *
     *
     * @generated from protobuf enum value: LAT_UNKNOWN = 0;
     */
    LimitActionType[LimitActionType["LAT_UNKNOWN"] = 0] = "LAT_UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: SHOW_LIMIT_DIALOG = 1;
     */
    LimitActionType[LimitActionType["SHOW_LIMIT_DIALOG"] = 1] = "SHOW_LIMIT_DIALOG";
    /**
     *
     *
     * @generated from protobuf enum value: SKIP_CURRENT_EP = 2;
     */
    LimitActionType[LimitActionType["SKIP_CURRENT_EP"] = 2] = "SKIP_CURRENT_EP";
})(LimitActionType || (LimitActionType = {}));
/**
 * 错误码
 *
 * @generated from protobuf enum bilibili.playershared.PlayErr
 */
export var PlayErr;
(function (PlayErr) {
    /**
     * @generated from protobuf enum value: NoErr = 0;
     */
    PlayErr[PlayErr["NoErr"] = 0] = "NoErr";
    /**
     * 管控类型的错误码
     *
     * @generated from protobuf enum value: WithMultiDeviceLoginErr = 1;
     */
    PlayErr[PlayErr["WithMultiDeviceLoginErr"] = 1] = "WithMultiDeviceLoginErr";
})(PlayErr || (PlayErr = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.PromptBarStyle
 */
export var PromptBarStyle;
(function (PromptBarStyle) {
    /**
     * @generated from protobuf enum value: PROMPT_BAR_STYLE_UNKNOWN = 0;
     */
    PromptBarStyle[PromptBarStyle["PROMPT_BAR_STYLE_UNKNOWN"] = 0] = "PROMPT_BAR_STYLE_UNKNOWN";
    /**
     * @generated from protobuf enum value: TEXT = 1;
     */
    PromptBarStyle[PromptBarStyle["TEXT"] = 1] = "TEXT";
    /**
     * @generated from protobuf enum value: CURING_BENEFITS = 2;
     */
    PromptBarStyle[PromptBarStyle["CURING_BENEFITS"] = 2] = "CURING_BENEFITS";
    /**
     * @generated from protobuf enum value: CARD_OPENING_GIFT = 3;
     */
    PromptBarStyle[PromptBarStyle["CARD_OPENING_GIFT"] = 3] = "CARD_OPENING_GIFT";
    /**
     * @generated from protobuf enum value: COUNTDOWN = 4;
     */
    PromptBarStyle[PromptBarStyle["COUNTDOWN"] = 4] = "COUNTDOWN";
})(PromptBarStyle || (PromptBarStyle = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.PromptBarType
 */
export var PromptBarType;
(function (PromptBarType) {
    /**
     * @generated from protobuf enum value: PROMPT_BAR_TYPE_UNKNOWN = 0;
     */
    PromptBarType[PromptBarType["PROMPT_BAR_TYPE_UNKNOWN"] = 0] = "PROMPT_BAR_TYPE_UNKNOWN";
    /**
     * @generated from protobuf enum value: OPEN_PROMPT_BAR = 1;
     */
    PromptBarType[PromptBarType["OPEN_PROMPT_BAR"] = 1] = "OPEN_PROMPT_BAR";
})(PromptBarType || (PromptBarType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.ShowStyleType
 */
export var ShowStyleType;
(function (ShowStyleType) {
    /**
     *
     *
     * @generated from protobuf enum value: SHOW_STYLE_TYPE_UNKNOWN = 0;
     */
    ShowStyleType[ShowStyleType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: SHOW_STYLE_TYPE_ORDINARY = 1;
     */
    ShowStyleType[ShowStyleType["ORDINARY"] = 1] = "ORDINARY";
    /**
     *
     *
     * @generated from protobuf enum value: SHOW_STYLE_TYPE_RESIDENT = 2;
     */
    ShowStyleType[ShowStyleType["RESIDENT"] = 2] = "RESIDENT";
})(ShowStyleType || (ShowStyleType = {}));
/**
 * @generated from protobuf enum bilibili.playershared.ToastType
 */
export var ToastType;
(function (ToastType) {
    /**
     *
     *
     * @generated from protobuf enum value: TOAST_TYPE_UNKNOWN = 0;
     */
    ToastType[ToastType["TOAST_TYPE_UNKNOWN"] = 0] = "TOAST_TYPE_UNKNOWN";
    /**
     *
     *
     * @generated from protobuf enum value: VIP_CONTENT_REMIND = 1;
     */
    ToastType[ToastType["VIP_CONTENT_REMIND"] = 1] = "VIP_CONTENT_REMIND";
    /**
     *
     *
     * @generated from protobuf enum value: VIP_DEFINITION_REMIND = 2;
     */
    ToastType[ToastType["VIP_DEFINITION_REMIND"] = 2] = "VIP_DEFINITION_REMIND";
    /**
     *
     *
     * @generated from protobuf enum value: VIP_DEFINITION_GUIDE = 3;
     */
    ToastType[ToastType["VIP_DEFINITION_GUIDE"] = 3] = "VIP_DEFINITION_GUIDE";
    /**
     *
     *
     * @generated from protobuf enum value: OGV_VIDEO_START_TOAST = 4;
     */
    ToastType[ToastType["OGV_VIDEO_START_TOAST"] = 4] = "OGV_VIDEO_START_TOAST";
    /**
     *
     *
     * @generated from protobuf enum value: CHARGING_TOAST = 5;
     */
    ToastType[ToastType["CHARGING_TOAST"] = 5] = "CHARGING_TOAST";
    /**
     *
     *
     * @generated from protobuf enum value: VIP_SKIP_FRAGMENT_TOAST = 6;
     */
    ToastType[ToastType["VIP_SKIP_FRAGMENT_TOAST"] = 6] = "VIP_SKIP_FRAGMENT_TOAST";
})(ToastType || (ToastType = {}));
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.UnsupportScene
 */
export var UnsupportScene;
(function (UnsupportScene) {
    /**
     *
     *
     * @generated from protobuf enum value: UNKNOWN_SCENE = 0;
     */
    UnsupportScene[UnsupportScene["UNKNOWN_SCENE"] = 0] = "UNKNOWN_SCENE";
    /**
     *
     *
     * @generated from protobuf enum value: PREMIERE = 1;
     */
    UnsupportScene[UnsupportScene["PREMIERE"] = 1] = "PREMIERE";
})(UnsupportScene || (UnsupportScene = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ArcConf$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ArcConf", [
            { no: 1, name: "is_support", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "disabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "extra_content", kind: "message", T: () => ExtraContent },
            { no: 4, name: "unsupport_scene", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.isSupport = false;
        message.disabled = false;
        message.unsupportScene = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_support */ 1:
                    message.isSupport = reader.bool();
                    break;
                case /* bool disabled */ 2:
                    message.disabled = reader.bool();
                    break;
                case /* bilibili.playershared.ExtraContent extra_content */ 3:
                    message.extraContent = ExtraContent.internalBinaryRead(reader, reader.uint32(), options, message.extraContent);
                    break;
                case /* repeated int32 unsupport_scene */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unsupportScene.push(reader.int32());
                    else
                        message.unsupportScene.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_support = 1; */
        if (message.isSupport !== false)
            writer.tag(1, WireType.Varint).bool(message.isSupport);
        /* bool disabled = 2; */
        if (message.disabled !== false)
            writer.tag(2, WireType.Varint).bool(message.disabled);
        /* bilibili.playershared.ExtraContent extra_content = 3; */
        if (message.extraContent)
            ExtraContent.internalBinaryWrite(message.extraContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 unsupport_scene = 4; */
        if (message.unsupportScene.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unsupportScene.length; i++)
                writer.int32(message.unsupportScene[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ArcConf
 */
export const ArcConf = new ArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackgroundInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.BackgroundInfo", [
            { no: 1, name: "drawable_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "drawable_bitmap_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "effects", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.drawableColor = "";
        message.drawableBitmapUrl = "";
        message.effects = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drawable_color */ 1:
                    message.drawableColor = reader.string();
                    break;
                case /* string drawable_bitmap_url */ 2:
                    message.drawableBitmapUrl = reader.string();
                    break;
                case /* int32 effects */ 3:
                    message.effects = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string drawable_color = 1; */
        if (message.drawableColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.drawableColor);
        /* string drawable_bitmap_url = 2; */
        if (message.drawableBitmapUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.drawableBitmapUrl);
        /* int32 effects = 3; */
        if (message.effects !== 0)
            writer.tag(3, WireType.Varint).int32(message.effects);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.BackgroundInfo
 */
export const BackgroundInfo = new BackgroundInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BadgeInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.BadgeInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_gradient_color", kind: "message", T: () => GradientColor },
            { no: 6, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.bgColor = "";
        message.bgColorNight = "";
        message.textColor = "";
        message.img = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string bg_color */ 2:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 3:
                    message.bgColorNight = reader.string();
                    break;
                case /* string text_color */ 4:
                    message.textColor = reader.string();
                    break;
                case /* bilibili.playershared.GradientColor bg_gradient_color */ 5:
                    message.bgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.bgGradientColor);
                    break;
                case /* string img */ 6:
                    message.img = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string bg_color = 2; */
        if (message.bgColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 3; */
        if (message.bgColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bgColorNight);
        /* string text_color = 4; */
        if (message.textColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.textColor);
        /* bilibili.playershared.GradientColor bg_gradient_color = 5; */
        if (message.bgGradientColor)
            GradientColor.internalBinaryWrite(message.bgGradientColor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string img = 6; */
        if (message.img !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.img);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.BadgeInfo
 */
export const BadgeInfo = new BadgeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Banner$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Banner", [
            { no: 1, name: "jump_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "half_image_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "report", kind: "message", T: () => Report }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.jumpLink = "";
        message.imageLink = "";
        message.halfImageLink = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string jump_link */ 1:
                    message.jumpLink = reader.string();
                    break;
                case /* string image_link */ 2:
                    message.imageLink = reader.string();
                    break;
                case /* string half_image_link */ 3:
                    message.halfImageLink = reader.string();
                    break;
                case /* bilibili.playershared.Report report */ 4:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string jump_link = 1; */
        if (message.jumpLink !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jumpLink);
        /* string image_link = 2; */
        if (message.imageLink !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imageLink);
        /* string half_image_link = 3; */
        if (message.halfImageLink !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.halfImageLink);
        /* bilibili.playershared.Report report = 4; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Banner
 */
export const Banner = new Banner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BenefitInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.BenefitInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.icon = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.BenefitInfo
 */
export const BenefitInfo = new BenefitInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BottomDisplay$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.BottomDisplay", [
            { no: 1, name: "title", kind: "message", T: () => TextInfo },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.icon = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.TextInfo title */ 1:
                    message.title = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.TextInfo title = 1; */
        if (message.title)
            TextInfo.internalBinaryWrite(message.title, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.BottomDisplay
 */
export const BottomDisplay = new BottomDisplay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Button$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Button", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.link = "";
        message.reportParams = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string link */ 2:
                    message.link = reader.string();
                    break;
                case /* map<string, string> report_params */ 3:
                    this.binaryReadMap3(message.reportParams, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.playershared.Button.report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string link = 2; */
        if (message.link !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.link);
        /* map<string, string> report_params = 3; */
        for (let k of globalThis.Object.keys(message.reportParams))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.reportParams[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Button
 */
export const Button = new Button$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ButtonInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ButtonInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "action_type", kind: "enum", T: () => ["bilibili.playershared.ButtonAction", ButtonAction] },
            { no: 8, name: "badge_info", kind: "message", T: () => BadgeInfo },
            { no: 9, name: "report", kind: "message", T: () => Report },
            { no: 10, name: "left_strikethrough_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "simple_text_info", kind: "message", T: () => TextInfo },
            { no: 12, name: "simple_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "simple_bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "bg_gradient_color", kind: "message", T: () => GradientColor },
            { no: 15, name: "order_report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 16, name: "task_param", kind: "message", T: () => TaskParam },
            { no: 17, name: "frame_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.textColor = "";
        message.textColorNight = "";
        message.bgColor = "";
        message.bgColorNight = "";
        message.link = "";
        message.actionType = 0;
        message.leftStrikethroughText = "";
        message.simpleBgColor = "";
        message.simpleBgColorNight = "";
        message.orderReportParams = {};
        message.frameColor = "";
        message.icon = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 3:
                    message.textColorNight = reader.string();
                    break;
                case /* string bg_color */ 4:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 5:
                    message.bgColorNight = reader.string();
                    break;
                case /* string link */ 6:
                    message.link = reader.string();
                    break;
                case /* bilibili.playershared.ButtonAction action_type */ 7:
                    message.actionType = reader.int32();
                    break;
                case /* bilibili.playershared.BadgeInfo badge_info */ 8:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                case /* bilibili.playershared.Report report */ 9:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* string left_strikethrough_text */ 10:
                    message.leftStrikethroughText = reader.string();
                    break;
                case /* bilibili.playershared.TextInfo simple_text_info */ 11:
                    message.simpleTextInfo = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.simpleTextInfo);
                    break;
                case /* string simple_bg_color */ 12:
                    message.simpleBgColor = reader.string();
                    break;
                case /* string simple_bg_color_night */ 13:
                    message.simpleBgColorNight = reader.string();
                    break;
                case /* bilibili.playershared.GradientColor bg_gradient_color */ 14:
                    message.bgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.bgGradientColor);
                    break;
                case /* map<string, string> order_report_params */ 15:
                    this.binaryReadMap15(message.orderReportParams, reader, options);
                    break;
                case /* bilibili.playershared.TaskParam task_param */ 16:
                    message.taskParam = TaskParam.internalBinaryRead(reader, reader.uint32(), options, message.taskParam);
                    break;
                case /* string frame_color */ 17:
                    message.frameColor = reader.string();
                    break;
                case /* string icon */ 18:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap15(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.playershared.ButtonInfo.order_report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        /* string bg_color = 4; */
        if (message.bgColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 5; */
        if (message.bgColorNight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bgColorNight);
        /* string link = 6; */
        if (message.link !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.link);
        /* bilibili.playershared.ButtonAction action_type = 7; */
        if (message.actionType !== 0)
            writer.tag(7, WireType.Varint).int32(message.actionType);
        /* bilibili.playershared.BadgeInfo badge_info = 8; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Report report = 9; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string left_strikethrough_text = 10; */
        if (message.leftStrikethroughText !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.leftStrikethroughText);
        /* bilibili.playershared.TextInfo simple_text_info = 11; */
        if (message.simpleTextInfo)
            TextInfo.internalBinaryWrite(message.simpleTextInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string simple_bg_color = 12; */
        if (message.simpleBgColor !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.simpleBgColor);
        /* string simple_bg_color_night = 13; */
        if (message.simpleBgColorNight !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.simpleBgColorNight);
        /* bilibili.playershared.GradientColor bg_gradient_color = 14; */
        if (message.bgGradientColor)
            GradientColor.internalBinaryWrite(message.bgGradientColor, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> order_report_params = 15; */
        for (let k of globalThis.Object.keys(message.orderReportParams))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.orderReportParams[k]).join();
        /* bilibili.playershared.TaskParam task_param = 16; */
        if (message.taskParam)
            TaskParam.internalBinaryWrite(message.taskParam, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* string frame_color = 17; */
        if (message.frameColor !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.frameColor);
        /* string icon = 18; */
        if (message.icon !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ButtonInfo
 */
export const ButtonInfo = new ButtonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComprehensiveToast$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ComprehensiveToast", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "button", kind: "message", T: () => ButtonInfo },
            { no: 3, name: "show_style_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "toast_text", kind: "message", T: () => TextInfo },
            { no: 6, name: "report", kind: "message", T: () => Report },
            { no: 7, name: "order_report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.showStyleType = 0;
        message.icon = "";
        message.orderReportParams = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bilibili.playershared.ButtonInfo button */ 2:
                    message.button = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                case /* int32 show_style_type */ 3:
                    message.showStyleType = reader.int32();
                    break;
                case /* string icon */ 4:
                    message.icon = reader.string();
                    break;
                case /* bilibili.playershared.TextInfo toast_text */ 5:
                    message.toastText = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.toastText);
                    break;
                case /* bilibili.playershared.Report report */ 6:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* map<string, string> order_report_params */ 7:
                    this.binaryReadMap7(message.orderReportParams, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap7(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.playershared.ComprehensiveToast.order_report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bilibili.playershared.ButtonInfo button = 2; */
        if (message.button)
            ButtonInfo.internalBinaryWrite(message.button, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 show_style_type = 3; */
        if (message.showStyleType !== 0)
            writer.tag(3, WireType.Varint).int32(message.showStyleType);
        /* string icon = 4; */
        if (message.icon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icon);
        /* bilibili.playershared.TextInfo toast_text = 5; */
        if (message.toastText)
            TextInfo.internalBinaryWrite(message.toastText, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Report report = 6; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> order_report_params = 7; */
        for (let k of globalThis.Object.keys(message.orderReportParams))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.orderReportParams[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ComprehensiveToast
 */
export const ComprehensiveToast = new ComprehensiveToast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfValue$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ConfValue", [
            { no: 1, name: "switch_val", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "selected_val", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 switch_val */ 1:
                    message.value = {
                        oneofKind: "switchVal",
                        switchVal: reader.int32()
                    };
                    break;
                case /* int32 selected_val */ 2:
                    message.value = {
                        oneofKind: "selectedVal",
                        selectedVal: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 switch_val = 1; */
        if (message.value.oneofKind === "switchVal")
            writer.tag(1, WireType.Varint).int32(message.value.switchVal);
        /* int32 selected_val = 2; */
        if (message.value.oneofKind === "selectedVal")
            writer.tag(2, WireType.Varint).int32(message.value.selectedVal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ConfValue
 */
export const ConfValue = new ConfValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashItem$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.DashItem", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.baseUrl = "";
        message.backupUrl = [];
        message.bandwidth = 0;
        message.codecid = 0;
        message.md5 = "";
        message.size = 0;
        message.frameRate = "";
        message.widevinePssh = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string base_url */ 2:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 3:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 4:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 5:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 7:
                    message.size = reader.uint64().toNumber();
                    break;
                case /* string frame_rate */ 8:
                    message.frameRate = reader.string();
                    break;
                case /* string widevine_pssh */ 9:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string base_url = 2; */
        if (message.baseUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 3; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 4; */
        if (message.bandwidth !== 0)
            writer.tag(4, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 5; */
        if (message.codecid !== 0)
            writer.tag(5, WireType.Varint).uint32(message.codecid);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 7; */
        if (message.size !== 0)
            writer.tag(7, WireType.Varint).uint64(message.size);
        /* string frame_rate = 8; */
        if (message.frameRate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.frameRate);
        /* string widevine_pssh = 9; */
        if (message.widevinePssh !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DashItem
 */
export const DashItem = new DashItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashVideo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.DashVideo", [
            { no: 1, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "audio_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.baseUrl = "";
        message.backupUrl = [];
        message.bandwidth = 0;
        message.codecid = 0;
        message.md5 = "";
        message.size = 0;
        message.audioId = 0;
        message.noRexcode = false;
        message.frameRate = "";
        message.width = 0;
        message.height = 0;
        message.widevinePssh = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string base_url */ 1:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 2:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 3:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 4:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 5:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 6:
                    message.size = reader.uint64().toNumber();
                    break;
                case /* uint32 audio_id */ 7:
                    message.audioId = reader.uint32();
                    break;
                case /* bool no_rexcode */ 8:
                    message.noRexcode = reader.bool();
                    break;
                case /* string frame_rate */ 9:
                    message.frameRate = reader.string();
                    break;
                case /* int32 width */ 10:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 11:
                    message.height = reader.int32();
                    break;
                case /* string widevine_pssh */ 12:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string base_url = 1; */
        if (message.baseUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 2; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 3; */
        if (message.bandwidth !== 0)
            writer.tag(3, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 4; */
        if (message.codecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.codecid);
        /* string md5 = 5; */
        if (message.md5 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 6; */
        if (message.size !== 0)
            writer.tag(6, WireType.Varint).uint64(message.size);
        /* uint32 audio_id = 7; */
        if (message.audioId !== 0)
            writer.tag(7, WireType.Varint).uint32(message.audioId);
        /* bool no_rexcode = 8; */
        if (message.noRexcode !== false)
            writer.tag(8, WireType.Varint).bool(message.noRexcode);
        /* string frame_rate = 9; */
        if (message.frameRate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.frameRate);
        /* int32 width = 10; */
        if (message.width !== 0)
            writer.tag(10, WireType.Varint).int32(message.width);
        /* int32 height = 11; */
        if (message.height !== 0)
            writer.tag(11, WireType.Varint).int32(message.height);
        /* string widevine_pssh = 12; */
        if (message.widevinePssh !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DashVideo
 */
export const DashVideo = new DashVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceConf$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.DeviceConf", [
            { no: 1, name: "conf_value", kind: "message", T: () => ConfValue }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.ConfValue conf_value */ 1:
                    message.confValue = ConfValue.internalBinaryRead(reader, reader.uint32(), options, message.confValue);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.ConfValue conf_value = 1; */
        if (message.confValue)
            ConfValue.internalBinaryWrite(message.confValue, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DeviceConf
 */
export const DeviceConf = new DeviceConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dialog$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Dialog", [
            { no: 1, name: "style_type", kind: "enum", T: () => ["bilibili.playershared.GuideStyle", GuideStyle] },
            { no: 2, name: "background_info", kind: "message", T: () => BackgroundInfo },
            { no: 3, name: "title", kind: "message", T: () => TextInfo },
            { no: 4, name: "subtitle", kind: "message", T: () => TextInfo },
            { no: 5, name: "image", kind: "message", T: () => ImageInfo },
            { no: 6, name: "button", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ButtonInfo },
            { no: 7, name: "bottom_desc", kind: "message", T: () => ButtonInfo },
            { no: 8, name: "report", kind: "message", T: () => Report },
            { no: 9, name: "count_down_sec", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "right_bottom_desc", kind: "message", T: () => TextInfo },
            { no: 11, name: "bottom_display", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BottomDisplay },
            { no: 12, name: "ext_data", kind: "message", T: () => ExtData },
            { no: 13, name: "limit_action_type", kind: "enum", T: () => ["bilibili.playershared.LimitActionType", LimitActionType] },
            { no: 14, name: "is_hide_more_btn", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.styleType = 0;
        message.button = [];
        message.countDownSec = 0;
        message.bottomDisplay = [];
        message.limitActionType = 0;
        message.isHideMoreBtn = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.GuideStyle style_type */ 1:
                    message.styleType = reader.int32();
                    break;
                case /* bilibili.playershared.BackgroundInfo background_info */ 2:
                    message.backgroundInfo = BackgroundInfo.internalBinaryRead(reader, reader.uint32(), options, message.backgroundInfo);
                    break;
                case /* bilibili.playershared.TextInfo title */ 3:
                    message.title = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* bilibili.playershared.TextInfo subtitle */ 4:
                    message.subtitle = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.subtitle);
                    break;
                case /* bilibili.playershared.ImageInfo image */ 5:
                    message.image = ImageInfo.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* repeated bilibili.playershared.ButtonInfo button */ 6:
                    message.button.push(ButtonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.playershared.ButtonInfo bottom_desc */ 7:
                    message.bottomDesc = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.bottomDesc);
                    break;
                case /* bilibili.playershared.Report report */ 8:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* int32 count_down_sec */ 9:
                    message.countDownSec = reader.int32();
                    break;
                case /* bilibili.playershared.TextInfo right_bottom_desc */ 10:
                    message.rightBottomDesc = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.rightBottomDesc);
                    break;
                case /* repeated bilibili.playershared.BottomDisplay bottom_display */ 11:
                    message.bottomDisplay.push(BottomDisplay.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.playershared.ExtData ext_data */ 12:
                    message.extData = ExtData.internalBinaryRead(reader, reader.uint32(), options, message.extData);
                    break;
                case /* bilibili.playershared.LimitActionType limit_action_type */ 13:
                    message.limitActionType = reader.int32();
                    break;
                case /* int32 is_hide_more_btn */ 14:
                    message.isHideMoreBtn = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.GuideStyle style_type = 1; */
        if (message.styleType !== 0)
            writer.tag(1, WireType.Varint).int32(message.styleType);
        /* bilibili.playershared.BackgroundInfo background_info = 2; */
        if (message.backgroundInfo)
            BackgroundInfo.internalBinaryWrite(message.backgroundInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.TextInfo title = 3; */
        if (message.title)
            TextInfo.internalBinaryWrite(message.title, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.TextInfo subtitle = 4; */
        if (message.subtitle)
            TextInfo.internalBinaryWrite(message.subtitle, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.ImageInfo image = 5; */
        if (message.image)
            ImageInfo.internalBinaryWrite(message.image, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.playershared.ButtonInfo button = 6; */
        for (let i = 0; i < message.button.length; i++)
            ButtonInfo.internalBinaryWrite(message.button[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.ButtonInfo bottom_desc = 7; */
        if (message.bottomDesc)
            ButtonInfo.internalBinaryWrite(message.bottomDesc, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Report report = 8; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 count_down_sec = 9; */
        if (message.countDownSec !== 0)
            writer.tag(9, WireType.Varint).int32(message.countDownSec);
        /* bilibili.playershared.TextInfo right_bottom_desc = 10; */
        if (message.rightBottomDesc)
            TextInfo.internalBinaryWrite(message.rightBottomDesc, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.playershared.BottomDisplay bottom_display = 11; */
        for (let i = 0; i < message.bottomDisplay.length; i++)
            BottomDisplay.internalBinaryWrite(message.bottomDisplay[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.ExtData ext_data = 12; */
        if (message.extData)
            ExtData.internalBinaryWrite(message.extData, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.LimitActionType limit_action_type = 13; */
        if (message.limitActionType !== 0)
            writer.tag(13, WireType.Varint).int32(message.limitActionType);
        /* int32 is_hide_more_btn = 14; */
        if (message.isHideMoreBtn !== 0)
            writer.tag(14, WireType.Varint).int32(message.isHideMoreBtn);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Dialog
 */
export const Dialog = new Dialog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dimension$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Dimension", [
            { no: 1, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "rotate", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.width = 0;
        message.height = 0;
        message.rotate = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 width */ 1:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 2:
                    message.height = reader.int32();
                    break;
                case /* int32 rotate */ 3:
                    message.rotate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 width = 1; */
        if (message.width !== 0)
            writer.tag(1, WireType.Varint).int32(message.width);
        /* int32 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).int32(message.height);
        /* int32 rotate = 3; */
        if (message.rotate !== 0)
            writer.tag(3, WireType.Varint).int32(message.rotate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Dimension
 */
export const Dimension = new Dimension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DolbyItem$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.DolbyItem", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.playershared.DolbyItem.Type", DolbyItem_Type] },
            { no: 2, name: "audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.audio = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.DolbyItem.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* repeated bilibili.playershared.DashItem audio */ 2:
                    message.audio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.DolbyItem.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* repeated bilibili.playershared.DashItem audio = 2; */
        for (let i = 0; i < message.audio.length; i++)
            DashItem.internalBinaryWrite(message.audio[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DolbyItem
 */
export const DolbyItem = new DolbyItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpInlineVideo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.EpInlineVideo", [
            { no: 1, name: "material_no", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.materialNo = 0;
        message.aid = 0;
        message.cid = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 material_no */ 1:
                    message.materialNo = reader.int64().toNumber();
                    break;
                case /* int64 aid */ 2:
                    message.aid = reader.int64().toNumber();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 material_no = 1; */
        if (message.materialNo !== 0)
            writer.tag(1, WireType.Varint).int64(message.materialNo);
        /* int64 aid = 2; */
        if (message.aid !== 0)
            writer.tag(2, WireType.Varint).int64(message.aid);
        /* int64 cid = 3; */
        if (message.cid !== 0)
            writer.tag(3, WireType.Varint).int64(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.EpInlineVideo
 */
export const EpInlineVideo = new EpInlineVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpInlineVideoInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.EpInlineVideoInfo", [
            { no: 1, name: "ep_inline_video", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EpInlineVideo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.epInlineVideo = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.playershared.EpInlineVideo ep_inline_video */ 1:
                    message.epInlineVideo.push(EpInlineVideo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.playershared.EpInlineVideo ep_inline_video = 1; */
        for (let i = 0; i < message.epInlineVideo.length; i++)
            EpInlineVideo.internalBinaryWrite(message.epInlineVideo[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.EpInlineVideoInfo
 */
export const EpInlineVideoInfo = new EpInlineVideoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Event", [
            { no: 1, name: "shake", kind: "message", T: () => Shake }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.Shake shake */ 1:
                    message.shake = Shake.internalBinaryRead(reader, reader.uint32(), options, message.shake);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.Shake shake = 1; */
        if (message.shake)
            Shake.internalBinaryWrite(message.shake, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtData$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ExtData", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.playershared.ExtDataType", ExtDataType] },
            { no: 2, name: "play_list_info", kind: "message", oneof: "data", T: () => PlayListInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.ExtDataType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bilibili.playershared.PlayListInfo play_list_info */ 2:
                    message.data = {
                        oneofKind: "playListInfo",
                        playListInfo: PlayListInfo.internalBinaryRead(reader, reader.uint32(), options, message.data.playListInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.ExtDataType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bilibili.playershared.PlayListInfo play_list_info = 2; */
        if (message.data.oneofKind === "playListInfo")
            PlayListInfo.internalBinaryWrite(message.data.playListInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ExtData
 */
export const ExtData = new ExtData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraContent$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ExtraContent", [
            { no: 1, name: "disable_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "disable_code", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.disableReason = "";
        message.disableCode = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string disable_reason */ 1:
                    message.disableReason = reader.string();
                    break;
                case /* int64 disable_code */ 2:
                    message.disableCode = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string disable_reason = 1; */
        if (message.disableReason !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.disableReason);
        /* int64 disable_code = 2; */
        if (message.disableCode !== 0)
            writer.tag(2, WireType.Varint).int64(message.disableCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ExtraContent
 */
export const ExtraContent = new ExtraContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Fragment$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Fragment", [
            { no: 1, name: "infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FragmentInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.infos = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.playershared.FragmentInfo infos */ 1:
                    message.infos.push(FragmentInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.playershared.FragmentInfo infos = 1; */
        for (let i = 0; i < message.infos.length; i++)
            FragmentInfo.internalBinaryWrite(message.infos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Fragment
 */
export const Fragment = new Fragment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FragmentInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.FragmentInfo", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "fragment_position", kind: "enum", T: () => ["bilibili.playershared.FragmentPosition", FragmentPosition] },
            { no: 3, name: "fragment_type", kind: "enum", T: () => ["bilibili.playershared.FragmentType", FragmentType] },
            { no: 4, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "report", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.index = 0;
        message.fragmentPosition = 0;
        message.fragmentType = 0;
        message.aid = 0;
        message.cid = 0;
        message.startTime = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 index */ 1:
                    message.index = reader.int32();
                    break;
                case /* bilibili.playershared.FragmentPosition fragment_position */ 2:
                    message.fragmentPosition = reader.int32();
                    break;
                case /* bilibili.playershared.FragmentType fragment_type */ 3:
                    message.fragmentType = reader.int32();
                    break;
                case /* int64 aid */ 4:
                    message.aid = reader.int64().toNumber();
                    break;
                case /* int64 cid */ 5:
                    message.cid = reader.int64().toNumber();
                    break;
                case /* int64 start_time */ 6:
                    message.startTime = reader.int64().toNumber();
                    break;
                case /* google.protobuf.Any report */ 7:
                    message.report = Any.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).int32(message.index);
        /* bilibili.playershared.FragmentPosition fragment_position = 2; */
        if (message.fragmentPosition !== 0)
            writer.tag(2, WireType.Varint).int32(message.fragmentPosition);
        /* bilibili.playershared.FragmentType fragment_type = 3; */
        if (message.fragmentType !== 0)
            writer.tag(3, WireType.Varint).int32(message.fragmentType);
        /* int64 aid = 4; */
        if (message.aid !== 0)
            writer.tag(4, WireType.Varint).int64(message.aid);
        /* int64 cid = 5; */
        if (message.cid !== 0)
            writer.tag(5, WireType.Varint).int64(message.cid);
        /* int64 start_time = 6; */
        if (message.startTime !== 0)
            writer.tag(6, WireType.Varint).int64(message.startTime);
        /* google.protobuf.Any report = 7; */
        if (message.report)
            Any.internalBinaryWrite(message.report, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.FragmentInfo
 */
export const FragmentInfo = new FragmentInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FragmentVideo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.FragmentVideo", [
            { no: 1, name: "videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FragmentVideoInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.videos = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.playershared.FragmentVideoInfo videos */ 1:
                    message.videos.push(FragmentVideoInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.playershared.FragmentVideoInfo videos = 1; */
        for (let i = 0; i < message.videos.length; i++)
            FragmentVideoInfo.internalBinaryWrite(message.videos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.FragmentVideo
 */
export const FragmentVideo = new FragmentVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FragmentVideoInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.FragmentVideoInfo", [
            { no: 1, name: "fragment_info", kind: "message", T: () => FragmentInfo },
            { no: 2, name: "vod_info", kind: "message", T: () => VodInfo },
            { no: 3, name: "play_arc_conf", kind: "message", T: () => PlayArcConf },
            { no: 4, name: "dimension", kind: "message", T: () => Dimension },
            { no: 5, name: "timelength", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "video_type", kind: "enum", T: () => ["bilibili.playershared.BizType", BizType, "BIZ_TYPE_"] },
            { no: 7, name: "playable_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.timelength = 0;
        message.videoType = 0;
        message.playableStatus = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.FragmentInfo fragment_info */ 1:
                    message.fragmentInfo = FragmentInfo.internalBinaryRead(reader, reader.uint32(), options, message.fragmentInfo);
                    break;
                case /* bilibili.playershared.VodInfo vod_info */ 2:
                    message.vodInfo = VodInfo.internalBinaryRead(reader, reader.uint32(), options, message.vodInfo);
                    break;
                case /* bilibili.playershared.PlayArcConf play_arc_conf */ 3:
                    message.playArcConf = PlayArcConf.internalBinaryRead(reader, reader.uint32(), options, message.playArcConf);
                    break;
                case /* bilibili.playershared.Dimension dimension */ 4:
                    message.dimension = Dimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);
                    break;
                case /* int64 timelength */ 5:
                    message.timelength = reader.int64().toNumber();
                    break;
                case /* bilibili.playershared.BizType video_type */ 6:
                    message.videoType = reader.int32();
                    break;
                case /* bool playable_status */ 7:
                    message.playableStatus = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.FragmentInfo fragment_info = 1; */
        if (message.fragmentInfo)
            FragmentInfo.internalBinaryWrite(message.fragmentInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.VodInfo vod_info = 2; */
        if (message.vodInfo)
            VodInfo.internalBinaryWrite(message.vodInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.PlayArcConf play_arc_conf = 3; */
        if (message.playArcConf)
            PlayArcConf.internalBinaryWrite(message.playArcConf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Dimension dimension = 4; */
        if (message.dimension)
            Dimension.internalBinaryWrite(message.dimension, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 timelength = 5; */
        if (message.timelength !== 0)
            writer.tag(5, WireType.Varint).int64(message.timelength);
        /* bilibili.playershared.BizType video_type = 6; */
        if (message.videoType !== 0)
            writer.tag(6, WireType.Varint).int32(message.videoType);
        /* bool playable_status = 7; */
        if (message.playableStatus !== false)
            writer.tag(7, WireType.Varint).bool(message.playableStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.FragmentVideoInfo
 */
export const FragmentVideoInfo = new FragmentVideoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GradientColor$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.GradientColor", [
            { no: 1, name: "start_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.startColor = "";
        message.endColor = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start_color */ 1:
                    message.startColor = reader.string();
                    break;
                case /* string end_color */ 2:
                    message.endColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string start_color = 1; */
        if (message.startColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.startColor);
        /* string end_color = 2; */
        if (message.endColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.endColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.GradientColor
 */
export const GradientColor = new GradientColor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class History$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.History", [
            { no: 1, name: "current_video", kind: "message", T: () => HistoryInfo },
            { no: 2, name: "related_video", kind: "message", T: () => HistoryInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.HistoryInfo current_video */ 1:
                    message.currentVideo = HistoryInfo.internalBinaryRead(reader, reader.uint32(), options, message.currentVideo);
                    break;
                case /* bilibili.playershared.HistoryInfo related_video */ 2:
                    message.relatedVideo = HistoryInfo.internalBinaryRead(reader, reader.uint32(), options, message.relatedVideo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.HistoryInfo current_video = 1; */
        if (message.currentVideo)
            HistoryInfo.internalBinaryWrite(message.currentVideo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.HistoryInfo related_video = 2; */
        if (message.relatedVideo)
            HistoryInfo.internalBinaryWrite(message.relatedVideo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.History
 */
export const History = new History$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoryInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.HistoryInfo", [
            { no: 1, name: "progress", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "last_play_cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "toast", kind: "message", T: () => Toast },
            { no: 4, name: "toast_without_time", kind: "message", T: () => Toast },
            { no: 5, name: "last_play_aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.progress = 0;
        message.lastPlayCid = 0;
        message.lastPlayAid = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 progress */ 1:
                    message.progress = reader.int64().toNumber();
                    break;
                case /* int64 last_play_cid */ 2:
                    message.lastPlayCid = reader.int64().toNumber();
                    break;
                case /* bilibili.playershared.Toast toast */ 3:
                    message.toast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.toast);
                    break;
                case /* bilibili.playershared.Toast toast_without_time */ 4:
                    message.toastWithoutTime = Toast.internalBinaryRead(reader, reader.uint32(), options, message.toastWithoutTime);
                    break;
                case /* int64 last_play_aid */ 5:
                    message.lastPlayAid = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 progress = 1; */
        if (message.progress !== 0)
            writer.tag(1, WireType.Varint).int64(message.progress);
        /* int64 last_play_cid = 2; */
        if (message.lastPlayCid !== 0)
            writer.tag(2, WireType.Varint).int64(message.lastPlayCid);
        /* bilibili.playershared.Toast toast = 3; */
        if (message.toast)
            Toast.internalBinaryWrite(message.toast, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Toast toast_without_time = 4; */
        if (message.toastWithoutTime)
            Toast.internalBinaryWrite(message.toastWithoutTime, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 last_play_aid = 5; */
        if (message.lastPlayAid !== 0)
            writer.tag(5, WireType.Varint).int64(message.lastPlayAid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.HistoryInfo
 */
export const HistoryInfo = new HistoryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ImageInfo", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ImageInfo
 */
export const ImageInfo = new ImageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Interaction$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Interaction", [
            { no: 1, name: "history_node", kind: "message", T: () => Node },
            { no: 2, name: "graph_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mark", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.graphVersion = 0;
        message.msg = "";
        message.mark = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.Node history_node */ 1:
                    message.historyNode = Node.internalBinaryRead(reader, reader.uint32(), options, message.historyNode);
                    break;
                case /* int64 graph_version */ 2:
                    message.graphVersion = reader.int64().toNumber();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                case /* int64 mark */ 4:
                    message.mark = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.Node history_node = 1; */
        if (message.historyNode)
            Node.internalBinaryWrite(message.historyNode, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 graph_version = 2; */
        if (message.graphVersion !== 0)
            writer.tag(2, WireType.Varint).int64(message.graphVersion);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        /* int64 mark = 4; */
        if (message.mark !== 0)
            writer.tag(4, WireType.Varint).int64(message.mark);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Interaction
 */
export const Interaction = new Interaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LossLessItem$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.LossLessItem", [
            { no: 1, name: "is_lossless_audio", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "audio", kind: "message", T: () => DashItem },
            { no: 3, name: "need_vip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.isLosslessAudio = false;
        message.needVip = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_lossless_audio */ 1:
                    message.isLosslessAudio = reader.bool();
                    break;
                case /* bilibili.playershared.DashItem audio */ 2:
                    message.audio = DashItem.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                case /* bool need_vip */ 3:
                    message.needVip = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_lossless_audio = 1; */
        if (message.isLosslessAudio !== false)
            writer.tag(1, WireType.Varint).bool(message.isLosslessAudio);
        /* bilibili.playershared.DashItem audio = 2; */
        if (message.audio)
            DashItem.internalBinaryWrite(message.audio, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool need_vip = 3; */
        if (message.needVip !== false)
            writer.tag(3, WireType.Varint).bool(message.needVip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.LossLessItem
 */
export const LossLessItem = new LossLessItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Node$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Node", [
            { no: 1, name: "node_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.nodeId = 0;
        message.title = "";
        message.cid = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 node_id */ 1:
                    message.nodeId = reader.int64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 node_id = 1; */
        if (message.nodeId !== 0)
            writer.tag(1, WireType.Varint).int64(message.nodeId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int64 cid = 3; */
        if (message.cid !== 0)
            writer.tag(3, WireType.Varint).int64(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Node
 */
export const Node = new Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayArc$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.PlayArc", [
            { no: 1, name: "video_type", kind: "enum", T: () => ["bilibili.playershared.BizType", BizType, "BIZ_TYPE_"] },
            { no: 2, name: "aid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "cid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "drm_tech_type", kind: "enum", T: () => ["bilibili.playershared.DrmTechType", DrmTechType] },
            { no: 5, name: "arc_type", kind: "enum", T: () => ["bilibili.playershared.ArcType", ArcType, "ARC_TYPE_"] },
            { no: 6, name: "interaction", kind: "message", T: () => Interaction },
            { no: 7, name: "dimension", kind: "message", T: () => Dimension },
            { no: 8, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "is_preview", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "watch_time_length", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "duration_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.videoType = 0;
        message.aid = 0;
        message.cid = 0;
        message.drmTechType = 0;
        message.arcType = 0;
        message.duration = 0;
        message.isPreview = false;
        message.watchTimeLength = 0;
        message.durationMs = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.BizType video_type */ 1:
                    message.videoType = reader.int32();
                    break;
                case /* uint64 aid */ 2:
                    message.aid = reader.uint64().toNumber();
                    break;
                case /* uint64 cid */ 3:
                    message.cid = reader.uint64().toNumber();
                    break;
                case /* bilibili.playershared.DrmTechType drm_tech_type */ 4:
                    message.drmTechType = reader.int32();
                    break;
                case /* bilibili.playershared.ArcType arc_type */ 5:
                    message.arcType = reader.int32();
                    break;
                case /* bilibili.playershared.Interaction interaction */ 6:
                    message.interaction = Interaction.internalBinaryRead(reader, reader.uint32(), options, message.interaction);
                    break;
                case /* bilibili.playershared.Dimension dimension */ 7:
                    message.dimension = Dimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);
                    break;
                case /* int64 duration */ 8:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* bool is_preview */ 9:
                    message.isPreview = reader.bool();
                    break;
                case /* int64 watch_time_length */ 10:
                    message.watchTimeLength = reader.int64().toNumber();
                    break;
                case /* int64 duration_ms */ 11:
                    message.durationMs = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.BizType video_type = 1; */
        if (message.videoType !== 0)
            writer.tag(1, WireType.Varint).int32(message.videoType);
        /* uint64 aid = 2; */
        if (message.aid !== 0)
            writer.tag(2, WireType.Varint).uint64(message.aid);
        /* uint64 cid = 3; */
        if (message.cid !== 0)
            writer.tag(3, WireType.Varint).uint64(message.cid);
        /* bilibili.playershared.DrmTechType drm_tech_type = 4; */
        if (message.drmTechType !== 0)
            writer.tag(4, WireType.Varint).int32(message.drmTechType);
        /* bilibili.playershared.ArcType arc_type = 5; */
        if (message.arcType !== 0)
            writer.tag(5, WireType.Varint).int32(message.arcType);
        /* bilibili.playershared.Interaction interaction = 6; */
        if (message.interaction)
            Interaction.internalBinaryWrite(message.interaction, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Dimension dimension = 7; */
        if (message.dimension)
            Dimension.internalBinaryWrite(message.dimension, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 8; */
        if (message.duration !== 0)
            writer.tag(8, WireType.Varint).int64(message.duration);
        /* bool is_preview = 9; */
        if (message.isPreview !== false)
            writer.tag(9, WireType.Varint).bool(message.isPreview);
        /* int64 watch_time_length = 10; */
        if (message.watchTimeLength !== 0)
            writer.tag(10, WireType.Varint).int64(message.watchTimeLength);
        /* int64 duration_ms = 11; */
        if (message.durationMs !== 0)
            writer.tag(11, WireType.Varint).int64(message.durationMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayArc
 */
export const PlayArc = new PlayArc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayArcConf$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.PlayArcConf", [
            { no: 1, name: "arc_confs", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => ArcConf } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.arcConfs = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int32, bilibili.playershared.ArcConf> arc_confs */ 1:
                    this.binaryReadMap1(message.arcConfs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = ArcConf.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.playershared.PlayArcConf.arc_confs");
            }
        }
        map[key ?? 0] = val ?? ArcConf.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<int32, bilibili.playershared.ArcConf> arc_confs = 1; */
        for (let k of globalThis.Object.keys(message.arcConfs)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            ArcConf.internalBinaryWrite(message.arcConfs[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayArcConf
 */
export const PlayArcConf = new PlayArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayDeviceConf$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.PlayDeviceConf", [
            { no: 1, name: "device_confs", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => DeviceConf } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.deviceConfs = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int32, bilibili.playershared.DeviceConf> device_confs */ 1:
                    this.binaryReadMap1(message.deviceConfs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = DeviceConf.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.playershared.PlayDeviceConf.device_confs");
            }
        }
        map[key ?? 0] = val ?? DeviceConf.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<int32, bilibili.playershared.DeviceConf> device_confs = 1; */
        for (let k of globalThis.Object.keys(message.deviceConfs)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            DeviceConf.internalBinaryWrite(message.deviceConfs[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayDeviceConf
 */
export const PlayDeviceConf = new PlayDeviceConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayList$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.PlayList", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "badge_info", kind: "message", T: () => BadgeInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.seasonId = 0;
        message.title = "";
        message.cover = "";
        message.link = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string cover */ 3:
                    message.cover = reader.string();
                    break;
                case /* string link */ 4:
                    message.link = reader.string();
                    break;
                case /* bilibili.playershared.BadgeInfo badge_info */ 5:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string cover = 3; */
        if (message.cover !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cover);
        /* string link = 4; */
        if (message.link !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.link);
        /* bilibili.playershared.BadgeInfo badge_info = 5; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayList
 */
export const PlayList = new PlayList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayListInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.PlayListInfo", [
            { no: 2, name: "play_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayList }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.playList = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.playershared.PlayList play_list */ 2:
                    message.playList.push(PlayList.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.playershared.PlayList play_list = 2; */
        for (let i = 0; i < message.playList.length; i++)
            PlayList.internalBinaryWrite(message.playList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayListInfo
 */
export const PlayListInfo = new PlayListInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PromptBar$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.PromptBar", [
            { no: 1, name: "title", kind: "message", T: () => TextInfo },
            { no: 2, name: "subtitle", kind: "message", T: () => TextInfo },
            { no: 3, name: "sub_title_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_gradient_color", kind: "message", T: () => GradientColor },
            { no: 6, name: "button", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ButtonInfo },
            { no: 7, name: "report", kind: "message", T: () => Report },
            { no: 8, name: "full_screen_ip_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "full_screen_bg_gradient_color", kind: "message", T: () => GradientColor },
            { no: 10, name: "prompt_bar_type", kind: "enum", T: () => ["bilibili.playershared.PromptBarType", PromptBarType] },
            { no: 11, name: "prompt_bar_style", kind: "enum", T: () => ["bilibili.playershared.PromptBarStyle", PromptBarStyle] },
            { no: 12, name: "benefit_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BenefitInfo },
            { no: 13, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.subTitleIcon = "";
        message.bgImage = "";
        message.button = [];
        message.fullScreenIpIcon = "";
        message.promptBarType = 0;
        message.promptBarStyle = 0;
        message.benefitInfos = [];
        message.endTime = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.TextInfo title */ 1:
                    message.title = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* bilibili.playershared.TextInfo subtitle */ 2:
                    message.subtitle = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.subtitle);
                    break;
                case /* string sub_title_icon */ 3:
                    message.subTitleIcon = reader.string();
                    break;
                case /* string bg_image */ 4:
                    message.bgImage = reader.string();
                    break;
                case /* bilibili.playershared.GradientColor bg_gradient_color */ 5:
                    message.bgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.bgGradientColor);
                    break;
                case /* repeated bilibili.playershared.ButtonInfo button */ 6:
                    message.button.push(ButtonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.playershared.Report report */ 7:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* string full_screen_ip_icon */ 8:
                    message.fullScreenIpIcon = reader.string();
                    break;
                case /* bilibili.playershared.GradientColor full_screen_bg_gradient_color */ 9:
                    message.fullScreenBgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.fullScreenBgGradientColor);
                    break;
                case /* bilibili.playershared.PromptBarType prompt_bar_type */ 10:
                    message.promptBarType = reader.int32();
                    break;
                case /* bilibili.playershared.PromptBarStyle prompt_bar_style */ 11:
                    message.promptBarStyle = reader.int32();
                    break;
                case /* repeated bilibili.playershared.BenefitInfo benefit_infos */ 12:
                    message.benefitInfos.push(BenefitInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 end_time */ 13:
                    message.endTime = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.TextInfo title = 1; */
        if (message.title)
            TextInfo.internalBinaryWrite(message.title, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.TextInfo subtitle = 2; */
        if (message.subtitle)
            TextInfo.internalBinaryWrite(message.subtitle, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string sub_title_icon = 3; */
        if (message.subTitleIcon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.subTitleIcon);
        /* string bg_image = 4; */
        if (message.bgImage !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgImage);
        /* bilibili.playershared.GradientColor bg_gradient_color = 5; */
        if (message.bgGradientColor)
            GradientColor.internalBinaryWrite(message.bgGradientColor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.playershared.ButtonInfo button = 6; */
        for (let i = 0; i < message.button.length; i++)
            ButtonInfo.internalBinaryWrite(message.button[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Report report = 7; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string full_screen_ip_icon = 8; */
        if (message.fullScreenIpIcon !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.fullScreenIpIcon);
        /* bilibili.playershared.GradientColor full_screen_bg_gradient_color = 9; */
        if (message.fullScreenBgGradientColor)
            GradientColor.internalBinaryWrite(message.fullScreenBgGradientColor, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.PromptBarType prompt_bar_type = 10; */
        if (message.promptBarType !== 0)
            writer.tag(10, WireType.Varint).int32(message.promptBarType);
        /* bilibili.playershared.PromptBarStyle prompt_bar_style = 11; */
        if (message.promptBarStyle !== 0)
            writer.tag(11, WireType.Varint).int32(message.promptBarStyle);
        /* repeated bilibili.playershared.BenefitInfo benefit_infos = 12; */
        for (let i = 0; i < message.benefitInfos.length; i++)
            BenefitInfo.internalBinaryWrite(message.benefitInfos[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* int64 end_time = 13; */
        if (message.endTime !== 0)
            writer.tag(13, WireType.Varint).int64(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PromptBar
 */
export const PromptBar = new PromptBar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QnTrialInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.QnTrialInfo", [
            { no: 1, name: "trial_able", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "remaining_times", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "time_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "start_toast", kind: "message", T: () => Toast },
            { no: 6, name: "end_toast", kind: "message", T: () => Toast },
            { no: 8, name: "quality_open_tip_btn", kind: "message", T: () => Button }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.trialAble = false;
        message.remainingTimes = 0;
        message.start = 0;
        message.timeLength = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool trial_able */ 1:
                    message.trialAble = reader.bool();
                    break;
                case /* int32 remaining_times */ 2:
                    message.remainingTimes = reader.int32();
                    break;
                case /* int32 start */ 3:
                    message.start = reader.int32();
                    break;
                case /* int32 time_length */ 4:
                    message.timeLength = reader.int32();
                    break;
                case /* bilibili.playershared.Toast start_toast */ 5:
                    message.startToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.startToast);
                    break;
                case /* bilibili.playershared.Toast end_toast */ 6:
                    message.endToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.endToast);
                    break;
                case /* bilibili.playershared.Button quality_open_tip_btn */ 8:
                    message.qualityOpenTipBtn = Button.internalBinaryRead(reader, reader.uint32(), options, message.qualityOpenTipBtn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool trial_able = 1; */
        if (message.trialAble !== false)
            writer.tag(1, WireType.Varint).bool(message.trialAble);
        /* int32 remaining_times = 2; */
        if (message.remainingTimes !== 0)
            writer.tag(2, WireType.Varint).int32(message.remainingTimes);
        /* int32 start = 3; */
        if (message.start !== 0)
            writer.tag(3, WireType.Varint).int32(message.start);
        /* int32 time_length = 4; */
        if (message.timeLength !== 0)
            writer.tag(4, WireType.Varint).int32(message.timeLength);
        /* bilibili.playershared.Toast start_toast = 5; */
        if (message.startToast)
            Toast.internalBinaryWrite(message.startToast, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Toast end_toast = 6; */
        if (message.endToast)
            Toast.internalBinaryWrite(message.endToast, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Button quality_open_tip_btn = 8; */
        if (message.qualityOpenTipBtn)
            Button.internalBinaryWrite(message.qualityOpenTipBtn, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.QnTrialInfo
 */
export const QnTrialInfo = new QnTrialInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Report$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Report", [
            { no: 1, name: "show_event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "click_event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "extends", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.showEventId = "";
        message.clickEventId = "";
        message.extends = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string show_event_id */ 1:
                    message.showEventId = reader.string();
                    break;
                case /* string click_event_id */ 2:
                    message.clickEventId = reader.string();
                    break;
                case /* string extends */ 3:
                    message.extends = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string show_event_id = 1; */
        if (message.showEventId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.showEventId);
        /* string click_event_id = 2; */
        if (message.clickEventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clickEventId);
        /* string extends = 3; */
        if (message.extends !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extends);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Report
 */
export const Report = new Report$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseDash$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ResponseDash", [
            { no: 1, name: "video", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem },
            { no: 2, name: "audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.video = [];
        message.audio = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.playershared.DashItem video */ 1:
                    message.video.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.playershared.DashItem audio */ 2:
                    message.audio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.playershared.DashItem video = 1; */
        for (let i = 0; i < message.video.length; i++)
            DashItem.internalBinaryWrite(message.video[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.playershared.DashItem audio = 2; */
        for (let i = 0; i < message.audio.length; i++)
            DashItem.internalBinaryWrite(message.audio[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ResponseDash
 */
export const ResponseDash = new ResponseDash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseUrl$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ResponseUrl", [
            { no: 1, name: "order", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "length", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.order = 0;
        message.length = 0;
        message.size = 0;
        message.url = "";
        message.backupUrl = [];
        message.md5 = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 order */ 1:
                    message.order = reader.uint32();
                    break;
                case /* uint64 length */ 2:
                    message.length = reader.uint64().toNumber();
                    break;
                case /* uint64 size */ 3:
                    message.size = reader.uint64().toNumber();
                    break;
                case /* string url */ 4:
                    message.url = reader.string();
                    break;
                case /* repeated string backup_url */ 5:
                    message.backupUrl.push(reader.string());
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 order = 1; */
        if (message.order !== 0)
            writer.tag(1, WireType.Varint).uint32(message.order);
        /* uint64 length = 2; */
        if (message.length !== 0)
            writer.tag(2, WireType.Varint).uint64(message.length);
        /* uint64 size = 3; */
        if (message.size !== 0)
            writer.tag(3, WireType.Varint).uint64(message.size);
        /* string url = 4; */
        if (message.url !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.url);
        /* repeated string backup_url = 5; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ResponseUrl
 */
export const ResponseUrl = new ResponseUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Scheme$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Scheme", [
            { no: 1, name: "action_type", kind: "enum", T: () => ["bilibili.playershared.Scheme.ActionType", Scheme_ActionType] },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.actionType = 0;
        message.toast = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.Scheme.ActionType action_type */ 1:
                    message.actionType = reader.int32();
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.Scheme.ActionType action_type = 1; */
        if (message.actionType !== 0)
            writer.tag(1, WireType.Varint).int32(message.actionType);
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Scheme
 */
export const Scheme = new Scheme$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SegmentVideo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.SegmentVideo", [
            { no: 1, name: "segment", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResponseUrl }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.segment = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.playershared.ResponseUrl segment */ 1:
                    message.segment.push(ResponseUrl.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.playershared.ResponseUrl segment = 1; */
        for (let i = 0; i < message.segment.length; i++)
            ResponseUrl.internalBinaryWrite(message.segment[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.SegmentVideo
 */
export const SegmentVideo = new SegmentVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Shake$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Shake", [
            { no: 1, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.file = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file */ 1:
                    message.file = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string file = 1; */
        if (message.file !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Shake
 */
export const Shake = new Shake$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Stream$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Stream", [
            { no: 1, name: "stream_info", kind: "message", T: () => StreamInfo },
            { no: 2, name: "dash_video", kind: "message", oneof: "content", T: () => DashVideo },
            { no: 3, name: "segment_video", kind: "message", oneof: "content", T: () => SegmentVideo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.content = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.StreamInfo stream_info */ 1:
                    message.streamInfo = StreamInfo.internalBinaryRead(reader, reader.uint32(), options, message.streamInfo);
                    break;
                case /* bilibili.playershared.DashVideo dash_video */ 2:
                    message.content = {
                        oneofKind: "dashVideo",
                        dashVideo: DashVideo.internalBinaryRead(reader, reader.uint32(), options, message.content.dashVideo)
                    };
                    break;
                case /* bilibili.playershared.SegmentVideo segment_video */ 3:
                    message.content = {
                        oneofKind: "segmentVideo",
                        segmentVideo: SegmentVideo.internalBinaryRead(reader, reader.uint32(), options, message.content.segmentVideo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.StreamInfo stream_info = 1; */
        if (message.streamInfo)
            StreamInfo.internalBinaryWrite(message.streamInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.DashVideo dash_video = 2; */
        if (message.content.oneofKind === "dashVideo")
            DashVideo.internalBinaryWrite(message.content.dashVideo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.SegmentVideo segment_video = 3; */
        if (message.content.oneofKind === "segmentVideo")
            SegmentVideo.internalBinaryWrite(message.content.segmentVideo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Stream
 */
export const Stream = new Stream$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.StreamInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "err_code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "limit", kind: "message", T: () => StreamLimit },
            { no: 6, name: "need_vip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "need_login", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "intact", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "attribute", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "new_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "display_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "superscript", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "vip_free", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "scheme", kind: "message", T: () => Scheme },
            { no: 17, name: "support_drm", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.quality = 0;
        message.format = "";
        message.description = "";
        message.errCode = 0;
        message.needVip = false;
        message.needLogin = false;
        message.intact = false;
        message.noRexcode = false;
        message.attribute = 0;
        message.newDescription = "";
        message.displayDesc = "";
        message.superscript = "";
        message.vipFree = false;
        message.subtitle = "";
        message.supportDrm = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* uint32 err_code */ 4:
                    message.errCode = reader.uint32();
                    break;
                case /* bilibili.playershared.StreamLimit limit */ 5:
                    message.limit = StreamLimit.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* bool need_vip */ 6:
                    message.needVip = reader.bool();
                    break;
                case /* bool need_login */ 7:
                    message.needLogin = reader.bool();
                    break;
                case /* bool intact */ 8:
                    message.intact = reader.bool();
                    break;
                case /* bool no_rexcode */ 9:
                    message.noRexcode = reader.bool();
                    break;
                case /* int64 attribute */ 10:
                    message.attribute = reader.int64().toNumber();
                    break;
                case /* string new_description */ 11:
                    message.newDescription = reader.string();
                    break;
                case /* string display_desc */ 12:
                    message.displayDesc = reader.string();
                    break;
                case /* string superscript */ 13:
                    message.superscript = reader.string();
                    break;
                case /* bool vip_free */ 14:
                    message.vipFree = reader.bool();
                    break;
                case /* string subtitle */ 15:
                    message.subtitle = reader.string();
                    break;
                case /* bilibili.playershared.Scheme scheme */ 16:
                    message.scheme = Scheme.internalBinaryRead(reader, reader.uint32(), options, message.scheme);
                    break;
                case /* bool support_drm */ 17:
                    message.supportDrm = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* uint32 err_code = 4; */
        if (message.errCode !== 0)
            writer.tag(4, WireType.Varint).uint32(message.errCode);
        /* bilibili.playershared.StreamLimit limit = 5; */
        if (message.limit)
            StreamLimit.internalBinaryWrite(message.limit, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool need_vip = 6; */
        if (message.needVip !== false)
            writer.tag(6, WireType.Varint).bool(message.needVip);
        /* bool need_login = 7; */
        if (message.needLogin !== false)
            writer.tag(7, WireType.Varint).bool(message.needLogin);
        /* bool intact = 8; */
        if (message.intact !== false)
            writer.tag(8, WireType.Varint).bool(message.intact);
        /* bool no_rexcode = 9; */
        if (message.noRexcode !== false)
            writer.tag(9, WireType.Varint).bool(message.noRexcode);
        /* int64 attribute = 10; */
        if (message.attribute !== 0)
            writer.tag(10, WireType.Varint).int64(message.attribute);
        /* string new_description = 11; */
        if (message.newDescription !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.newDescription);
        /* string display_desc = 12; */
        if (message.displayDesc !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.displayDesc);
        /* string superscript = 13; */
        if (message.superscript !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.superscript);
        /* bool vip_free = 14; */
        if (message.vipFree !== false)
            writer.tag(14, WireType.Varint).bool(message.vipFree);
        /* string subtitle = 15; */
        if (message.subtitle !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.subtitle);
        /* bilibili.playershared.Scheme scheme = 16; */
        if (message.scheme)
            Scheme.internalBinaryWrite(message.scheme, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* bool support_drm = 17; */
        if (message.supportDrm !== false)
            writer.tag(17, WireType.Varint).bool(message.supportDrm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.StreamInfo
 */
export const StreamInfo = new StreamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLimit$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.StreamLimit", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.uri = "";
        message.msg = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.StreamLimit
 */
export const StreamLimit = new StreamLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskParam$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.TaskParam", [
            { no: 1, name: "task_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "tips_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.taskType = "";
        message.activityId = 0;
        message.tipsId = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_type */ 1:
                    message.taskType = reader.string();
                    break;
                case /* int64 activity_id */ 2:
                    message.activityId = reader.int64().toNumber();
                    break;
                case /* int64 tips_id */ 3:
                    message.tipsId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string task_type = 1; */
        if (message.taskType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskType);
        /* int64 activity_id = 2; */
        if (message.activityId !== 0)
            writer.tag(2, WireType.Varint).int64(message.activityId);
        /* int64 tips_id = 3; */
        if (message.tipsId !== 0)
            writer.tag(3, WireType.Varint).int64(message.tipsId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.TaskParam
 */
export const TaskParam = new TaskParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.TextInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.textColor = "";
        message.textColorNight = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 3:
                    message.textColorNight = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.TextInfo
 */
export const TextInfo = new TextInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Toast$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.Toast", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "button", kind: "message", T: () => Button }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* bilibili.playershared.Button button */ 2:
                    message.button = Button.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* bilibili.playershared.Button button = 2; */
        if (message.button)
            Button.internalBinaryWrite(message.button, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Toast
 */
export const Toast = new Toast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoVod$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.VideoVod", [
            { no: 1, name: "aid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "cid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "qn", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "fnver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "fnval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "download", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "force_host", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fourk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "prefer_codec_type", kind: "enum", T: () => ["bilibili.playershared.CodeType", CodeType] },
            { no: 10, name: "voice_balance", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.aid = 0;
        message.cid = 0;
        message.qn = 0;
        message.fnver = 0;
        message.fnval = 0;
        message.download = 0;
        message.forceHost = 0;
        message.fourk = false;
        message.preferCodecType = 0;
        message.voiceBalance = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 aid = 1 [jstype = JS_NUMBER];*/ 1:
                    message.aid = reader.uint64().toNumber();
                    break;
                case /* uint64 cid = 2 [jstype = JS_NUMBER];*/ 2:
                    message.cid = reader.uint64().toNumber();
                    break;
                case /* uint64 qn = 3 [jstype = JS_NUMBER];*/ 3:
                    message.qn = reader.uint64().toNumber();
                    break;
                case /* int32 fnver */ 4:
                    message.fnver = reader.int32();
                    break;
                case /* int32 fnval */ 5:
                    message.fnval = reader.int32();
                    break;
                case /* uint32 download */ 6:
                    message.download = reader.uint32();
                    break;
                case /* int32 force_host */ 7:
                    message.forceHost = reader.int32();
                    break;
                case /* bool fourk */ 8:
                    message.fourk = reader.bool();
                    break;
                case /* bilibili.playershared.CodeType prefer_codec_type */ 9:
                    message.preferCodecType = reader.int32();
                    break;
                case /* uint64 voice_balance */ 10:
                    message.voiceBalance = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 aid = 1 [jstype = JS_NUMBER]; */
        if (message.aid !== 0)
            writer.tag(1, WireType.Varint).uint64(message.aid);
        /* uint64 cid = 2 [jstype = JS_NUMBER]; */
        if (message.cid !== 0)
            writer.tag(2, WireType.Varint).uint64(message.cid);
        /* uint64 qn = 3 [jstype = JS_NUMBER]; */
        if (message.qn !== 0)
            writer.tag(3, WireType.Varint).uint64(message.qn);
        /* int32 fnver = 4; */
        if (message.fnver !== 0)
            writer.tag(4, WireType.Varint).int32(message.fnver);
        /* int32 fnval = 5; */
        if (message.fnval !== 0)
            writer.tag(5, WireType.Varint).int32(message.fnval);
        /* uint32 download = 6; */
        if (message.download !== 0)
            writer.tag(6, WireType.Varint).uint32(message.download);
        /* int32 force_host = 7; */
        if (message.forceHost !== 0)
            writer.tag(7, WireType.Varint).int32(message.forceHost);
        /* bool fourk = 8; */
        if (message.fourk !== false)
            writer.tag(8, WireType.Varint).bool(message.fourk);
        /* bilibili.playershared.CodeType prefer_codec_type = 9; */
        if (message.preferCodecType !== 0)
            writer.tag(9, WireType.Varint).int32(message.preferCodecType);
        /* uint64 voice_balance = 10; */
        if (message.voiceBalance !== 0)
            writer.tag(10, WireType.Varint).uint64(message.voiceBalance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.VideoVod
 */
export const VideoVod = new VideoVod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.ViewInfo", [
            { no: 1, name: "dialog_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Dialog } },
            { no: 2, name: "prompt_bar", kind: "message", T: () => PromptBar },
            { no: 3, name: "toasts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ComprehensiveToast }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.dialogMap = {};
        message.toasts = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, bilibili.playershared.Dialog> dialog_map */ 1:
                    this.binaryReadMap1(message.dialogMap, reader, options);
                    break;
                case /* bilibili.playershared.PromptBar prompt_bar */ 2:
                    message.promptBar = PromptBar.internalBinaryRead(reader, reader.uint32(), options, message.promptBar);
                    break;
                case /* repeated bilibili.playershared.ComprehensiveToast toasts */ 3:
                    message.toasts.push(ComprehensiveToast.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Dialog.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.playershared.ViewInfo.dialog_map");
            }
        }
        map[key ?? ""] = val ?? Dialog.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<string, bilibili.playershared.Dialog> dialog_map = 1; */
        for (let k of globalThis.Object.keys(message.dialogMap)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Dialog.internalBinaryWrite(message.dialogMap[k], writer, options);
            writer.join().join();
        }
        /* bilibili.playershared.PromptBar prompt_bar = 2; */
        if (message.promptBar)
            PromptBar.internalBinaryWrite(message.promptBar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.playershared.ComprehensiveToast toasts = 3; */
        for (let i = 0; i < message.toasts.length; i++)
            ComprehensiveToast.internalBinaryWrite(message.toasts[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ViewInfo
 */
export const ViewInfo = new ViewInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VodInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.VodInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timelength", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "video_codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stream_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Stream },
            { no: 6, name: "dash_audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem },
            { no: 7, name: "dolby", kind: "message", T: () => DolbyItem },
            { no: 8, name: "volume", kind: "message", T: () => VolumeInfo },
            { no: 9, name: "loss_less_item", kind: "message", T: () => LossLessItem },
            { no: 10, name: "support_project", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.quality = 0;
        message.format = "";
        message.timelength = 0;
        message.videoCodecid = 0;
        message.streamList = [];
        message.dashAudio = [];
        message.supportProject = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* uint64 timelength */ 3:
                    message.timelength = reader.uint64().toNumber();
                    break;
                case /* uint32 video_codecid */ 4:
                    message.videoCodecid = reader.uint32();
                    break;
                case /* repeated bilibili.playershared.Stream stream_list */ 5:
                    message.streamList.push(Stream.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.playershared.DashItem dash_audio */ 6:
                    message.dashAudio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.playershared.DolbyItem dolby */ 7:
                    message.dolby = DolbyItem.internalBinaryRead(reader, reader.uint32(), options, message.dolby);
                    break;
                case /* bilibili.playershared.VolumeInfo volume */ 8:
                    message.volume = VolumeInfo.internalBinaryRead(reader, reader.uint32(), options, message.volume);
                    break;
                case /* bilibili.playershared.LossLessItem loss_less_item */ 9:
                    message.lossLessItem = LossLessItem.internalBinaryRead(reader, reader.uint32(), options, message.lossLessItem);
                    break;
                case /* bool support_project */ 10:
                    message.supportProject = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* uint64 timelength = 3; */
        if (message.timelength !== 0)
            writer.tag(3, WireType.Varint).uint64(message.timelength);
        /* uint32 video_codecid = 4; */
        if (message.videoCodecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.videoCodecid);
        /* repeated bilibili.playershared.Stream stream_list = 5; */
        for (let i = 0; i < message.streamList.length; i++)
            Stream.internalBinaryWrite(message.streamList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.playershared.DashItem dash_audio = 6; */
        for (let i = 0; i < message.dashAudio.length; i++)
            DashItem.internalBinaryWrite(message.dashAudio[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.DolbyItem dolby = 7; */
        if (message.dolby)
            DolbyItem.internalBinaryWrite(message.dolby, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.VolumeInfo volume = 8; */
        if (message.volume)
            VolumeInfo.internalBinaryWrite(message.volume, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.LossLessItem loss_less_item = 9; */
        if (message.lossLessItem)
            LossLessItem.internalBinaryWrite(message.lossLessItem, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bool support_project = 10; */
        if (message.supportProject !== false)
            writer.tag(10, WireType.Varint).bool(message.supportProject);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.VodInfo
 */
export const VodInfo = new VodInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VolumeInfo$Type extends MessageType {
    constructor() {
        super("bilibili.playershared.VolumeInfo", [
            { no: 1, name: "measured_i", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "measured_lra", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "measured_tp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "measured_threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "target_offset", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "target_i", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "target_tp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.measuredI = 0;
        message.measuredLra = 0;
        message.measuredTp = 0;
        message.measuredThreshold = 0;
        message.targetOffset = 0;
        message.targetI = 0;
        message.targetTp = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double measured_i */ 1:
                    message.measuredI = reader.double();
                    break;
                case /* double measured_lra */ 2:
                    message.measuredLra = reader.double();
                    break;
                case /* double measured_tp */ 3:
                    message.measuredTp = reader.double();
                    break;
                case /* double measured_threshold */ 4:
                    message.measuredThreshold = reader.double();
                    break;
                case /* double target_offset */ 5:
                    message.targetOffset = reader.double();
                    break;
                case /* double target_i */ 6:
                    message.targetI = reader.double();
                    break;
                case /* double target_tp */ 7:
                    message.targetTp = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* double measured_i = 1; */
        if (message.measuredI !== 0)
            writer.tag(1, WireType.Bit64).double(message.measuredI);
        /* double measured_lra = 2; */
        if (message.measuredLra !== 0)
            writer.tag(2, WireType.Bit64).double(message.measuredLra);
        /* double measured_tp = 3; */
        if (message.measuredTp !== 0)
            writer.tag(3, WireType.Bit64).double(message.measuredTp);
        /* double measured_threshold = 4; */
        if (message.measuredThreshold !== 0)
            writer.tag(4, WireType.Bit64).double(message.measuredThreshold);
        /* double target_offset = 5; */
        if (message.targetOffset !== 0)
            writer.tag(5, WireType.Bit64).double(message.targetOffset);
        /* double target_i = 6; */
        if (message.targetI !== 0)
            writer.tag(6, WireType.Bit64).double(message.targetI);
        /* double target_tp = 7; */
        if (message.targetTp !== 0)
            writer.tag(7, WireType.Bit64).double(message.targetTp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.VolumeInfo
 */
export const VolumeInfo = new VolumeInfo$Type();
