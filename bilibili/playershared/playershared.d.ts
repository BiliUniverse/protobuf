// @generated by protobuf-ts 2.8.2 with parameter output_javascript
// @generated from protobuf file "bilibili/playershared/playershared.proto" (package "bilibili.playershared", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 *
 *
 * @generated from protobuf message bilibili.playershared.ArcConf
 */
export interface ArcConf {
    /**
     * @generated from protobuf field: bool is_support = 1;
     */
    isSupport: boolean;
    /**
     * @generated from protobuf field: bool disable = 2;
     */
    disable: boolean;
    /**
     * @generated from protobuf field: bilibili.playershared.ExtraContent extra_content = 3;
     */
    extraContent?: ExtraContent;
    /**
     * @generated from protobuf field: repeated int32 unsupport_scene = 4;
     */
    unsupportScene: number[];
}
/**
 * 按钮组件
 *
 * @generated from protobuf message bilibili.playershared.Button
 */
export interface Button {
    /**
     * 按钮文本
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * 按钮跳转链接
     *
     * @generated from protobuf field: string link = 2;
     */
    link: string;
    /**
     * 埋点上报相关
     *
     * @generated from protobuf field: map<string, string> report_params = 3;
     */
    reportParams: {
        [key: string]: string;
    };
}
/**
 *
 *
 * @generated from protobuf message bilibili.playershared.ConfValue
 */
export interface ConfValue {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "switchVal";
        /**
         * DASH流
         *
         * @generated from protobuf field: int32 switch_val = 1;
         */
        switchVal: number;
    } | {
        oneofKind: "selectedVal";
        /**
         * 分段流
         *
         * @generated from protobuf field: int32 selected_val = 2;
         */
        selectedVal: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 *
 *
 * @generated from protobuf message bilibili.playershared.DeviceConf
 */
export interface DeviceConf {
    /**
     * @generated from protobuf field: bilibili.playershared.ConfValue conf_value = 1;
     */
    confValue?: ConfValue;
}
/**
 * ? 错误码补充信息
 *
 * @generated from protobuf message bilibili.playershared.ExtraContent
 */
export interface ExtraContent {
    /**
     *
     *
     * @generated from protobuf field: string disable_reason = 1;
     */
    disableReason: string;
    /**
     *
     *
     * @generated from protobuf field: uint64 disable_code = 2;
     */
    disableCode: bigint;
}
/**
 * 播放历史
 *
 * @generated from protobuf message bilibili.playershared.History
 */
export interface History {
    /**
     *
     *
     * @generated from protobuf field: bilibili.playershared.HistoryInfo current_video = 1;
     */
    currentVideo?: HistoryInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.playershared.HistoryInfo related_video = 2;
     */
    relatedVideo?: HistoryInfo;
}
/**
 * @generated from protobuf message bilibili.playershared.HistoryInfo
 */
export interface HistoryInfo {
    /**
     *
     *
     * @generated from protobuf field: int64 progress = 1;
     */
    progress: bigint;
    /**
     *
     *
     * @generated from protobuf field: int64 last_play_cid = 2;
     */
    lastPlayCid: bigint;
}
/**
 *
 *
 * @generated from protobuf message bilibili.playershared.PlayDeviceConf
 */
export interface PlayDeviceConf {
    /**
     *
     *
     * @generated from protobuf field: map<int32, bilibili.playershared.DeviceConf> arc_confs = 1;
     */
    arcConfs: {
        [key: number]: DeviceConf;
    };
}
/**
 * 方案
 *
 * @generated from protobuf message bilibili.playershared.Scheme
 */
export interface Scheme {
    /**
     *
     *
     * @generated from protobuf field: bilibili.playershared.Scheme.ActionType action_type = 1;
     */
    actionType: Scheme_ActionType;
    /**
     *
     *
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
}
/**
 * @generated from protobuf enum bilibili.playershared.Scheme.ActionType
 */
export declare enum Scheme_ActionType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: SHOW_TOAST = 1;
     */
    SHOW_TOAST = 1
}
/**
 * 视频流信息
 *
 * @generated from protobuf message bilibili.playershared.Stream
 */
export interface Stream {
    /**
     * 元数据
     *
     * @generated from protobuf field: bilibili.playershared.StreamInfo stream_info = 1;
     */
    streamInfo?: StreamInfo;
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "dashVideo";
        /**
         * dash流
         *
         * @generated from protobuf field: bilibili.playershared.DashVideo dash_video = 2;
         */
        dashVideo: DashVideo;
    } | {
        oneofKind: "segmentVideo";
        /**
         * 分段流
         *
         * @generated from protobuf field: bilibili.playershared.SegmentVideo segment_video = 3;
         */
        segmentVideo: SegmentVideo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * 视频流信息: 元数据
 *
 * @generated from protobuf message bilibili.playershared.StreamInfo
 */
export interface StreamInfo {
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint32 quality = 1;
     */
    quality: number;
    /**
     * 格式
     *
     * @generated from protobuf field: string format = 2;
     */
    format: string;
    /**
     * 格式描述
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * 错误码
     *
     * @generated from protobuf field: uint32 err_code = 4;
     */
    errCode: number;
    /**
     * 不满足条件信息
     *
     * @generated from protobuf field: bilibili.playershared.StreamLimit limit = 5;
     */
    limit?: StreamLimit;
    /**
     * 是否需要vip
     *
     * @generated from protobuf field: bool need_vip = 6;
     */
    needVip: boolean;
    /**
     * 是否需要登录
     *
     * @generated from protobuf field: bool need_login = 7;
     */
    needLogin: boolean;
    /**
     * 是否完整
     *
     * @generated from protobuf field: bool intact = 8;
     */
    intact: boolean;
    /**
     * 是否非全二压
     *
     * @generated from protobuf field: bool no_rexcode = 9;
     */
    noRexcode: boolean;
    /**
     * 清晰度属性位
     *
     * @generated from protobuf field: int64 attribute = 10;
     */
    attribute: bigint;
    /**
     * 新版格式描述
     *
     * @generated from protobuf field: string new_description = 11;
     */
    newDescription: string;
    /**
     * 格式文字
     *
     * @generated from protobuf field: string display_desc = 12;
     */
    displayDesc: string;
    /**
     * 新版格式描述备注
     *
     * @generated from protobuf field: string superscript = 13;
     */
    superscript: string;
    /**
     *
     *
     * @generated from protobuf field: bool vip_free = 14;
     */
    vipFree: boolean;
    /**
     *
     *
     * @generated from protobuf field: string subtitle = 15;
     */
    subtitle: string;
    /**
     * 方案
     *
     * @generated from protobuf field: bilibili.playershared.Scheme scheme = 16;
     */
    scheme?: Scheme;
    /**
     * 支持drm
     *
     * @generated from protobuf field: bool support_drm = 17;
     */
    supportDrm: boolean;
}
/**
 * Dash条目
 *
 * @generated from protobuf message bilibili.playershared.DashItem
 */
export interface DashItem {
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * 主线流
     *
     * @generated from protobuf field: string base_url = 2;
     */
    baseUrl: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 3;
     */
    backupUrl: string[];
    /**
     * 带宽
     *
     * @generated from protobuf field: uint32 bandwidth = 4;
     */
    bandwidth: number;
    /**
     * 编码id
     *
     * @generated from protobuf field: uint32 codecid = 5;
     */
    codecid: number;
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 6;
     */
    md5: string;
    /**
     * 大小
     *
     * @generated from protobuf field: uint64 size = 7;
     */
    size: bigint;
    /**
     * 帧率
     *
     * @generated from protobuf field: string frame_rate = 8;
     */
    frameRate: string;
    /**
     * DRM密钥
     *
     * @generated from protobuf field: string widevine_pssh = 9;
     */
    widevinePssh: string;
}
/**
 * 视频流信息: dash流
 *
 * @generated from protobuf message bilibili.playershared.DashVideo
 */
export interface DashVideo {
    /**
     * 主线流
     *
     * @generated from protobuf field: string base_url = 1;
     */
    baseUrl: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 2;
     */
    backupUrl: string[];
    /**
     * 带宽
     *
     * @generated from protobuf field: uint32 bandwidth = 3;
     */
    bandwidth: number;
    /**
     * 编码id
     *
     * @generated from protobuf field: uint32 codecid = 4;
     */
    codecid: number;
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 5;
     */
    md5: string;
    /**
     * 大小
     *
     * @generated from protobuf field: uint64 size = 6;
     */
    size: bigint;
    /**
     * 伴音质量id
     *
     * @generated from protobuf field: uint32 audio_id = 7;
     */
    audioId: number;
    /**
     * 是否非全二压
     *
     * @generated from protobuf field: bool no_rexcode = 8;
     */
    noRexcode: boolean;
    /**
     * 帧率
     *
     * @generated from protobuf field: string frame_rate = 9;
     */
    frameRate: string;
    /**
     * 宽
     *
     * @generated from protobuf field: int32 width = 10;
     */
    width: number;
    /**
     * 高
     *
     * @generated from protobuf field: int32 height = 11;
     */
    height: number;
    /**
     * DRM密钥
     *
     * @generated from protobuf field: string widevine_pssh = 12;
     */
    widevinePssh: string;
}
/**
 * 视频流信息: 分段流
 *
 * @generated from protobuf message bilibili.playershared.SegmentVideo
 */
export interface SegmentVideo {
    /**
     * @generated from protobuf field: repeated bilibili.playershared.ResponseUrl segment = 1;
     */
    segment: ResponseUrl[];
}
/**
 * 分段流条目
 *
 * @generated from protobuf message bilibili.playershared.ResponseUrl
 */
export interface ResponseUrl {
    /**
     * 分段序号
     *
     * @generated from protobuf field: uint32 order = 1;
     */
    order: number;
    /**
     * 分段时长
     *
     * @generated from protobuf field: uint64 length = 2;
     */
    length: bigint;
    /**
     * 分段大小
     *
     * @generated from protobuf field: uint64 size = 3;
     */
    size: bigint;
    /**
     * 主线流
     *
     * @generated from protobuf field: string url = 4;
     */
    url: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 5;
     */
    backupUrl: string[];
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 6;
     */
    md5: string;
}
/**
 * Dash Response, 未使用
 *
 * @generated from protobuf message bilibili.playershared.ResponseDash
 */
export interface ResponseDash {
    /**
     * @generated from protobuf field: repeated bilibili.playershared.DashItem video = 1;
     */
    video: DashItem[];
    /**
     * @generated from protobuf field: repeated bilibili.playershared.DashItem audio = 2;
     */
    audio: DashItem[];
}
/**
 * 视频流信息: 流媒体元数据: 清晰度不满足条件信息
 *
 * @generated from protobuf message bilibili.playershared.StreamLimit
 */
export interface StreamLimit {
    /**
     * 标题
     *
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * 跳转地址
     *
     * @generated from protobuf field: string uri = 2;
     */
    uri: string;
    /**
     * 提示信息
     *
     * @generated from protobuf field: string msg = 3;
     */
    msg: string;
}
/**
 * 播放页信息-请求: 音视频VOD
 *
 * @generated from protobuf message bilibili.playershared.VideoVod
 */
export interface VideoVod {
    /**
     * 视频aid
     *
     * @generated from protobuf field: int32 aid = 1;
     */
    aid: number;
    /**
     * 视频cid
     *
     * @generated from protobuf field: int32 cid = 2;
     */
    cid: number;
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint64 qn = 3 [jstype = JS_NUMBER];
     */
    qn: number;
    /**
     * 视频流版本
     *
     * @generated from protobuf field: int32 fnver = 4;
     */
    fnver: number;
    /**
     * 视频流格式
     *
     * @generated from protobuf field: int32 fnval = 5;
     */
    fnval: number;
    /**
     * 下载模式
     * 0:播放 1:flv下载 2:dash下载
     *
     * @generated from protobuf field: uint32 download = 6;
     */
    download: number;
    /**
     * 流url强制是用域名
     * 0:允许使用ip 1:使用http 2:使用https
     *
     * @generated from protobuf field: int32 force_host = 7;
     */
    forceHost: number;
    /**
     * 是否4K
     *
     * @generated from protobuf field: bool fourk = 8;
     */
    fourk: boolean;
    /**
     * 视频编码
     *
     * @generated from protobuf field: bilibili.playershared.CodeType prefer_codec_type = 9;
     */
    preferCodecType: CodeType;
    /**
     * 响度均衡
     *
     * @generated from protobuf field: uint64 voice_balance = 10 [jstype = JS_NUMBER];
     */
    voiceBalance: number;
}
/**
 * 播放页信息-响应: VOD音视频信息
 *
 * @generated from protobuf message bilibili.playershared.VodInfo
 */
export interface VodInfo {
    /**
     * 视频清晰度
     *
     * @generated from protobuf field: uint32 quality = 1;
     */
    quality: number;
    /**
     * 视频格式
     *
     * @generated from protobuf field: string format = 2;
     */
    format: string;
    /**
     * 视频时长
     *
     * @generated from protobuf field: uint64 timelength = 3 [jstype = JS_NUMBER];
     */
    timelength: number;
    /**
     * 视频编码id
     *
     * @generated from protobuf field: uint32 video_codecid = 4;
     */
    videoCodecid: number;
    /**
     * 视频流
     *
     * @generated from protobuf field: repeated bilibili.playershared.Stream stream_list = 5;
     */
    streamList: Stream[];
    /**
     * 伴音流
     *
     * @generated from protobuf field: repeated bilibili.playershared.DashItem dash_audio = 6;
     */
    dashAudio: DashItem[];
    /**
     * 杜比伴音流
     *
     * @generated from protobuf field: bilibili.playershared.DolbyItem dolby = 7;
     */
    dolby?: DolbyItem;
    /**
     * 响度均衡操作信息
     *
     * @generated from protobuf field: bilibili.playershared.VolumeInfo volume = 8;
     */
    volume?: VolumeInfo;
    /**
     * HIRES伴音流信息
     *
     * @generated from protobuf field: bilibili.playershared.LossLessItem loss_less_item = 9;
     */
    lossLessItem?: LossLessItem;
}
/**
 * 杜比伴音流信息
 *
 * @generated from protobuf message bilibili.playershared.DolbyItem
 */
export interface DolbyItem {
    /**
     * 杜比类型
     *
     * @generated from protobuf field: bilibili.playershared.DolbyItem.Type type = 1;
     */
    type: DolbyItem_Type;
    /**
     * 音频流
     *
     * @generated from protobuf field: repeated bilibili.playershared.DashItem audio = 2;
     */
    audio: DashItem[];
}
/**
 * 杜比类型
 *
 * @generated from protobuf enum bilibili.playershared.DolbyItem.Type
 */
export declare enum DolbyItem_Type {
    /**
     * NONE
     *
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * 普通杜比音效
     *
     * @generated from protobuf enum value: COMMON = 1;
     */
    COMMON = 1,
    /**
     * 全景杜比音效
     *
     * @generated from protobuf enum value: ATMOS = 2;
     */
    ATMOS = 2
}
/**
 * HIRES伴音流信息
 *
 * @generated from protobuf message bilibili.playershared.LossLessItem
 */
export interface LossLessItem {
    /**
     * 是否为hires
     *
     * @generated from protobuf field: bool is_lossless_audio = 1;
     */
    isLosslessAudio: boolean;
    /**
     * 音频流信息
     *
     * @generated from protobuf field: bilibili.playershared.DashItem audio = 2;
     */
    audio?: DashItem;
    /**
     * 是否需要大会员
     *
     * @generated from protobuf field: bool need_vip = 3;
     */
    needVip: boolean;
}
/**
 * 响度均衡操作信息
 *
 * @generated from protobuf message bilibili.playershared.VolumeInfo
 */
export interface VolumeInfo {
    /**
     * Measured integrated loudness 实际综合响度
     *
     * @generated from protobuf field: double measured_i = 1;
     */
    measuredI: number;
    /**
     * Measured loudness range 实际响度范围
     *
     * @generated from protobuf field: double measured_lra = 2;
     */
    measuredLra: number;
    /**
     * Measured true peak 实际响度真峰值
     *
     * @generated from protobuf field: double measured_tp = 3;
     */
    measuredTp: number;
    /**
     * Measured threshold 实际响度阈值
     *
     * @generated from protobuf field: double measured_threshold = 4;
     */
    measuredThreshold: number;
    /**
     * Target offset gain(Gain is applied before the true-peak limiter) 目标增益Offset(增益在真实峰值限制器之前应用)
     *
     * @generated from protobuf field: double target_offset = 5;
     */
    targetOffset: number;
    /**
     * Target integrated loudness 目标综合响度
     *
     * @generated from protobuf field: double target_i = 6;
     */
    targetI: number;
    /**
     * Target true peak 目标响度真峰值
     *
     * @generated from protobuf field: double target_tp = 7;
     */
    targetTp: number;
}
/**
 *
 *
 * @generated from protobuf message bilibili.playershared.PlayArc
 */
export interface PlayArc {
    /**
     *
     *
     * @generated from protobuf field: bilibili.playershared.VideoType video_type = 1;
     */
    videoType: VideoType;
    /**
     *
     *
     * @generated from protobuf field: uint64 aid = 2;
     */
    aid: bigint;
    /**
     *
     *
     * @generated from protobuf field: uint64 cid = 3;
     */
    cid: bigint;
    /**
     *
     *
     * @generated from protobuf field: bilibili.playershared.DrmTechType drm_tech_type = 4;
     */
    drmTechType: DrmTechType;
}
/**
 * 播放页信息-响应: PlayArcConf
 *
 * @generated from protobuf message bilibili.playershared.PlayArcConf
 */
export interface PlayArcConf {
    /**
     * @generated from protobuf field: map<int32, bilibili.playershared.ArcConf> arc_confs = 1;
     */
    arcConfs: {
        [key: number]: ArcConf;
    };
}
/**
 * 播放页信息-响应: 高画质试看信息
 *
 * @generated from protobuf message bilibili.playershared.QnTrialInfo
 */
export interface QnTrialInfo {
    /**
     * 能否试看高画质
     *
     * @generated from protobuf field: bool trial_able = 1;
     */
    trialAble: boolean;
    /**
     *
     *
     * @generated from protobuf field: int32 remaining_times = 2;
     */
    remainingTimes: number;
    /**
     * @generated from protobuf field: int32 start = 3;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 time_length = 4;
     */
    timeLength: number;
    /**
     * @generated from protobuf field: bilibili.playershared.Toast start_toast = 5;
     */
    startToast?: Toast;
    /**
     * @generated from protobuf field: bilibili.playershared.Toast end_toast = 6;
     */
    endToast?: Toast;
    /**
     * @generated from protobuf field: bilibili.playershared.Button quality_open_tip_btn = 8;
     */
    qualityOpenTipBtn?: Button;
}
/**
 * Toast信息
 *
 * @generated from protobuf message bilibili.playershared.Toast
 */
export interface Toast {
    /**
     * toast文案
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * toast按钮
     *
     * @generated from protobuf field: bilibili.playershared.Button button = 2;
     */
    button?: Button;
}
/**
 * 事件
 *
 * @generated from protobuf message bilibili.playershared.Event
 */
export interface Event {
    /**
     * 震动
     *
     * @generated from protobuf field: bilibili.playershared.Shake shake = 1;
     */
    shake?: Shake;
}
/**
 * 震动
 *
 * @generated from protobuf message bilibili.playershared.Shake
 */
export interface Shake {
    /**
     *
     *
     * @generated from protobuf field: string file = 1;
     */
    file: string;
}
/**
 * 视频编码
 *
 * @generated from protobuf enum bilibili.playershared.CodeType
 */
export declare enum CodeType {
    /**
     * 不指定
     *
     * @generated from protobuf enum value: NOCODE = 0;
     */
    NOCODE = 0,
    /**
     * H264
     *
     * @generated from protobuf enum value: CODE264 = 1;
     */
    CODE264 = 1,
    /**
     * H265
     *
     * @generated from protobuf enum value: CODE265 = 2;
     */
    CODE265 = 2,
    /**
     * AV1
     *
     * @generated from protobuf enum value: CODEAV1 = 3;
     */
    CODEAV1 = 3
}
/**
 * 功能类型
 *
 * @generated from protobuf enum bilibili.playershared.ConfType
 */
export declare enum ConfType {
    /**
     * @generated from protobuf enum value: NoType = 0;
     */
    NoType = 0,
    /**
     * @generated from protobuf enum value: FLIPCONF = 1;
     */
    FLIPCONF = 1,
    /**
     * @generated from protobuf enum value: CASTCONF = 2;
     */
    CASTCONF = 2,
    /**
     * @generated from protobuf enum value: FEEDBACK = 3;
     */
    FEEDBACK = 3,
    /**
     * @generated from protobuf enum value: SUBTITLE = 4;
     */
    SUBTITLE = 4,
    /**
     * @generated from protobuf enum value: PLAYBACKRATE = 5;
     */
    PLAYBACKRATE = 5,
    /**
     * @generated from protobuf enum value: TIMEUP = 6;
     */
    TIMEUP = 6,
    /**
     * @generated from protobuf enum value: PLAYBACKMODE = 7;
     */
    PLAYBACKMODE = 7,
    /**
     * @generated from protobuf enum value: SCALEMODE = 8;
     */
    SCALEMODE = 8,
    /**
     * @generated from protobuf enum value: BACKGROUNDPLAY = 9;
     */
    BACKGROUNDPLAY = 9,
    /**
     * @generated from protobuf enum value: LIKE = 10;
     */
    LIKE = 10,
    /**
     * @generated from protobuf enum value: DISLIKE = 11;
     */
    DISLIKE = 11,
    /**
     * @generated from protobuf enum value: COIN = 12;
     */
    COIN = 12,
    /**
     * @generated from protobuf enum value: ELEC = 13;
     */
    ELEC = 13,
    /**
     * @generated from protobuf enum value: SHARE = 14;
     */
    SHARE = 14,
    /**
     * @generated from protobuf enum value: SCREENSHOT = 15;
     */
    SCREENSHOT = 15,
    /**
     * @generated from protobuf enum value: LOCKSCREEN = 16;
     */
    LOCKSCREEN = 16,
    /**
     * @generated from protobuf enum value: RECOMMEND = 17;
     */
    RECOMMEND = 17,
    /**
     * @generated from protobuf enum value: PLAYBACKSPEED = 18;
     */
    PLAYBACKSPEED = 18,
    /**
     * @generated from protobuf enum value: DEFINITION = 19;
     */
    DEFINITION = 19,
    /**
     * @generated from protobuf enum value: SELECTIONS = 20;
     */
    SELECTIONS = 20,
    /**
     * @generated from protobuf enum value: NEXT = 21;
     */
    NEXT = 21,
    /**
     * @generated from protobuf enum value: EDITDM = 22;
     */
    EDITDM = 22,
    /**
     * @generated from protobuf enum value: SMALLWINDOW = 23;
     */
    SMALLWINDOW = 23,
    /**
     * @generated from protobuf enum value: SHAKE = 24;
     */
    SHAKE = 24,
    /**
     * @generated from protobuf enum value: OUTERDM = 25;
     */
    OUTERDM = 25,
    /**
     * @generated from protobuf enum value: INNERDM = 26;
     */
    INNERDM = 26,
    /**
     * @generated from protobuf enum value: PANORAMA = 27;
     */
    PANORAMA = 27,
    /**
     * @generated from protobuf enum value: DOLBY = 28;
     */
    DOLBY = 28,
    /**
     * @generated from protobuf enum value: COLORFILTER = 29;
     */
    COLORFILTER = 29,
    /**
     * @generated from protobuf enum value: LOSSLESS = 30;
     */
    LOSSLESS = 30,
    /**
     * @generated from protobuf enum value: FREYAENTER = 31;
     */
    FREYAENTER = 31,
    /**
     * @generated from protobuf enum value: FREYAFULLENTER = 32;
     */
    FREYAFULLENTER = 32,
    /**
     * @generated from protobuf enum value: SKIPOPED = 33;
     */
    SKIPOPED = 33,
    /**
     * @generated from protobuf enum value: RECORDSCREEN = 34;
     */
    RECORDSCREEN = 34,
    /**
     * @generated from protobuf enum value: DUBBING = 35;
     */
    DUBBING = 35,
    /**
     * @generated from protobuf enum value: LISTEN = 36;
     */
    LISTEN = 36
}
/**
 * DRM类型
 *
 * @generated from protobuf enum bilibili.playershared.DrmTechType
 */
export declare enum DrmTechType {
    /**
     *
     *
     * @generated from protobuf enum value: UNKNOWN_DRM = 0;
     */
    UNKNOWN_DRM = 0,
    /**
     *
     *
     * @generated from protobuf enum value: FAIR_PLAY = 1;
     */
    FAIR_PLAY = 1,
    /**
     *
     *
     * @generated from protobuf enum value: WIDE_VINE = 2;
     */
    WIDE_VINE = 2,
    /**
     * 哔哩哔哩自研DRM
     *
     * @generated from protobuf enum value: BILI_DRM = 3;
     */
    BILI_DRM = 3
}
/**
 * 错误码
 *
 * @generated from protobuf enum bilibili.playershared.PlayErr
 */
export declare enum PlayErr {
    /**
     * @generated from protobuf enum value: NoErr = 0;
     */
    NoErr = 0,
    /**
     * 管控类型的错误码
     *
     * @generated from protobuf enum value: WithMultiDeviceLoginErr = 1;
     */
    WithMultiDeviceLoginErr = 1
}
/**
 *
 *
 * @generated from protobuf enum bilibili.playershared.UnsupportScene
 */
export declare enum UnsupportScene {
    /**
     *
     *
     * @generated from protobuf enum value: UNKNOWN_SCENE = 0;
     */
    UNKNOWN_SCENE = 0,
    /**
     *
     *
     * @generated from protobuf enum value: PREMIERE = 1;
     */
    PREMIERE = 1
}
/**
 * 视频类型
 *
 * @generated from protobuf enum bilibili.playershared.VideoType
 */
export declare enum VideoType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * 用户生成内容
     *
     * @generated from protobuf enum value: UGC = 1;
     */
    UGC = 1,
    /**
     * 专业生产内容
     *
     * @generated from protobuf enum value: PGC = 2;
     */
    PGC = 2
}
declare class ArcConf$Type extends MessageType<ArcConf> {
    constructor();
    create(value?: PartialMessage<ArcConf>): ArcConf;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArcConf): ArcConf;
    internalBinaryWrite(message: ArcConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ArcConf
 */
export declare const ArcConf: ArcConf$Type;
declare class Button$Type extends MessageType<Button> {
    constructor();
    create(value?: PartialMessage<Button>): Button;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Button): Button;
    private binaryReadMap3;
    internalBinaryWrite(message: Button, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Button
 */
export declare const Button: Button$Type;
declare class ConfValue$Type extends MessageType<ConfValue> {
    constructor();
    create(value?: PartialMessage<ConfValue>): ConfValue;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfValue): ConfValue;
    internalBinaryWrite(message: ConfValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ConfValue
 */
export declare const ConfValue: ConfValue$Type;
declare class DeviceConf$Type extends MessageType<DeviceConf> {
    constructor();
    create(value?: PartialMessage<DeviceConf>): DeviceConf;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceConf): DeviceConf;
    internalBinaryWrite(message: DeviceConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DeviceConf
 */
export declare const DeviceConf: DeviceConf$Type;
declare class ExtraContent$Type extends MessageType<ExtraContent> {
    constructor();
    create(value?: PartialMessage<ExtraContent>): ExtraContent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtraContent): ExtraContent;
    internalBinaryWrite(message: ExtraContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ExtraContent
 */
export declare const ExtraContent: ExtraContent$Type;
declare class History$Type extends MessageType<History> {
    constructor();
    create(value?: PartialMessage<History>): History;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: History): History;
    internalBinaryWrite(message: History, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.History
 */
export declare const History: History$Type;
declare class HistoryInfo$Type extends MessageType<HistoryInfo> {
    constructor();
    create(value?: PartialMessage<HistoryInfo>): HistoryInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoryInfo): HistoryInfo;
    internalBinaryWrite(message: HistoryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.HistoryInfo
 */
export declare const HistoryInfo: HistoryInfo$Type;
declare class PlayDeviceConf$Type extends MessageType<PlayDeviceConf> {
    constructor();
    create(value?: PartialMessage<PlayDeviceConf>): PlayDeviceConf;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayDeviceConf): PlayDeviceConf;
    private binaryReadMap1;
    internalBinaryWrite(message: PlayDeviceConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayDeviceConf
 */
export declare const PlayDeviceConf: PlayDeviceConf$Type;
declare class Scheme$Type extends MessageType<Scheme> {
    constructor();
    create(value?: PartialMessage<Scheme>): Scheme;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Scheme): Scheme;
    internalBinaryWrite(message: Scheme, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Scheme
 */
export declare const Scheme: Scheme$Type;
declare class Stream$Type extends MessageType<Stream> {
    constructor();
    create(value?: PartialMessage<Stream>): Stream;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Stream): Stream;
    internalBinaryWrite(message: Stream, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Stream
 */
export declare const Stream: Stream$Type;
declare class StreamInfo$Type extends MessageType<StreamInfo> {
    constructor();
    create(value?: PartialMessage<StreamInfo>): StreamInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamInfo): StreamInfo;
    internalBinaryWrite(message: StreamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.StreamInfo
 */
export declare const StreamInfo: StreamInfo$Type;
declare class DashItem$Type extends MessageType<DashItem> {
    constructor();
    create(value?: PartialMessage<DashItem>): DashItem;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashItem): DashItem;
    internalBinaryWrite(message: DashItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DashItem
 */
export declare const DashItem: DashItem$Type;
declare class DashVideo$Type extends MessageType<DashVideo> {
    constructor();
    create(value?: PartialMessage<DashVideo>): DashVideo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashVideo): DashVideo;
    internalBinaryWrite(message: DashVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DashVideo
 */
export declare const DashVideo: DashVideo$Type;
declare class SegmentVideo$Type extends MessageType<SegmentVideo> {
    constructor();
    create(value?: PartialMessage<SegmentVideo>): SegmentVideo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SegmentVideo): SegmentVideo;
    internalBinaryWrite(message: SegmentVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.SegmentVideo
 */
export declare const SegmentVideo: SegmentVideo$Type;
declare class ResponseUrl$Type extends MessageType<ResponseUrl> {
    constructor();
    create(value?: PartialMessage<ResponseUrl>): ResponseUrl;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseUrl): ResponseUrl;
    internalBinaryWrite(message: ResponseUrl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ResponseUrl
 */
export declare const ResponseUrl: ResponseUrl$Type;
declare class ResponseDash$Type extends MessageType<ResponseDash> {
    constructor();
    create(value?: PartialMessage<ResponseDash>): ResponseDash;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseDash): ResponseDash;
    internalBinaryWrite(message: ResponseDash, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.ResponseDash
 */
export declare const ResponseDash: ResponseDash$Type;
declare class StreamLimit$Type extends MessageType<StreamLimit> {
    constructor();
    create(value?: PartialMessage<StreamLimit>): StreamLimit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamLimit): StreamLimit;
    internalBinaryWrite(message: StreamLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.StreamLimit
 */
export declare const StreamLimit: StreamLimit$Type;
declare class VideoVod$Type extends MessageType<VideoVod> {
    constructor();
    create(value?: PartialMessage<VideoVod>): VideoVod;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoVod): VideoVod;
    internalBinaryWrite(message: VideoVod, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.VideoVod
 */
export declare const VideoVod: VideoVod$Type;
declare class VodInfo$Type extends MessageType<VodInfo> {
    constructor();
    create(value?: PartialMessage<VodInfo>): VodInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VodInfo): VodInfo;
    internalBinaryWrite(message: VodInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.VodInfo
 */
export declare const VodInfo: VodInfo$Type;
declare class DolbyItem$Type extends MessageType<DolbyItem> {
    constructor();
    create(value?: PartialMessage<DolbyItem>): DolbyItem;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DolbyItem): DolbyItem;
    internalBinaryWrite(message: DolbyItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.DolbyItem
 */
export declare const DolbyItem: DolbyItem$Type;
declare class LossLessItem$Type extends MessageType<LossLessItem> {
    constructor();
    create(value?: PartialMessage<LossLessItem>): LossLessItem;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LossLessItem): LossLessItem;
    internalBinaryWrite(message: LossLessItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.LossLessItem
 */
export declare const LossLessItem: LossLessItem$Type;
declare class VolumeInfo$Type extends MessageType<VolumeInfo> {
    constructor();
    create(value?: PartialMessage<VolumeInfo>): VolumeInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VolumeInfo): VolumeInfo;
    internalBinaryWrite(message: VolumeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.VolumeInfo
 */
export declare const VolumeInfo: VolumeInfo$Type;
declare class PlayArc$Type extends MessageType<PlayArc> {
    constructor();
    create(value?: PartialMessage<PlayArc>): PlayArc;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayArc): PlayArc;
    internalBinaryWrite(message: PlayArc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayArc
 */
export declare const PlayArc: PlayArc$Type;
declare class PlayArcConf$Type extends MessageType<PlayArcConf> {
    constructor();
    create(value?: PartialMessage<PlayArcConf>): PlayArcConf;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayArcConf): PlayArcConf;
    private binaryReadMap1;
    internalBinaryWrite(message: PlayArcConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.PlayArcConf
 */
export declare const PlayArcConf: PlayArcConf$Type;
declare class QnTrialInfo$Type extends MessageType<QnTrialInfo> {
    constructor();
    create(value?: PartialMessage<QnTrialInfo>): QnTrialInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QnTrialInfo): QnTrialInfo;
    internalBinaryWrite(message: QnTrialInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.QnTrialInfo
 */
export declare const QnTrialInfo: QnTrialInfo$Type;
declare class Toast$Type extends MessageType<Toast> {
    constructor();
    create(value?: PartialMessage<Toast>): Toast;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Toast): Toast;
    internalBinaryWrite(message: Toast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Toast
 */
export declare const Toast: Toast$Type;
declare class Event$Type extends MessageType<Event> {
    constructor();
    create(value?: PartialMessage<Event>): Event;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event;
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Event
 */
export declare const Event: Event$Type;
declare class Shake$Type extends MessageType<Shake> {
    constructor();
    create(value?: PartialMessage<Shake>): Shake;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Shake): Shake;
    internalBinaryWrite(message: Shake, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message bilibili.playershared.Shake
 */
export declare const Shake: Shake$Type;
export {};
