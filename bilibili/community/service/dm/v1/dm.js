// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/community/service/dm/v1/dm.proto" (package "bilibili.community.service.dm.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,output_javascript
// @generated from protobuf file "bilibili/community/service/dm/v1/dm.proto" (package "bilibili.community.service.dm.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.AvatarType
 */
export var AvatarType;
(function (AvatarType) {
    /**
     * @generated from protobuf enum value: AvatarTypeNone = 0;
     */
    AvatarType[AvatarType["AvatarTypeNone"] = 0] = "AvatarTypeNone";
    /**
     * @generated from protobuf enum value: AvatarTypeNFT = 1;
     */
    AvatarType[AvatarType["AvatarTypeNFT"] = 1] = "AvatarTypeNFT";
})(AvatarType || (AvatarType = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.BubbleType
 */
export var BubbleType;
(function (BubbleType) {
    /**
     * @generated from protobuf enum value: BubbleTypeNone = 0;
     */
    BubbleType[BubbleType["BubbleTypeNone"] = 0] = "BubbleTypeNone";
    /**
     * @generated from protobuf enum value: BubbleTypeClickButton = 1;
     */
    BubbleType[BubbleType["BubbleTypeClickButton"] = 1] = "BubbleTypeClickButton";
    /**
     * @generated from protobuf enum value: BubbleTypeDmSettingPanel = 2;
     */
    BubbleType[BubbleType["BubbleTypeDmSettingPanel"] = 2] = "BubbleTypeDmSettingPanel";
})(BubbleType || (BubbleType = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.CheckboxType
 */
export var CheckboxType;
(function (CheckboxType) {
    /**
     * @generated from protobuf enum value: CheckboxTypeNone = 0;
     */
    CheckboxType[CheckboxType["CheckboxTypeNone"] = 0] = "CheckboxTypeNone";
    /**
     * @generated from protobuf enum value: CheckboxTypeEncourage = 1;
     */
    CheckboxType[CheckboxType["CheckboxTypeEncourage"] = 1] = "CheckboxTypeEncourage";
    /**
     * @generated from protobuf enum value: CheckboxTypeColorDM = 2;
     */
    CheckboxType[CheckboxType["CheckboxTypeColorDM"] = 2] = "CheckboxTypeColorDM";
})(CheckboxType || (CheckboxType = {}));
/**
 * 弹幕属性位值
 *
 * @generated from protobuf enum bilibili.community.service.dm.v1.DMAttrBit
 */
export var DMAttrBit;
(function (DMAttrBit) {
    /**
     * 保护弹幕
     *
     * @generated from protobuf enum value: DMAttrBitProtect = 0;
     */
    DMAttrBit[DMAttrBit["DMAttrBitProtect"] = 0] = "DMAttrBitProtect";
    /**
     * 直播弹幕
     *
     * @generated from protobuf enum value: DMAttrBitFromLive = 1;
     */
    DMAttrBit[DMAttrBit["DMAttrBitFromLive"] = 1] = "DMAttrBitFromLive";
    /**
     * 高赞弹幕
     *
     * @generated from protobuf enum value: DMAttrHighLike = 2;
     */
    DMAttrBit[DMAttrBit["DMAttrHighLike"] = 2] = "DMAttrHighLike";
})(DMAttrBit || (DMAttrBit = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.DmColorfulType
 */
export var DmColorfulType;
(function (DmColorfulType) {
    /**
     * 无
     *
     * @generated from protobuf enum value: NoneType = 0;
     */
    DmColorfulType[DmColorfulType["NoneType"] = 0] = "NoneType";
    /**
     * 渐变色
     *
     * @generated from protobuf enum value: VipGradualColor = 60001;
     */
    DmColorfulType[DmColorfulType["VipGradualColor"] = 60001] = "VipGradualColor";
})(DmColorfulType || (DmColorfulType = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.ExposureType
 */
export var ExposureType;
(function (ExposureType) {
    /**
     * @generated from protobuf enum value: ExposureTypeNone = 0;
     */
    ExposureType[ExposureType["ExposureTypeNone"] = 0] = "ExposureTypeNone";
    /**
     * @generated from protobuf enum value: ExposureTypeDMSend = 1;
     */
    ExposureType[ExposureType["ExposureTypeDMSend"] = 1] = "ExposureTypeDMSend";
})(ExposureType || (ExposureType = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.PostPanelBizType
 */
export var PostPanelBizType;
(function (PostPanelBizType) {
    /**
     * @generated from protobuf enum value: PostPanelBizTypeNone = 0;
     */
    PostPanelBizType[PostPanelBizType["PostPanelBizTypeNone"] = 0] = "PostPanelBizTypeNone";
    /**
     * @generated from protobuf enum value: PostPanelBizTypeEncourage = 1;
     */
    PostPanelBizType[PostPanelBizType["PostPanelBizTypeEncourage"] = 1] = "PostPanelBizTypeEncourage";
    /**
     * @generated from protobuf enum value: PostPanelBizTypeColorDM = 2;
     */
    PostPanelBizType[PostPanelBizType["PostPanelBizTypeColorDM"] = 2] = "PostPanelBizTypeColorDM";
    /**
     * @generated from protobuf enum value: PostPanelBizTypeNFTDM = 3;
     */
    PostPanelBizType[PostPanelBizType["PostPanelBizTypeNFTDM"] = 3] = "PostPanelBizTypeNFTDM";
    /**
     * @generated from protobuf enum value: PostPanelBizTypeFragClose = 4;
     */
    PostPanelBizType[PostPanelBizType["PostPanelBizTypeFragClose"] = 4] = "PostPanelBizTypeFragClose";
    /**
     * @generated from protobuf enum value: PostPanelBizTypeRecommend = 5;
     */
    PostPanelBizType[PostPanelBizType["PostPanelBizTypeRecommend"] = 5] = "PostPanelBizTypeRecommend";
})(PostPanelBizType || (PostPanelBizType = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.PostStatus
 */
export var PostStatus;
(function (PostStatus) {
    /**
     * @generated from protobuf enum value: PostStatusNormal = 0;
     */
    PostStatus[PostStatus["PostStatusNormal"] = 0] = "PostStatusNormal";
    /**
     * @generated from protobuf enum value: PostStatusClosed = 1;
     */
    PostStatus[PostStatus["PostStatusClosed"] = 1] = "PostStatusClosed";
})(PostStatus || (PostStatus = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.RenderType
 */
export var RenderType;
(function (RenderType) {
    /**
     * @generated from protobuf enum value: RenderTypeNone = 0;
     */
    RenderType[RenderType["RenderTypeNone"] = 0] = "RenderTypeNone";
    /**
     * @generated from protobuf enum value: RenderTypeSingle = 1;
     */
    RenderType[RenderType["RenderTypeSingle"] = 1] = "RenderTypeSingle";
    /**
     * @generated from protobuf enum value: RenderTypeRotation = 2;
     */
    RenderType[RenderType["RenderTypeRotation"] = 2] = "RenderTypeRotation";
})(RenderType || (RenderType = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.SubtitleAiStatus
 */
export var SubtitleAiStatus;
(function (SubtitleAiStatus) {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    SubtitleAiStatus[SubtitleAiStatus["None"] = 0] = "None";
    /**
     * @generated from protobuf enum value: Exposure = 1;
     */
    SubtitleAiStatus[SubtitleAiStatus["Exposure"] = 1] = "Exposure";
    /**
     * @generated from protobuf enum value: Assist = 2;
     */
    SubtitleAiStatus[SubtitleAiStatus["Assist"] = 2] = "Assist";
})(SubtitleAiStatus || (SubtitleAiStatus = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.SubtitleAiType
 */
export var SubtitleAiType;
(function (SubtitleAiType) {
    /**
     * @generated from protobuf enum value: Normal = 0;
     */
    SubtitleAiType[SubtitleAiType["Normal"] = 0] = "Normal";
    /**
     * @generated from protobuf enum value: Translate = 1;
     */
    SubtitleAiType[SubtitleAiType["Translate"] = 1] = "Translate";
})(SubtitleAiType || (SubtitleAiType = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.SubtitleType
 */
export var SubtitleType;
(function (SubtitleType) {
    /**
     * CC字幕
     *
     * @generated from protobuf enum value: CC = 0;
     */
    SubtitleType[SubtitleType["CC"] = 0] = "CC";
    /**
     * AI生成字幕
     *
     * @generated from protobuf enum value: AI = 1;
     */
    SubtitleType[SubtitleType["AI"] = 1] = "AI";
})(SubtitleType || (SubtitleType = {}));
/**
 * @generated from protobuf enum bilibili.community.service.dm.v1.ToastFunctionType
 */
export var ToastFunctionType;
(function (ToastFunctionType) {
    /**
     * @generated from protobuf enum value: ToastFunctionTypeNone = 0;
     */
    ToastFunctionType[ToastFunctionType["ToastFunctionTypeNone"] = 0] = "ToastFunctionTypeNone";
    /**
     * @generated from protobuf enum value: ToastFunctionTypePostPanel = 1;
     */
    ToastFunctionType[ToastFunctionType["ToastFunctionTypePostPanel"] = 1] = "ToastFunctionTypePostPanel";
})(ToastFunctionType || (ToastFunctionType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Avatar$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.Avatar", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar_type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.AvatarType", AvatarType] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.url = "";
        message.avatarType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* bilibili.community.service.dm.v1.AvatarType avatar_type */ 3:
                    message.avatarType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* bilibili.community.service.dm.v1.AvatarType avatar_type = 3; */
        if (message.avatarType !== 0)
            writer.tag(3, WireType.Varint).int32(message.avatarType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.Avatar
 */
export const Avatar = new Avatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bubble$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.Bubble", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.Bubble
 */
export const Bubble = new Bubble$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BubbleV2$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.BubbleV2", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bubble_type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.BubbleType", BubbleType] },
            { no: 4, name: "exposure_once", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "exposure_type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.ExposureType", ExposureType] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.url = "";
        message.bubbleType = 0;
        message.exposureOnce = false;
        message.exposureType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* bilibili.community.service.dm.v1.BubbleType bubble_type */ 3:
                    message.bubbleType = reader.int32();
                    break;
                case /* bool exposure_once */ 4:
                    message.exposureOnce = reader.bool();
                    break;
                case /* bilibili.community.service.dm.v1.ExposureType exposure_type */ 5:
                    message.exposureType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* bilibili.community.service.dm.v1.BubbleType bubble_type = 3; */
        if (message.bubbleType !== 0)
            writer.tag(3, WireType.Varint).int32(message.bubbleType);
        /* bool exposure_once = 4; */
        if (message.exposureOnce !== false)
            writer.tag(4, WireType.Varint).bool(message.exposureOnce);
        /* bilibili.community.service.dm.v1.ExposureType exposure_type = 5; */
        if (message.exposureType !== 0)
            writer.tag(5, WireType.Varint).int32(message.exposureType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.BubbleV2
 */
export const BubbleV2 = new BubbleV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Button$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.Button", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.action = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int32 action */ 2:
                    message.action = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int32 action = 2; */
        if (message.action !== 0)
            writer.tag(2, WireType.Varint).int32(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.Button
 */
export const Button = new Button$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuzzwordConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.BuzzwordConfig", [
            { no: 1, name: "keywords", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BuzzwordShowConfig }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keywords = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.community.service.dm.v1.BuzzwordShowConfig keywords */ 1:
                    message.keywords.push(BuzzwordShowConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.community.service.dm.v1.BuzzwordShowConfig keywords = 1; */
        for (let i = 0; i < message.keywords.length; i++)
            BuzzwordShowConfig.internalBinaryWrite(message.keywords[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.BuzzwordConfig
 */
export const BuzzwordConfig = new BuzzwordConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuzzwordShowConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.BuzzwordShowConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "buzzword_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "schema_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.schema = "";
        message.source = 0;
        message.id = 0;
        message.buzzwordId = 0;
        message.schemaType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string schema */ 2:
                    message.schema = reader.string();
                    break;
                case /* int32 source */ 3:
                    message.source = reader.int32();
                    break;
                case /* int64 id */ 4:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 buzzword_id */ 5:
                    message.buzzwordId = reader.int64().toNumber();
                    break;
                case /* int32 schema_type */ 6:
                    message.schemaType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string schema = 2; */
        if (message.schema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schema);
        /* int32 source = 3; */
        if (message.source !== 0)
            writer.tag(3, WireType.Varint).int32(message.source);
        /* int64 id = 4; */
        if (message.id !== 0)
            writer.tag(4, WireType.Varint).int64(message.id);
        /* int64 buzzword_id = 5; */
        if (message.buzzwordId !== 0)
            writer.tag(5, WireType.Varint).int64(message.buzzwordId);
        /* int32 schema_type = 6; */
        if (message.schemaType !== 0)
            writer.tag(6, WireType.Varint).int32(message.schemaType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.BuzzwordShowConfig
 */
export const BuzzwordShowConfig = new BuzzwordShowConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckBox$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.CheckBox", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.CheckboxType", CheckboxType] },
            { no: 3, name: "default_value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.type = 0;
        message.defaultValue = false;
        message.show = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* bilibili.community.service.dm.v1.CheckboxType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* bool default_value */ 3:
                    message.defaultValue = reader.bool();
                    break;
                case /* bool show */ 4:
                    message.show = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* bilibili.community.service.dm.v1.CheckboxType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* bool default_value = 3; */
        if (message.defaultValue !== false)
            writer.tag(3, WireType.Varint).bool(message.defaultValue);
        /* bool show = 4; */
        if (message.show !== false)
            writer.tag(4, WireType.Varint).bool(message.show);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.CheckBox
 */
export const CheckBox = new CheckBox$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckBoxV2$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.CheckBoxV2", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "default_value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.type = 0;
        message.defaultValue = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* bool default_value */ 3:
                    message.defaultValue = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* bool default_value = 3; */
        if (message.defaultValue !== false)
            writer.tag(3, WireType.Varint).bool(message.defaultValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.CheckBoxV2
 */
export const CheckBoxV2 = new CheckBoxV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClickButton$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.ClickButton", [
            { no: 1, name: "portrait_text", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "landscape_text", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "portrait_text_focus", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "landscape_text_focus", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "render_type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.RenderType", RenderType] },
            { no: 6, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "bubble", kind: "message", T: () => Bubble }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portraitText = [];
        message.landscapeText = [];
        message.portraitTextFocus = [];
        message.landscapeTextFocus = [];
        message.renderType = 0;
        message.show = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string portrait_text */ 1:
                    message.portraitText.push(reader.string());
                    break;
                case /* repeated string landscape_text */ 2:
                    message.landscapeText.push(reader.string());
                    break;
                case /* repeated string portrait_text_focus */ 3:
                    message.portraitTextFocus.push(reader.string());
                    break;
                case /* repeated string landscape_text_focus */ 4:
                    message.landscapeTextFocus.push(reader.string());
                    break;
                case /* bilibili.community.service.dm.v1.RenderType render_type */ 5:
                    message.renderType = reader.int32();
                    break;
                case /* bool show */ 6:
                    message.show = reader.bool();
                    break;
                case /* bilibili.community.service.dm.v1.Bubble bubble */ 7:
                    message.bubble = Bubble.internalBinaryRead(reader, reader.uint32(), options, message.bubble);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string portrait_text = 1; */
        for (let i = 0; i < message.portraitText.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.portraitText[i]);
        /* repeated string landscape_text = 2; */
        for (let i = 0; i < message.landscapeText.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.landscapeText[i]);
        /* repeated string portrait_text_focus = 3; */
        for (let i = 0; i < message.portraitTextFocus.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.portraitTextFocus[i]);
        /* repeated string landscape_text_focus = 4; */
        for (let i = 0; i < message.landscapeTextFocus.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.landscapeTextFocus[i]);
        /* bilibili.community.service.dm.v1.RenderType render_type = 5; */
        if (message.renderType !== 0)
            writer.tag(5, WireType.Varint).int32(message.renderType);
        /* bool show = 6; */
        if (message.show !== false)
            writer.tag(6, WireType.Varint).bool(message.show);
        /* bilibili.community.service.dm.v1.Bubble bubble = 7; */
        if (message.bubble)
            Bubble.internalBinaryWrite(message.bubble, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.ClickButton
 */
export const ClickButton = new ClickButton$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClickButtonV2$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.ClickButtonV2", [
            { no: 1, name: "portrait_text", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "landscape_text", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "portrait_text_focus", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "landscape_text_focus", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "render_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "text_input_post", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "exposure_once", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "exposure_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portraitText = [];
        message.landscapeText = [];
        message.portraitTextFocus = [];
        message.landscapeTextFocus = [];
        message.renderType = 0;
        message.textInputPost = false;
        message.exposureOnce = false;
        message.exposureType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string portrait_text */ 1:
                    message.portraitText.push(reader.string());
                    break;
                case /* repeated string landscape_text */ 2:
                    message.landscapeText.push(reader.string());
                    break;
                case /* repeated string portrait_text_focus */ 3:
                    message.portraitTextFocus.push(reader.string());
                    break;
                case /* repeated string landscape_text_focus */ 4:
                    message.landscapeTextFocus.push(reader.string());
                    break;
                case /* int32 render_type */ 5:
                    message.renderType = reader.int32();
                    break;
                case /* bool text_input_post */ 6:
                    message.textInputPost = reader.bool();
                    break;
                case /* bool exposure_once */ 7:
                    message.exposureOnce = reader.bool();
                    break;
                case /* int32 exposure_type */ 8:
                    message.exposureType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string portrait_text = 1; */
        for (let i = 0; i < message.portraitText.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.portraitText[i]);
        /* repeated string landscape_text = 2; */
        for (let i = 0; i < message.landscapeText.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.landscapeText[i]);
        /* repeated string portrait_text_focus = 3; */
        for (let i = 0; i < message.portraitTextFocus.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.portraitTextFocus[i]);
        /* repeated string landscape_text_focus = 4; */
        for (let i = 0; i < message.landscapeTextFocus.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.landscapeTextFocus[i]);
        /* int32 render_type = 5; */
        if (message.renderType !== 0)
            writer.tag(5, WireType.Varint).int32(message.renderType);
        /* bool text_input_post = 6; */
        if (message.textInputPost !== false)
            writer.tag(6, WireType.Varint).bool(message.textInputPost);
        /* bool exposure_once = 7; */
        if (message.exposureOnce !== false)
            writer.tag(7, WireType.Varint).bool(message.exposureOnce);
        /* int32 exposure_type = 8; */
        if (message.exposureType !== 0)
            writer.tag(8, WireType.Varint).int32(message.exposureType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.ClickButtonV2
 */
export const ClickButtonV2 = new ClickButtonV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandDm$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.CommandDm", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "mid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "progress", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "ctime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "mtime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "idStr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.oid = 0;
        message.mid = "";
        message.command = "";
        message.content = "";
        message.progress = 0;
        message.ctime = "";
        message.mtime = "";
        message.extra = "";
        message.idStr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* string mid */ 3:
                    message.mid = reader.string();
                    break;
                case /* string command */ 4:
                    message.command = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* int32 progress */ 6:
                    message.progress = reader.int32();
                    break;
                case /* string ctime */ 7:
                    message.ctime = reader.string();
                    break;
                case /* string mtime */ 8:
                    message.mtime = reader.string();
                    break;
                case /* string extra */ 9:
                    message.extra = reader.string();
                    break;
                case /* string idStr */ 10:
                    message.idStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 oid = 2; */
        if (message.oid !== 0)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* string mid = 3; */
        if (message.mid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.mid);
        /* string command = 4; */
        if (message.command !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.command);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* int32 progress = 6; */
        if (message.progress !== 0)
            writer.tag(6, WireType.Varint).int32(message.progress);
        /* string ctime = 7; */
        if (message.ctime !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.ctime);
        /* string mtime = 8; */
        if (message.mtime !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.mtime);
        /* string extra = 9; */
        if (message.extra !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.extra);
        /* string idStr = 10; */
        if (message.idStr !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.idStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.CommandDm
 */
export const CommandDm = new CommandDm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmakuAIFlag$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmakuAIFlag", [
            { no: 1, name: "dm_flags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DanmakuFlag }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.dmFlags = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.community.service.dm.v1.DanmakuFlag dm_flags */ 1:
                    message.dmFlags.push(DanmakuFlag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.community.service.dm.v1.DanmakuFlag dm_flags = 1; */
        for (let i = 0; i < message.dmFlags.length; i++)
            DanmakuFlag.internalBinaryWrite(message.dmFlags[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmakuAIFlag
 */
export const DanmakuAIFlag = new DanmakuAIFlag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmakuElem$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmakuElem", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "progress", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "fontsize", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "color", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "midHash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "ctime", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "weight", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "action", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "pool", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "idStr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "attr", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "animation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "colorful", kind: "enum", T: () => ["bilibili.community.service.dm.v1.DmColorfulType", DmColorfulType] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.progress = 0;
        message.mode = 0;
        message.fontsize = 0;
        message.color = 0;
        message.midHash = "";
        message.content = "";
        message.ctime = 0;
        message.weight = 0;
        message.action = "";
        message.pool = 0;
        message.idStr = "";
        message.attr = 0;
        message.animation = "";
        message.colorful = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int32 progress */ 2:
                    message.progress = reader.int32();
                    break;
                case /* int32 mode */ 3:
                    message.mode = reader.int32();
                    break;
                case /* int32 fontsize */ 4:
                    message.fontsize = reader.int32();
                    break;
                case /* uint32 color */ 5:
                    message.color = reader.uint32();
                    break;
                case /* string midHash */ 6:
                    message.midHash = reader.string();
                    break;
                case /* string content */ 7:
                    message.content = reader.string();
                    break;
                case /* int64 ctime */ 8:
                    message.ctime = reader.int64().toNumber();
                    break;
                case /* int32 weight */ 9:
                    message.weight = reader.int32();
                    break;
                case /* string action */ 10:
                    message.action = reader.string();
                    break;
                case /* int32 pool */ 11:
                    message.pool = reader.int32();
                    break;
                case /* string idStr */ 12:
                    message.idStr = reader.string();
                    break;
                case /* int32 attr */ 13:
                    message.attr = reader.int32();
                    break;
                case /* string animation */ 22:
                    message.animation = reader.string();
                    break;
                case /* bilibili.community.service.dm.v1.DmColorfulType colorful */ 24:
                    message.colorful = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int32 progress = 2; */
        if (message.progress !== 0)
            writer.tag(2, WireType.Varint).int32(message.progress);
        /* int32 mode = 3; */
        if (message.mode !== 0)
            writer.tag(3, WireType.Varint).int32(message.mode);
        /* int32 fontsize = 4; */
        if (message.fontsize !== 0)
            writer.tag(4, WireType.Varint).int32(message.fontsize);
        /* uint32 color = 5; */
        if (message.color !== 0)
            writer.tag(5, WireType.Varint).uint32(message.color);
        /* string midHash = 6; */
        if (message.midHash !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.midHash);
        /* string content = 7; */
        if (message.content !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.content);
        /* int64 ctime = 8; */
        if (message.ctime !== 0)
            writer.tag(8, WireType.Varint).int64(message.ctime);
        /* int32 weight = 9; */
        if (message.weight !== 0)
            writer.tag(9, WireType.Varint).int32(message.weight);
        /* string action = 10; */
        if (message.action !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.action);
        /* int32 pool = 11; */
        if (message.pool !== 0)
            writer.tag(11, WireType.Varint).int32(message.pool);
        /* string idStr = 12; */
        if (message.idStr !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.idStr);
        /* int32 attr = 13; */
        if (message.attr !== 0)
            writer.tag(13, WireType.Varint).int32(message.attr);
        /* string animation = 22; */
        if (message.animation !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.animation);
        /* bilibili.community.service.dm.v1.DmColorfulType colorful = 24; */
        if (message.colorful !== 0)
            writer.tag(24, WireType.Varint).int32(message.colorful);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmakuElem
 */
export const DanmakuElem = new DanmakuElem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmakuFlag$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmakuFlag", [
            { no: 1, name: "dmid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "flag", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.dmid = 0;
        message.flag = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 dmid */ 1:
                    message.dmid = reader.int64().toNumber();
                    break;
                case /* uint32 flag */ 2:
                    message.flag = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 dmid = 1; */
        if (message.dmid !== 0)
            writer.tag(1, WireType.Varint).int64(message.dmid);
        /* uint32 flag = 2; */
        if (message.flag !== 0)
            writer.tag(2, WireType.Varint).uint32(message.flag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmakuFlag
 */
export const DanmakuFlag = new DanmakuFlag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmakuFlagConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmakuFlagConfig", [
            { no: 1, name: "rec_flag", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "rec_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rec_switch", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.recFlag = 0;
        message.recText = "";
        message.recSwitch = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 rec_flag */ 1:
                    message.recFlag = reader.int32();
                    break;
                case /* string rec_text */ 2:
                    message.recText = reader.string();
                    break;
                case /* int32 rec_switch */ 3:
                    message.recSwitch = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 rec_flag = 1; */
        if (message.recFlag !== 0)
            writer.tag(1, WireType.Varint).int32(message.recFlag);
        /* string rec_text = 2; */
        if (message.recText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recText);
        /* int32 rec_switch = 3; */
        if (message.recSwitch !== 0)
            writer.tag(3, WireType.Varint).int32(message.recSwitch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmakuFlagConfig
 */
export const DanmakuFlagConfig = new DanmakuFlagConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmuDefaultPlayerConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig", [
            { no: 1, name: "player_danmaku_use_default_config", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "player_danmaku_ai_recommended_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "player_danmaku_ai_recommended_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "player_danmaku_blocktop", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "player_danmaku_blockscroll", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "player_danmaku_blockbottom", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "player_danmaku_blockcolorful", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "player_danmaku_blockrepeat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "player_danmaku_blockspecial", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "player_danmaku_opacity", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "player_danmaku_scalingfactor", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "player_danmaku_domain", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "player_danmaku_speed", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "inline_player_danmaku_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "player_danmaku_senior_mode_switch", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "player_danmaku_ai_recommended_level_v2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "player_danmaku_ai_recommended_level_v2_map", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.playerDanmakuUseDefaultConfig = false;
        message.playerDanmakuAiRecommendedSwitch = false;
        message.playerDanmakuAiRecommendedLevel = 0;
        message.playerDanmakuBlocktop = false;
        message.playerDanmakuBlockscroll = false;
        message.playerDanmakuBlockbottom = false;
        message.playerDanmakuBlockcolorful = false;
        message.playerDanmakuBlockrepeat = false;
        message.playerDanmakuBlockspecial = false;
        message.playerDanmakuOpacity = 0;
        message.playerDanmakuScalingfactor = 0;
        message.playerDanmakuDomain = 0;
        message.playerDanmakuSpeed = 0;
        message.inlinePlayerDanmakuSwitch = false;
        message.playerDanmakuSeniorModeSwitch = 0;
        message.playerDanmakuAiRecommendedLevelV2 = 0;
        message.playerDanmakuAiRecommendedLevelV2Map = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool player_danmaku_use_default_config */ 1:
                    message.playerDanmakuUseDefaultConfig = reader.bool();
                    break;
                case /* bool player_danmaku_ai_recommended_switch */ 4:
                    message.playerDanmakuAiRecommendedSwitch = reader.bool();
                    break;
                case /* int32 player_danmaku_ai_recommended_level */ 5:
                    message.playerDanmakuAiRecommendedLevel = reader.int32();
                    break;
                case /* bool player_danmaku_blocktop */ 6:
                    message.playerDanmakuBlocktop = reader.bool();
                    break;
                case /* bool player_danmaku_blockscroll */ 7:
                    message.playerDanmakuBlockscroll = reader.bool();
                    break;
                case /* bool player_danmaku_blockbottom */ 8:
                    message.playerDanmakuBlockbottom = reader.bool();
                    break;
                case /* bool player_danmaku_blockcolorful */ 9:
                    message.playerDanmakuBlockcolorful = reader.bool();
                    break;
                case /* bool player_danmaku_blockrepeat */ 10:
                    message.playerDanmakuBlockrepeat = reader.bool();
                    break;
                case /* bool player_danmaku_blockspecial */ 11:
                    message.playerDanmakuBlockspecial = reader.bool();
                    break;
                case /* float player_danmaku_opacity */ 12:
                    message.playerDanmakuOpacity = reader.float();
                    break;
                case /* float player_danmaku_scalingfactor */ 13:
                    message.playerDanmakuScalingfactor = reader.float();
                    break;
                case /* float player_danmaku_domain */ 14:
                    message.playerDanmakuDomain = reader.float();
                    break;
                case /* int32 player_danmaku_speed */ 15:
                    message.playerDanmakuSpeed = reader.int32();
                    break;
                case /* bool inline_player_danmaku_switch */ 16:
                    message.inlinePlayerDanmakuSwitch = reader.bool();
                    break;
                case /* int32 player_danmaku_senior_mode_switch */ 17:
                    message.playerDanmakuSeniorModeSwitch = reader.int32();
                    break;
                case /* int32 player_danmaku_ai_recommended_level_v2 */ 18:
                    message.playerDanmakuAiRecommendedLevelV2 = reader.int32();
                    break;
                case /* map<int32, int32> player_danmaku_ai_recommended_level_v2_map */ 19:
                    this.binaryReadMap19(message.playerDanmakuAiRecommendedLevelV2Map, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap19(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_ai_recommended_level_v2_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool player_danmaku_use_default_config = 1; */
        if (message.playerDanmakuUseDefaultConfig !== false)
            writer.tag(1, WireType.Varint).bool(message.playerDanmakuUseDefaultConfig);
        /* bool player_danmaku_ai_recommended_switch = 4; */
        if (message.playerDanmakuAiRecommendedSwitch !== false)
            writer.tag(4, WireType.Varint).bool(message.playerDanmakuAiRecommendedSwitch);
        /* int32 player_danmaku_ai_recommended_level = 5; */
        if (message.playerDanmakuAiRecommendedLevel !== 0)
            writer.tag(5, WireType.Varint).int32(message.playerDanmakuAiRecommendedLevel);
        /* bool player_danmaku_blocktop = 6; */
        if (message.playerDanmakuBlocktop !== false)
            writer.tag(6, WireType.Varint).bool(message.playerDanmakuBlocktop);
        /* bool player_danmaku_blockscroll = 7; */
        if (message.playerDanmakuBlockscroll !== false)
            writer.tag(7, WireType.Varint).bool(message.playerDanmakuBlockscroll);
        /* bool player_danmaku_blockbottom = 8; */
        if (message.playerDanmakuBlockbottom !== false)
            writer.tag(8, WireType.Varint).bool(message.playerDanmakuBlockbottom);
        /* bool player_danmaku_blockcolorful = 9; */
        if (message.playerDanmakuBlockcolorful !== false)
            writer.tag(9, WireType.Varint).bool(message.playerDanmakuBlockcolorful);
        /* bool player_danmaku_blockrepeat = 10; */
        if (message.playerDanmakuBlockrepeat !== false)
            writer.tag(10, WireType.Varint).bool(message.playerDanmakuBlockrepeat);
        /* bool player_danmaku_blockspecial = 11; */
        if (message.playerDanmakuBlockspecial !== false)
            writer.tag(11, WireType.Varint).bool(message.playerDanmakuBlockspecial);
        /* float player_danmaku_opacity = 12; */
        if (message.playerDanmakuOpacity !== 0)
            writer.tag(12, WireType.Bit32).float(message.playerDanmakuOpacity);
        /* float player_danmaku_scalingfactor = 13; */
        if (message.playerDanmakuScalingfactor !== 0)
            writer.tag(13, WireType.Bit32).float(message.playerDanmakuScalingfactor);
        /* float player_danmaku_domain = 14; */
        if (message.playerDanmakuDomain !== 0)
            writer.tag(14, WireType.Bit32).float(message.playerDanmakuDomain);
        /* int32 player_danmaku_speed = 15; */
        if (message.playerDanmakuSpeed !== 0)
            writer.tag(15, WireType.Varint).int32(message.playerDanmakuSpeed);
        /* bool inline_player_danmaku_switch = 16; */
        if (message.inlinePlayerDanmakuSwitch !== false)
            writer.tag(16, WireType.Varint).bool(message.inlinePlayerDanmakuSwitch);
        /* int32 player_danmaku_senior_mode_switch = 17; */
        if (message.playerDanmakuSeniorModeSwitch !== 0)
            writer.tag(17, WireType.Varint).int32(message.playerDanmakuSeniorModeSwitch);
        /* int32 player_danmaku_ai_recommended_level_v2 = 18; */
        if (message.playerDanmakuAiRecommendedLevelV2 !== 0)
            writer.tag(18, WireType.Varint).int32(message.playerDanmakuAiRecommendedLevelV2);
        /* map<int32, int32> player_danmaku_ai_recommended_level_v2_map = 19; */
        for (let k of globalThis.Object.keys(message.playerDanmakuAiRecommendedLevelV2Map))
            writer.tag(19, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.playerDanmakuAiRecommendedLevelV2Map[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
 */
export const DanmuDefaultPlayerConfig = new DanmuDefaultPlayerConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmuPlayerConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmuPlayerConfig", [
            { no: 1, name: "player_danmaku_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "player_danmaku_switch_save", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "player_danmaku_use_default_config", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "player_danmaku_ai_recommended_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "player_danmaku_ai_recommended_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "player_danmaku_blocktop", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "player_danmaku_blockscroll", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "player_danmaku_blockbottom", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "player_danmaku_blockcolorful", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "player_danmaku_blockrepeat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "player_danmaku_blockspecial", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "player_danmaku_opacity", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "player_danmaku_scalingfactor", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "player_danmaku_domain", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "player_danmaku_speed", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "player_danmaku_enableblocklist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "inline_player_danmaku_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "inline_player_danmaku_config", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "player_danmaku_ios_switch_save", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "player_danmaku_senior_mode_switch", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "player_danmaku_ai_recommended_level_v2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "player_danmaku_ai_recommended_level_v2_map", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.playerDanmakuSwitch = false;
        message.playerDanmakuSwitchSave = false;
        message.playerDanmakuUseDefaultConfig = false;
        message.playerDanmakuAiRecommendedSwitch = false;
        message.playerDanmakuAiRecommendedLevel = 0;
        message.playerDanmakuBlocktop = false;
        message.playerDanmakuBlockscroll = false;
        message.playerDanmakuBlockbottom = false;
        message.playerDanmakuBlockcolorful = false;
        message.playerDanmakuBlockrepeat = false;
        message.playerDanmakuBlockspecial = false;
        message.playerDanmakuOpacity = 0;
        message.playerDanmakuScalingfactor = 0;
        message.playerDanmakuDomain = 0;
        message.playerDanmakuSpeed = 0;
        message.playerDanmakuEnableblocklist = false;
        message.inlinePlayerDanmakuSwitch = false;
        message.inlinePlayerDanmakuConfig = 0;
        message.playerDanmakuIosSwitchSave = 0;
        message.playerDanmakuSeniorModeSwitch = 0;
        message.playerDanmakuAiRecommendedLevelV2 = 0;
        message.playerDanmakuAiRecommendedLevelV2Map = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool player_danmaku_switch */ 1:
                    message.playerDanmakuSwitch = reader.bool();
                    break;
                case /* bool player_danmaku_switch_save */ 2:
                    message.playerDanmakuSwitchSave = reader.bool();
                    break;
                case /* bool player_danmaku_use_default_config */ 3:
                    message.playerDanmakuUseDefaultConfig = reader.bool();
                    break;
                case /* bool player_danmaku_ai_recommended_switch */ 4:
                    message.playerDanmakuAiRecommendedSwitch = reader.bool();
                    break;
                case /* int32 player_danmaku_ai_recommended_level */ 5:
                    message.playerDanmakuAiRecommendedLevel = reader.int32();
                    break;
                case /* bool player_danmaku_blocktop */ 6:
                    message.playerDanmakuBlocktop = reader.bool();
                    break;
                case /* bool player_danmaku_blockscroll */ 7:
                    message.playerDanmakuBlockscroll = reader.bool();
                    break;
                case /* bool player_danmaku_blockbottom */ 8:
                    message.playerDanmakuBlockbottom = reader.bool();
                    break;
                case /* bool player_danmaku_blockcolorful */ 9:
                    message.playerDanmakuBlockcolorful = reader.bool();
                    break;
                case /* bool player_danmaku_blockrepeat */ 10:
                    message.playerDanmakuBlockrepeat = reader.bool();
                    break;
                case /* bool player_danmaku_blockspecial */ 11:
                    message.playerDanmakuBlockspecial = reader.bool();
                    break;
                case /* float player_danmaku_opacity */ 12:
                    message.playerDanmakuOpacity = reader.float();
                    break;
                case /* float player_danmaku_scalingfactor */ 13:
                    message.playerDanmakuScalingfactor = reader.float();
                    break;
                case /* float player_danmaku_domain */ 14:
                    message.playerDanmakuDomain = reader.float();
                    break;
                case /* int32 player_danmaku_speed */ 15:
                    message.playerDanmakuSpeed = reader.int32();
                    break;
                case /* bool player_danmaku_enableblocklist */ 16:
                    message.playerDanmakuEnableblocklist = reader.bool();
                    break;
                case /* bool inline_player_danmaku_switch */ 17:
                    message.inlinePlayerDanmakuSwitch = reader.bool();
                    break;
                case /* int32 inline_player_danmaku_config */ 18:
                    message.inlinePlayerDanmakuConfig = reader.int32();
                    break;
                case /* int32 player_danmaku_ios_switch_save */ 19:
                    message.playerDanmakuIosSwitchSave = reader.int32();
                    break;
                case /* int32 player_danmaku_senior_mode_switch */ 20:
                    message.playerDanmakuSeniorModeSwitch = reader.int32();
                    break;
                case /* int32 player_danmaku_ai_recommended_level_v2 */ 21:
                    message.playerDanmakuAiRecommendedLevelV2 = reader.int32();
                    break;
                case /* map<int32, int32> player_danmaku_ai_recommended_level_v2_map */ 22:
                    this.binaryReadMap22(message.playerDanmakuAiRecommendedLevelV2Map, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap22(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_ai_recommended_level_v2_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool player_danmaku_switch = 1; */
        if (message.playerDanmakuSwitch !== false)
            writer.tag(1, WireType.Varint).bool(message.playerDanmakuSwitch);
        /* bool player_danmaku_switch_save = 2; */
        if (message.playerDanmakuSwitchSave !== false)
            writer.tag(2, WireType.Varint).bool(message.playerDanmakuSwitchSave);
        /* bool player_danmaku_use_default_config = 3; */
        if (message.playerDanmakuUseDefaultConfig !== false)
            writer.tag(3, WireType.Varint).bool(message.playerDanmakuUseDefaultConfig);
        /* bool player_danmaku_ai_recommended_switch = 4; */
        if (message.playerDanmakuAiRecommendedSwitch !== false)
            writer.tag(4, WireType.Varint).bool(message.playerDanmakuAiRecommendedSwitch);
        /* int32 player_danmaku_ai_recommended_level = 5; */
        if (message.playerDanmakuAiRecommendedLevel !== 0)
            writer.tag(5, WireType.Varint).int32(message.playerDanmakuAiRecommendedLevel);
        /* bool player_danmaku_blocktop = 6; */
        if (message.playerDanmakuBlocktop !== false)
            writer.tag(6, WireType.Varint).bool(message.playerDanmakuBlocktop);
        /* bool player_danmaku_blockscroll = 7; */
        if (message.playerDanmakuBlockscroll !== false)
            writer.tag(7, WireType.Varint).bool(message.playerDanmakuBlockscroll);
        /* bool player_danmaku_blockbottom = 8; */
        if (message.playerDanmakuBlockbottom !== false)
            writer.tag(8, WireType.Varint).bool(message.playerDanmakuBlockbottom);
        /* bool player_danmaku_blockcolorful = 9; */
        if (message.playerDanmakuBlockcolorful !== false)
            writer.tag(9, WireType.Varint).bool(message.playerDanmakuBlockcolorful);
        /* bool player_danmaku_blockrepeat = 10; */
        if (message.playerDanmakuBlockrepeat !== false)
            writer.tag(10, WireType.Varint).bool(message.playerDanmakuBlockrepeat);
        /* bool player_danmaku_blockspecial = 11; */
        if (message.playerDanmakuBlockspecial !== false)
            writer.tag(11, WireType.Varint).bool(message.playerDanmakuBlockspecial);
        /* float player_danmaku_opacity = 12; */
        if (message.playerDanmakuOpacity !== 0)
            writer.tag(12, WireType.Bit32).float(message.playerDanmakuOpacity);
        /* float player_danmaku_scalingfactor = 13; */
        if (message.playerDanmakuScalingfactor !== 0)
            writer.tag(13, WireType.Bit32).float(message.playerDanmakuScalingfactor);
        /* float player_danmaku_domain = 14; */
        if (message.playerDanmakuDomain !== 0)
            writer.tag(14, WireType.Bit32).float(message.playerDanmakuDomain);
        /* int32 player_danmaku_speed = 15; */
        if (message.playerDanmakuSpeed !== 0)
            writer.tag(15, WireType.Varint).int32(message.playerDanmakuSpeed);
        /* bool player_danmaku_enableblocklist = 16; */
        if (message.playerDanmakuEnableblocklist !== false)
            writer.tag(16, WireType.Varint).bool(message.playerDanmakuEnableblocklist);
        /* bool inline_player_danmaku_switch = 17; */
        if (message.inlinePlayerDanmakuSwitch !== false)
            writer.tag(17, WireType.Varint).bool(message.inlinePlayerDanmakuSwitch);
        /* int32 inline_player_danmaku_config = 18; */
        if (message.inlinePlayerDanmakuConfig !== 0)
            writer.tag(18, WireType.Varint).int32(message.inlinePlayerDanmakuConfig);
        /* int32 player_danmaku_ios_switch_save = 19; */
        if (message.playerDanmakuIosSwitchSave !== 0)
            writer.tag(19, WireType.Varint).int32(message.playerDanmakuIosSwitchSave);
        /* int32 player_danmaku_senior_mode_switch = 20; */
        if (message.playerDanmakuSeniorModeSwitch !== 0)
            writer.tag(20, WireType.Varint).int32(message.playerDanmakuSeniorModeSwitch);
        /* int32 player_danmaku_ai_recommended_level_v2 = 21; */
        if (message.playerDanmakuAiRecommendedLevelV2 !== 0)
            writer.tag(21, WireType.Varint).int32(message.playerDanmakuAiRecommendedLevelV2);
        /* map<int32, int32> player_danmaku_ai_recommended_level_v2_map = 22; */
        for (let k of globalThis.Object.keys(message.playerDanmakuAiRecommendedLevelV2Map))
            writer.tag(22, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.playerDanmakuAiRecommendedLevelV2Map[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmuPlayerConfig
 */
export const DanmuPlayerConfig = new DanmuPlayerConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmuPlayerConfigPanel$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmuPlayerConfigPanel", [
            { no: 1, name: "selection_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.selectionText = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string selection_text */ 1:
                    message.selectionText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string selection_text = 1; */
        if (message.selectionText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.selectionText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
 */
export const DanmuPlayerConfigPanel = new DanmuPlayerConfigPanel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmuPlayerDynamicConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig", [
            { no: 1, name: "progress", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "player_danmaku_domain", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.progress = 0;
        message.playerDanmakuDomain = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 progress */ 1:
                    message.progress = reader.int32();
                    break;
                case /* float player_danmaku_domain */ 14:
                    message.playerDanmakuDomain = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 progress = 1; */
        if (message.progress !== 0)
            writer.tag(1, WireType.Varint).int32(message.progress);
        /* float player_danmaku_domain = 14; */
        if (message.playerDanmakuDomain !== 0)
            writer.tag(14, WireType.Bit32).float(message.playerDanmakuDomain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
 */
export const DanmuPlayerDynamicConfig = new DanmuPlayerDynamicConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmuPlayerViewConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmuPlayerViewConfig", [
            { no: 1, name: "danmuku_default_player_config", kind: "message", T: () => DanmuDefaultPlayerConfig },
            { no: 2, name: "danmuku_player_config", kind: "message", T: () => DanmuPlayerConfig },
            { no: 3, name: "danmuku_player_dynamic_config", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DanmuPlayerDynamicConfig },
            { no: 4, name: "danmuku_player_config_panel", kind: "message", T: () => DanmuPlayerConfigPanel }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.danmukuPlayerDynamicConfig = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig danmuku_default_player_config */ 1:
                    message.danmukuDefaultPlayerConfig = DanmuDefaultPlayerConfig.internalBinaryRead(reader, reader.uint32(), options, message.danmukuDefaultPlayerConfig);
                    break;
                case /* bilibili.community.service.dm.v1.DanmuPlayerConfig danmuku_player_config */ 2:
                    message.danmukuPlayerConfig = DanmuPlayerConfig.internalBinaryRead(reader, reader.uint32(), options, message.danmukuPlayerConfig);
                    break;
                case /* repeated bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig danmuku_player_dynamic_config */ 3:
                    message.danmukuPlayerDynamicConfig.push(DanmuPlayerDynamicConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.community.service.dm.v1.DanmuPlayerConfigPanel danmuku_player_config_panel */ 4:
                    message.danmukuPlayerConfigPanel = DanmuPlayerConfigPanel.internalBinaryRead(reader, reader.uint32(), options, message.danmukuPlayerConfigPanel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig danmuku_default_player_config = 1; */
        if (message.danmukuDefaultPlayerConfig)
            DanmuDefaultPlayerConfig.internalBinaryWrite(message.danmukuDefaultPlayerConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.DanmuPlayerConfig danmuku_player_config = 2; */
        if (message.danmukuPlayerConfig)
            DanmuPlayerConfig.internalBinaryWrite(message.danmukuPlayerConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig danmuku_player_dynamic_config = 3; */
        for (let i = 0; i < message.danmukuPlayerDynamicConfig.length; i++)
            DanmuPlayerDynamicConfig.internalBinaryWrite(message.danmukuPlayerDynamicConfig[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.DanmuPlayerConfigPanel danmuku_player_config_panel = 4; */
        if (message.danmukuPlayerConfigPanel)
            DanmuPlayerConfigPanel.internalBinaryWrite(message.danmukuPlayerConfigPanel, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmuPlayerViewConfig
 */
export const DanmuPlayerViewConfig = new DanmuPlayerViewConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DanmuWebPlayerConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DanmuWebPlayerConfig", [
            { no: 1, name: "dm_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "ai_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "ai_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "blocktop", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "blockscroll", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "blockbottom", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "blockcolor", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "blockspecial", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "preventshade", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "dmask", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "opacity", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "dmarea", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "speedplus", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "fontsize", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "screensync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "speedsync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "fontfamily", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "bold", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "fontborder", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "draw_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "senior_mode_switch", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "ai_level_v2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "ai_level_v2_map", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.dmSwitch = false;
        message.aiSwitch = false;
        message.aiLevel = 0;
        message.blocktop = false;
        message.blockscroll = false;
        message.blockbottom = false;
        message.blockcolor = false;
        message.blockspecial = false;
        message.preventshade = false;
        message.dmask = false;
        message.opacity = 0;
        message.dmarea = 0;
        message.speedplus = 0;
        message.fontsize = 0;
        message.screensync = false;
        message.speedsync = false;
        message.fontfamily = "";
        message.bold = false;
        message.fontborder = 0;
        message.drawType = "";
        message.seniorModeSwitch = 0;
        message.aiLevelV2 = 0;
        message.aiLevelV2Map = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool dm_switch */ 1:
                    message.dmSwitch = reader.bool();
                    break;
                case /* bool ai_switch */ 2:
                    message.aiSwitch = reader.bool();
                    break;
                case /* int32 ai_level */ 3:
                    message.aiLevel = reader.int32();
                    break;
                case /* bool blocktop */ 4:
                    message.blocktop = reader.bool();
                    break;
                case /* bool blockscroll */ 5:
                    message.blockscroll = reader.bool();
                    break;
                case /* bool blockbottom */ 6:
                    message.blockbottom = reader.bool();
                    break;
                case /* bool blockcolor */ 7:
                    message.blockcolor = reader.bool();
                    break;
                case /* bool blockspecial */ 8:
                    message.blockspecial = reader.bool();
                    break;
                case /* bool preventshade */ 9:
                    message.preventshade = reader.bool();
                    break;
                case /* bool dmask */ 10:
                    message.dmask = reader.bool();
                    break;
                case /* float opacity */ 11:
                    message.opacity = reader.float();
                    break;
                case /* int32 dmarea */ 12:
                    message.dmarea = reader.int32();
                    break;
                case /* float speedplus */ 13:
                    message.speedplus = reader.float();
                    break;
                case /* float fontsize */ 14:
                    message.fontsize = reader.float();
                    break;
                case /* bool screensync */ 15:
                    message.screensync = reader.bool();
                    break;
                case /* bool speedsync */ 16:
                    message.speedsync = reader.bool();
                    break;
                case /* string fontfamily */ 17:
                    message.fontfamily = reader.string();
                    break;
                case /* bool bold */ 18:
                    message.bold = reader.bool();
                    break;
                case /* int32 fontborder */ 19:
                    message.fontborder = reader.int32();
                    break;
                case /* string draw_type */ 20:
                    message.drawType = reader.string();
                    break;
                case /* int32 senior_mode_switch */ 21:
                    message.seniorModeSwitch = reader.int32();
                    break;
                case /* int32 ai_level_v2 */ 22:
                    message.aiLevelV2 = reader.int32();
                    break;
                case /* map<int32, int32> ai_level_v2_map */ 23:
                    this.binaryReadMap23(message.aiLevelV2Map, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap23(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.community.service.dm.v1.DanmuWebPlayerConfig.ai_level_v2_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool dm_switch = 1; */
        if (message.dmSwitch !== false)
            writer.tag(1, WireType.Varint).bool(message.dmSwitch);
        /* bool ai_switch = 2; */
        if (message.aiSwitch !== false)
            writer.tag(2, WireType.Varint).bool(message.aiSwitch);
        /* int32 ai_level = 3; */
        if (message.aiLevel !== 0)
            writer.tag(3, WireType.Varint).int32(message.aiLevel);
        /* bool blocktop = 4; */
        if (message.blocktop !== false)
            writer.tag(4, WireType.Varint).bool(message.blocktop);
        /* bool blockscroll = 5; */
        if (message.blockscroll !== false)
            writer.tag(5, WireType.Varint).bool(message.blockscroll);
        /* bool blockbottom = 6; */
        if (message.blockbottom !== false)
            writer.tag(6, WireType.Varint).bool(message.blockbottom);
        /* bool blockcolor = 7; */
        if (message.blockcolor !== false)
            writer.tag(7, WireType.Varint).bool(message.blockcolor);
        /* bool blockspecial = 8; */
        if (message.blockspecial !== false)
            writer.tag(8, WireType.Varint).bool(message.blockspecial);
        /* bool preventshade = 9; */
        if (message.preventshade !== false)
            writer.tag(9, WireType.Varint).bool(message.preventshade);
        /* bool dmask = 10; */
        if (message.dmask !== false)
            writer.tag(10, WireType.Varint).bool(message.dmask);
        /* float opacity = 11; */
        if (message.opacity !== 0)
            writer.tag(11, WireType.Bit32).float(message.opacity);
        /* int32 dmarea = 12; */
        if (message.dmarea !== 0)
            writer.tag(12, WireType.Varint).int32(message.dmarea);
        /* float speedplus = 13; */
        if (message.speedplus !== 0)
            writer.tag(13, WireType.Bit32).float(message.speedplus);
        /* float fontsize = 14; */
        if (message.fontsize !== 0)
            writer.tag(14, WireType.Bit32).float(message.fontsize);
        /* bool screensync = 15; */
        if (message.screensync !== false)
            writer.tag(15, WireType.Varint).bool(message.screensync);
        /* bool speedsync = 16; */
        if (message.speedsync !== false)
            writer.tag(16, WireType.Varint).bool(message.speedsync);
        /* string fontfamily = 17; */
        if (message.fontfamily !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.fontfamily);
        /* bool bold = 18; */
        if (message.bold !== false)
            writer.tag(18, WireType.Varint).bool(message.bold);
        /* int32 fontborder = 19; */
        if (message.fontborder !== 0)
            writer.tag(19, WireType.Varint).int32(message.fontborder);
        /* string draw_type = 20; */
        if (message.drawType !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.drawType);
        /* int32 senior_mode_switch = 21; */
        if (message.seniorModeSwitch !== 0)
            writer.tag(21, WireType.Varint).int32(message.seniorModeSwitch);
        /* int32 ai_level_v2 = 22; */
        if (message.aiLevelV2 !== 0)
            writer.tag(22, WireType.Varint).int32(message.aiLevelV2);
        /* map<int32, int32> ai_level_v2_map = 23; */
        for (let k of globalThis.Object.keys(message.aiLevelV2Map))
            writer.tag(23, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.aiLevelV2Map[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DanmuWebPlayerConfig
 */
export const DanmuWebPlayerConfig = new DanmuWebPlayerConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmColorful$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmColorful", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.DmColorfulType", DmColorfulType] },
            { no: 2, name: "src", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.src = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.community.service.dm.v1.DmColorfulType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string src */ 2:
                    message.src = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.community.service.dm.v1.DmColorfulType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string src = 2; */
        if (message.src !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.src);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmColorful
 */
export const DmColorful = new DmColorful$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmExpoReportReq$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmExpoReportReq", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sessionId = "";
        message.oid = 0;
        message.spmid = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* string spmid */ 4:
                    message.spmid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* int64 oid = 2; */
        if (message.oid !== 0)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* string spmid = 4; */
        if (message.spmid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spmid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmExpoReportReq
 */
export const DmExpoReportReq = new DmExpoReportReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmExpoReportRes$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmExpoReportRes", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmExpoReportRes
 */
export const DmExpoReportRes = new DmExpoReportRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmPlayerConfigReq$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmPlayerConfigReq", [
            { no: 1, name: "ts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "switch", kind: "message", T: () => PlayerDanmakuSwitch },
            { no: 3, name: "switch_save", kind: "message", T: () => PlayerDanmakuSwitchSave },
            { no: 4, name: "use_default_config", kind: "message", T: () => PlayerDanmakuUseDefaultConfig },
            { no: 5, name: "ai_recommended_switch", kind: "message", T: () => PlayerDanmakuAiRecommendedSwitch },
            { no: 6, name: "ai_recommended_level", kind: "message", T: () => PlayerDanmakuAiRecommendedLevel },
            { no: 7, name: "blocktop", kind: "message", T: () => PlayerDanmakuBlocktop },
            { no: 8, name: "blockscroll", kind: "message", T: () => PlayerDanmakuBlockscroll },
            { no: 9, name: "blockbottom", kind: "message", T: () => PlayerDanmakuBlockbottom },
            { no: 10, name: "blockcolorful", kind: "message", T: () => PlayerDanmakuBlockcolorful },
            { no: 11, name: "blockrepeat", kind: "message", T: () => PlayerDanmakuBlockrepeat },
            { no: 12, name: "blockspecial", kind: "message", T: () => PlayerDanmakuBlockspecial },
            { no: 13, name: "opacity", kind: "message", T: () => PlayerDanmakuOpacity },
            { no: 14, name: "scalingfactor", kind: "message", T: () => PlayerDanmakuScalingfactor },
            { no: 15, name: "domain", kind: "message", T: () => PlayerDanmakuDomain },
            { no: 16, name: "speed", kind: "message", T: () => PlayerDanmakuSpeed },
            { no: 17, name: "enableblocklist", kind: "message", T: () => PlayerDanmakuEnableblocklist },
            { no: 18, name: "inlinePlayerDanmakuSwitch", kind: "message", T: () => InlinePlayerDanmakuSwitch },
            { no: 19, name: "senior_mode_switch", kind: "message", T: () => PlayerDanmakuSeniorModeSwitch },
            { no: 20, name: "ai_recommended_level_v2", kind: "message", T: () => PlayerDanmakuAiRecommendedLevelV2 }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.ts = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ts */ 1:
                    message.ts = reader.int64().toNumber();
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuSwitch switch */ 2:
                    message.switch = PlayerDanmakuSwitch.internalBinaryRead(reader, reader.uint32(), options, message.switch);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave switch_save */ 3:
                    message.switchSave = PlayerDanmakuSwitchSave.internalBinaryRead(reader, reader.uint32(), options, message.switchSave);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig use_default_config */ 4:
                    message.useDefaultConfig = PlayerDanmakuUseDefaultConfig.internalBinaryRead(reader, reader.uint32(), options, message.useDefaultConfig);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch ai_recommended_switch */ 5:
                    message.aiRecommendedSwitch = PlayerDanmakuAiRecommendedSwitch.internalBinaryRead(reader, reader.uint32(), options, message.aiRecommendedSwitch);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel ai_recommended_level */ 6:
                    message.aiRecommendedLevel = PlayerDanmakuAiRecommendedLevel.internalBinaryRead(reader, reader.uint32(), options, message.aiRecommendedLevel);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuBlocktop blocktop */ 7:
                    message.blocktop = PlayerDanmakuBlocktop.internalBinaryRead(reader, reader.uint32(), options, message.blocktop);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll blockscroll */ 8:
                    message.blockscroll = PlayerDanmakuBlockscroll.internalBinaryRead(reader, reader.uint32(), options, message.blockscroll);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom blockbottom */ 9:
                    message.blockbottom = PlayerDanmakuBlockbottom.internalBinaryRead(reader, reader.uint32(), options, message.blockbottom);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful blockcolorful */ 10:
                    message.blockcolorful = PlayerDanmakuBlockcolorful.internalBinaryRead(reader, reader.uint32(), options, message.blockcolorful);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat blockrepeat */ 11:
                    message.blockrepeat = PlayerDanmakuBlockrepeat.internalBinaryRead(reader, reader.uint32(), options, message.blockrepeat);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial blockspecial */ 12:
                    message.blockspecial = PlayerDanmakuBlockspecial.internalBinaryRead(reader, reader.uint32(), options, message.blockspecial);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuOpacity opacity */ 13:
                    message.opacity = PlayerDanmakuOpacity.internalBinaryRead(reader, reader.uint32(), options, message.opacity);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor scalingfactor */ 14:
                    message.scalingfactor = PlayerDanmakuScalingfactor.internalBinaryRead(reader, reader.uint32(), options, message.scalingfactor);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuDomain domain */ 15:
                    message.domain = PlayerDanmakuDomain.internalBinaryRead(reader, reader.uint32(), options, message.domain);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuSpeed speed */ 16:
                    message.speed = PlayerDanmakuSpeed.internalBinaryRead(reader, reader.uint32(), options, message.speed);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist enableblocklist */ 17:
                    message.enableblocklist = PlayerDanmakuEnableblocklist.internalBinaryRead(reader, reader.uint32(), options, message.enableblocklist);
                    break;
                case /* bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch inlinePlayerDanmakuSwitch */ 18:
                    message.inlinePlayerDanmakuSwitch = InlinePlayerDanmakuSwitch.internalBinaryRead(reader, reader.uint32(), options, message.inlinePlayerDanmakuSwitch);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch senior_mode_switch */ 19:
                    message.seniorModeSwitch = PlayerDanmakuSeniorModeSwitch.internalBinaryRead(reader, reader.uint32(), options, message.seniorModeSwitch);
                    break;
                case /* bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2 ai_recommended_level_v2 */ 20:
                    message.aiRecommendedLevelV2 = PlayerDanmakuAiRecommendedLevelV2.internalBinaryRead(reader, reader.uint32(), options, message.aiRecommendedLevelV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 ts = 1; */
        if (message.ts !== 0)
            writer.tag(1, WireType.Varint).int64(message.ts);
        /* bilibili.community.service.dm.v1.PlayerDanmakuSwitch switch = 2; */
        if (message.switch)
            PlayerDanmakuSwitch.internalBinaryWrite(message.switch, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave switch_save = 3; */
        if (message.switchSave)
            PlayerDanmakuSwitchSave.internalBinaryWrite(message.switchSave, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig use_default_config = 4; */
        if (message.useDefaultConfig)
            PlayerDanmakuUseDefaultConfig.internalBinaryWrite(message.useDefaultConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch ai_recommended_switch = 5; */
        if (message.aiRecommendedSwitch)
            PlayerDanmakuAiRecommendedSwitch.internalBinaryWrite(message.aiRecommendedSwitch, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel ai_recommended_level = 6; */
        if (message.aiRecommendedLevel)
            PlayerDanmakuAiRecommendedLevel.internalBinaryWrite(message.aiRecommendedLevel, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuBlocktop blocktop = 7; */
        if (message.blocktop)
            PlayerDanmakuBlocktop.internalBinaryWrite(message.blocktop, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll blockscroll = 8; */
        if (message.blockscroll)
            PlayerDanmakuBlockscroll.internalBinaryWrite(message.blockscroll, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom blockbottom = 9; */
        if (message.blockbottom)
            PlayerDanmakuBlockbottom.internalBinaryWrite(message.blockbottom, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful blockcolorful = 10; */
        if (message.blockcolorful)
            PlayerDanmakuBlockcolorful.internalBinaryWrite(message.blockcolorful, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat blockrepeat = 11; */
        if (message.blockrepeat)
            PlayerDanmakuBlockrepeat.internalBinaryWrite(message.blockrepeat, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial blockspecial = 12; */
        if (message.blockspecial)
            PlayerDanmakuBlockspecial.internalBinaryWrite(message.blockspecial, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuOpacity opacity = 13; */
        if (message.opacity)
            PlayerDanmakuOpacity.internalBinaryWrite(message.opacity, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor scalingfactor = 14; */
        if (message.scalingfactor)
            PlayerDanmakuScalingfactor.internalBinaryWrite(message.scalingfactor, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuDomain domain = 15; */
        if (message.domain)
            PlayerDanmakuDomain.internalBinaryWrite(message.domain, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuSpeed speed = 16; */
        if (message.speed)
            PlayerDanmakuSpeed.internalBinaryWrite(message.speed, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist enableblocklist = 17; */
        if (message.enableblocklist)
            PlayerDanmakuEnableblocklist.internalBinaryWrite(message.enableblocklist, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch inlinePlayerDanmakuSwitch = 18; */
        if (message.inlinePlayerDanmakuSwitch)
            InlinePlayerDanmakuSwitch.internalBinaryWrite(message.inlinePlayerDanmakuSwitch, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch senior_mode_switch = 19; */
        if (message.seniorModeSwitch)
            PlayerDanmakuSeniorModeSwitch.internalBinaryWrite(message.seniorModeSwitch, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2 ai_recommended_level_v2 = 20; */
        if (message.aiRecommendedLevelV2)
            PlayerDanmakuAiRecommendedLevelV2.internalBinaryWrite(message.aiRecommendedLevelV2, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmPlayerConfigReq
 */
export const DmPlayerConfigReq = new DmPlayerConfigReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmSegConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmSegConfig", [
            { no: 1, name: "page_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pageSize = 0;
        message.total = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 page_size */ 1:
                    message.pageSize = reader.int64().toNumber();
                    break;
                case /* int64 total */ 2:
                    message.total = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 page_size = 1; */
        if (message.pageSize !== 0)
            writer.tag(1, WireType.Varint).int64(message.pageSize);
        /* int64 total = 2; */
        if (message.total !== 0)
            writer.tag(2, WireType.Varint).int64(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmSegConfig
 */
export const DmSegConfig = new DmSegConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmSegMobileReply$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmSegMobileReply", [
            { no: 1, name: "elems", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DanmakuElem },
            { no: 2, name: "state", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "ai_flag", kind: "message", T: () => DanmakuAIFlag },
            { no: 5, name: "colorfulSrc", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DmColorful }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.elems = [];
        message.state = 0;
        message.colorfulSrc = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.community.service.dm.v1.DanmakuElem elems */ 1:
                    message.elems.push(DanmakuElem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 state */ 2:
                    message.state = reader.int32();
                    break;
                case /* bilibili.community.service.dm.v1.DanmakuAIFlag ai_flag */ 3:
                    message.aiFlag = DanmakuAIFlag.internalBinaryRead(reader, reader.uint32(), options, message.aiFlag);
                    break;
                case /* repeated bilibili.community.service.dm.v1.DmColorful colorfulSrc */ 5:
                    message.colorfulSrc.push(DmColorful.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.community.service.dm.v1.DanmakuElem elems = 1; */
        for (let i = 0; i < message.elems.length; i++)
            DanmakuElem.internalBinaryWrite(message.elems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* bilibili.community.service.dm.v1.DanmakuAIFlag ai_flag = 3; */
        if (message.aiFlag)
            DanmakuAIFlag.internalBinaryWrite(message.aiFlag, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.community.service.dm.v1.DmColorful colorfulSrc = 5; */
        for (let i = 0; i < message.colorfulSrc.length; i++)
            DmColorful.internalBinaryWrite(message.colorfulSrc[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmSegMobileReply
 */
export const DmSegMobileReply = new DmSegMobileReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmSegMobileReq$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmSegMobileReq", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "segment_index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "teenagers_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "ps", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "pe", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "pull_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "from_scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pid = 0;
        message.oid = 0;
        message.type = 0;
        message.segmentIndex = 0;
        message.teenagersMode = 0;
        message.ps = 0;
        message.pe = 0;
        message.pullMode = 0;
        message.fromScene = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toNumber();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* int64 segment_index */ 4:
                    message.segmentIndex = reader.int64().toNumber();
                    break;
                case /* int32 teenagers_mode */ 5:
                    message.teenagersMode = reader.int32();
                    break;
                case /* int64 ps */ 6:
                    message.ps = reader.int64().toNumber();
                    break;
                case /* int64 pe */ 7:
                    message.pe = reader.int64().toNumber();
                    break;
                case /* int32 pull_mode */ 8:
                    message.pullMode = reader.int32();
                    break;
                case /* int32 from_scene */ 9:
                    message.fromScene = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 pid = 1; */
        if (message.pid !== 0)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* int64 oid = 2; */
        if (message.oid !== 0)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* int64 segment_index = 4; */
        if (message.segmentIndex !== 0)
            writer.tag(4, WireType.Varint).int64(message.segmentIndex);
        /* int32 teenagers_mode = 5; */
        if (message.teenagersMode !== 0)
            writer.tag(5, WireType.Varint).int32(message.teenagersMode);
        /* int64 ps = 6; */
        if (message.ps !== 0)
            writer.tag(6, WireType.Varint).int64(message.ps);
        /* int64 pe = 7; */
        if (message.pe !== 0)
            writer.tag(7, WireType.Varint).int64(message.pe);
        /* int32 pull_mode = 8; */
        if (message.pullMode !== 0)
            writer.tag(8, WireType.Varint).int32(message.pullMode);
        /* int32 from_scene = 9; */
        if (message.fromScene !== 0)
            writer.tag(9, WireType.Varint).int32(message.fromScene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmSegMobileReq
 */
export const DmSegMobileReq = new DmSegMobileReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmSegOttReply$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmSegOttReply", [
            { no: 1, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "elems", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DanmakuElem }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.closed = false;
        message.elems = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool closed */ 1:
                    message.closed = reader.bool();
                    break;
                case /* repeated bilibili.community.service.dm.v1.DanmakuElem elems */ 2:
                    message.elems.push(DanmakuElem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool closed = 1; */
        if (message.closed !== false)
            writer.tag(1, WireType.Varint).bool(message.closed);
        /* repeated bilibili.community.service.dm.v1.DanmakuElem elems = 2; */
        for (let i = 0; i < message.elems.length; i++)
            DanmakuElem.internalBinaryWrite(message.elems[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmSegOttReply
 */
export const DmSegOttReply = new DmSegOttReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmSegOttReq$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmSegOttReq", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "segment_index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pid = 0;
        message.oid = 0;
        message.type = 0;
        message.segmentIndex = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toNumber();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* int64 segment_index */ 4:
                    message.segmentIndex = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 pid = 1; */
        if (message.pid !== 0)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* int64 oid = 2; */
        if (message.oid !== 0)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* int64 segment_index = 4; */
        if (message.segmentIndex !== 0)
            writer.tag(4, WireType.Varint).int64(message.segmentIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmSegOttReq
 */
export const DmSegOttReq = new DmSegOttReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmSegSDKReply$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmSegSDKReply", [
            { no: 1, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "elems", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DanmakuElem }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.closed = false;
        message.elems = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool closed */ 1:
                    message.closed = reader.bool();
                    break;
                case /* repeated bilibili.community.service.dm.v1.DanmakuElem elems */ 2:
                    message.elems.push(DanmakuElem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool closed = 1; */
        if (message.closed !== false)
            writer.tag(1, WireType.Varint).bool(message.closed);
        /* repeated bilibili.community.service.dm.v1.DanmakuElem elems = 2; */
        for (let i = 0; i < message.elems.length; i++)
            DanmakuElem.internalBinaryWrite(message.elems[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmSegSDKReply
 */
export const DmSegSDKReply = new DmSegSDKReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmSegSDKReq$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmSegSDKReq", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "segment_index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pid = 0;
        message.oid = 0;
        message.type = 0;
        message.segmentIndex = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toNumber();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* int64 segment_index */ 4:
                    message.segmentIndex = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 pid = 1; */
        if (message.pid !== 0)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* int64 oid = 2; */
        if (message.oid !== 0)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* int64 segment_index = 4; */
        if (message.segmentIndex !== 0)
            writer.tag(4, WireType.Varint).int64(message.segmentIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmSegSDKReq
 */
export const DmSegSDKReq = new DmSegSDKReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmViewReply", [
            { no: 1, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "mask", kind: "message", T: () => VideoMask },
            { no: 3, name: "subtitle", kind: "message", T: () => VideoSubtitle },
            { no: 4, name: "special_dms", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ai_flag", kind: "message", T: () => DanmakuFlagConfig },
            { no: 6, name: "player_config", kind: "message", T: () => DanmuPlayerViewConfig },
            { no: 7, name: "send_box_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "allow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "check_box", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "check_box_show_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "text_placeholder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "input_placeholder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "report_filter_content", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "expo_report", kind: "message", T: () => ExpoReport },
            { no: 15, name: "buzzword_config", kind: "message", T: () => BuzzwordConfig },
            { no: 16, name: "expressions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Expressions },
            { no: 17, name: "post_panel", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PostPanel },
            { no: 18, name: "activity_meta", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "post_panel2", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PostPanelV2 }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.closed = false;
        message.specialDms = [];
        message.sendBoxStyle = 0;
        message.allow = false;
        message.checkBox = "";
        message.checkBoxShowMsg = "";
        message.textPlaceholder = "";
        message.inputPlaceholder = "";
        message.reportFilterContent = [];
        message.expressions = [];
        message.postPanel = [];
        message.activityMeta = [];
        message.postPanel2 = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool closed */ 1:
                    message.closed = reader.bool();
                    break;
                case /* bilibili.community.service.dm.v1.VideoMask mask */ 2:
                    message.mask = VideoMask.internalBinaryRead(reader, reader.uint32(), options, message.mask);
                    break;
                case /* bilibili.community.service.dm.v1.VideoSubtitle subtitle */ 3:
                    message.subtitle = VideoSubtitle.internalBinaryRead(reader, reader.uint32(), options, message.subtitle);
                    break;
                case /* repeated string special_dms */ 4:
                    message.specialDms.push(reader.string());
                    break;
                case /* bilibili.community.service.dm.v1.DanmakuFlagConfig ai_flag */ 5:
                    message.aiFlag = DanmakuFlagConfig.internalBinaryRead(reader, reader.uint32(), options, message.aiFlag);
                    break;
                case /* bilibili.community.service.dm.v1.DanmuPlayerViewConfig player_config */ 6:
                    message.playerConfig = DanmuPlayerViewConfig.internalBinaryRead(reader, reader.uint32(), options, message.playerConfig);
                    break;
                case /* int32 send_box_style */ 7:
                    message.sendBoxStyle = reader.int32();
                    break;
                case /* bool allow */ 8:
                    message.allow = reader.bool();
                    break;
                case /* string check_box */ 9:
                    message.checkBox = reader.string();
                    break;
                case /* string check_box_show_msg */ 10:
                    message.checkBoxShowMsg = reader.string();
                    break;
                case /* string text_placeholder */ 11:
                    message.textPlaceholder = reader.string();
                    break;
                case /* string input_placeholder */ 12:
                    message.inputPlaceholder = reader.string();
                    break;
                case /* repeated string report_filter_content */ 13:
                    message.reportFilterContent.push(reader.string());
                    break;
                case /* bilibili.community.service.dm.v1.ExpoReport expo_report */ 14:
                    message.expoReport = ExpoReport.internalBinaryRead(reader, reader.uint32(), options, message.expoReport);
                    break;
                case /* bilibili.community.service.dm.v1.BuzzwordConfig buzzword_config */ 15:
                    message.buzzwordConfig = BuzzwordConfig.internalBinaryRead(reader, reader.uint32(), options, message.buzzwordConfig);
                    break;
                case /* repeated bilibili.community.service.dm.v1.Expressions expressions */ 16:
                    message.expressions.push(Expressions.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.community.service.dm.v1.PostPanel post_panel */ 17:
                    message.postPanel.push(PostPanel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string activity_meta */ 18:
                    message.activityMeta.push(reader.string());
                    break;
                case /* repeated bilibili.community.service.dm.v1.PostPanelV2 post_panel2 */ 19:
                    message.postPanel2.push(PostPanelV2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool closed = 1; */
        if (message.closed !== false)
            writer.tag(1, WireType.Varint).bool(message.closed);
        /* bilibili.community.service.dm.v1.VideoMask mask = 2; */
        if (message.mask)
            VideoMask.internalBinaryWrite(message.mask, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.VideoSubtitle subtitle = 3; */
        if (message.subtitle)
            VideoSubtitle.internalBinaryWrite(message.subtitle, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string special_dms = 4; */
        for (let i = 0; i < message.specialDms.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.specialDms[i]);
        /* bilibili.community.service.dm.v1.DanmakuFlagConfig ai_flag = 5; */
        if (message.aiFlag)
            DanmakuFlagConfig.internalBinaryWrite(message.aiFlag, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.DanmuPlayerViewConfig player_config = 6; */
        if (message.playerConfig)
            DanmuPlayerViewConfig.internalBinaryWrite(message.playerConfig, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int32 send_box_style = 7; */
        if (message.sendBoxStyle !== 0)
            writer.tag(7, WireType.Varint).int32(message.sendBoxStyle);
        /* bool allow = 8; */
        if (message.allow !== false)
            writer.tag(8, WireType.Varint).bool(message.allow);
        /* string check_box = 9; */
        if (message.checkBox !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.checkBox);
        /* string check_box_show_msg = 10; */
        if (message.checkBoxShowMsg !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.checkBoxShowMsg);
        /* string text_placeholder = 11; */
        if (message.textPlaceholder !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.textPlaceholder);
        /* string input_placeholder = 12; */
        if (message.inputPlaceholder !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.inputPlaceholder);
        /* repeated string report_filter_content = 13; */
        for (let i = 0; i < message.reportFilterContent.length; i++)
            writer.tag(13, WireType.LengthDelimited).string(message.reportFilterContent[i]);
        /* bilibili.community.service.dm.v1.ExpoReport expo_report = 14; */
        if (message.expoReport)
            ExpoReport.internalBinaryWrite(message.expoReport, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.BuzzwordConfig buzzword_config = 15; */
        if (message.buzzwordConfig)
            BuzzwordConfig.internalBinaryWrite(message.buzzwordConfig, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.community.service.dm.v1.Expressions expressions = 16; */
        for (let i = 0; i < message.expressions.length; i++)
            Expressions.internalBinaryWrite(message.expressions[i], writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.community.service.dm.v1.PostPanel post_panel = 17; */
        for (let i = 0; i < message.postPanel.length; i++)
            PostPanel.internalBinaryWrite(message.postPanel[i], writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* repeated string activity_meta = 18; */
        for (let i = 0; i < message.activityMeta.length; i++)
            writer.tag(18, WireType.LengthDelimited).string(message.activityMeta[i]);
        /* repeated bilibili.community.service.dm.v1.PostPanelV2 post_panel2 = 19; */
        for (let i = 0; i < message.postPanel2.length; i++)
            PostPanelV2.internalBinaryWrite(message.postPanel2[i], writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmViewReply
 */
export const DmViewReply = new DmViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmViewReq$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmViewReq", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_hard_boot", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pid = 0;
        message.oid = 0;
        message.type = 0;
        message.spmid = "";
        message.isHardBoot = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toNumber();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toNumber();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string spmid */ 4:
                    message.spmid = reader.string();
                    break;
                case /* int32 is_hard_boot */ 5:
                    message.isHardBoot = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 pid = 1; */
        if (message.pid !== 0)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* int64 oid = 2; */
        if (message.oid !== 0)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string spmid = 4; */
        if (message.spmid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spmid);
        /* int32 is_hard_boot = 5; */
        if (message.isHardBoot !== 0)
            writer.tag(5, WireType.Varint).int32(message.isHardBoot);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmViewReq
 */
export const DmViewReq = new DmViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmWebViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.DmWebViewReply", [
            { no: 1, name: "state", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_side", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "dm_sge", kind: "message", T: () => DmSegConfig },
            { no: 5, name: "flag", kind: "message", T: () => DanmakuFlagConfig },
            { no: 6, name: "special_dms", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "check_box", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "commandDms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommandDm },
            { no: 10, name: "player_config", kind: "message", T: () => DanmuWebPlayerConfig },
            { no: 11, name: "report_filter_content", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "expressions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Expressions },
            { no: 13, name: "post_panel", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PostPanel },
            { no: 14, name: "activity_meta", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.state = 0;
        message.text = "";
        message.textSide = "";
        message.specialDms = [];
        message.checkBox = false;
        message.count = 0;
        message.commandDms = [];
        message.reportFilterContent = [];
        message.expressions = [];
        message.postPanel = [];
        message.activityMeta = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 state */ 1:
                    message.state = reader.int32();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string text_side */ 3:
                    message.textSide = reader.string();
                    break;
                case /* bilibili.community.service.dm.v1.DmSegConfig dm_sge */ 4:
                    message.dmSge = DmSegConfig.internalBinaryRead(reader, reader.uint32(), options, message.dmSge);
                    break;
                case /* bilibili.community.service.dm.v1.DanmakuFlagConfig flag */ 5:
                    message.flag = DanmakuFlagConfig.internalBinaryRead(reader, reader.uint32(), options, message.flag);
                    break;
                case /* repeated string special_dms */ 6:
                    message.specialDms.push(reader.string());
                    break;
                case /* bool check_box */ 7:
                    message.checkBox = reader.bool();
                    break;
                case /* int64 count */ 8:
                    message.count = reader.int64().toNumber();
                    break;
                case /* repeated bilibili.community.service.dm.v1.CommandDm commandDms */ 9:
                    message.commandDms.push(CommandDm.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.community.service.dm.v1.DanmuWebPlayerConfig player_config */ 10:
                    message.playerConfig = DanmuWebPlayerConfig.internalBinaryRead(reader, reader.uint32(), options, message.playerConfig);
                    break;
                case /* repeated string report_filter_content */ 11:
                    message.reportFilterContent.push(reader.string());
                    break;
                case /* repeated bilibili.community.service.dm.v1.Expressions expressions */ 12:
                    message.expressions.push(Expressions.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.community.service.dm.v1.PostPanel post_panel */ 13:
                    message.postPanel.push(PostPanel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string activity_meta */ 14:
                    message.activityMeta.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string text_side = 3; */
        if (message.textSide !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textSide);
        /* bilibili.community.service.dm.v1.DmSegConfig dm_sge = 4; */
        if (message.dmSge)
            DmSegConfig.internalBinaryWrite(message.dmSge, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.DanmakuFlagConfig flag = 5; */
        if (message.flag)
            DanmakuFlagConfig.internalBinaryWrite(message.flag, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated string special_dms = 6; */
        for (let i = 0; i < message.specialDms.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.specialDms[i]);
        /* bool check_box = 7; */
        if (message.checkBox !== false)
            writer.tag(7, WireType.Varint).bool(message.checkBox);
        /* int64 count = 8; */
        if (message.count !== 0)
            writer.tag(8, WireType.Varint).int64(message.count);
        /* repeated bilibili.community.service.dm.v1.CommandDm commandDms = 9; */
        for (let i = 0; i < message.commandDms.length; i++)
            CommandDm.internalBinaryWrite(message.commandDms[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.DanmuWebPlayerConfig player_config = 10; */
        if (message.playerConfig)
            DanmuWebPlayerConfig.internalBinaryWrite(message.playerConfig, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated string report_filter_content = 11; */
        for (let i = 0; i < message.reportFilterContent.length; i++)
            writer.tag(11, WireType.LengthDelimited).string(message.reportFilterContent[i]);
        /* repeated bilibili.community.service.dm.v1.Expressions expressions = 12; */
        for (let i = 0; i < message.expressions.length; i++)
            Expressions.internalBinaryWrite(message.expressions[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.community.service.dm.v1.PostPanel post_panel = 13; */
        for (let i = 0; i < message.postPanel.length; i++)
            PostPanel.internalBinaryWrite(message.postPanel[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated string activity_meta = 14; */
        for (let i = 0; i < message.activityMeta.length; i++)
            writer.tag(14, WireType.LengthDelimited).string(message.activityMeta[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.DmWebViewReply
 */
export const DmWebViewReply = new DmWebViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpoReport$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.ExpoReport", [
            { no: 1, name: "should_report_at_end", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.shouldReportAtEnd = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool should_report_at_end */ 1:
                    message.shouldReportAtEnd = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool should_report_at_end = 1; */
        if (message.shouldReportAtEnd !== false)
            writer.tag(1, WireType.Varint).bool(message.shouldReportAtEnd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.ExpoReport
 */
export const ExpoReport = new ExpoReport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expression$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.Expression", [
            { no: 1, name: "keyword", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "period", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Period }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keyword = [];
        message.url = "";
        message.period = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string keyword */ 1:
                    message.keyword.push(reader.string());
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* repeated bilibili.community.service.dm.v1.Period period */ 3:
                    message.period.push(Period.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string keyword = 1; */
        for (let i = 0; i < message.keyword.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.keyword[i]);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* repeated bilibili.community.service.dm.v1.Period period = 3; */
        for (let i = 0; i < message.period.length; i++)
            Period.internalBinaryWrite(message.period[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.Expression
 */
export const Expression = new Expression$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expressions$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.Expressions", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Expression }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.community.service.dm.v1.Expression data */ 1:
                    message.data.push(Expression.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.community.service.dm.v1.Expression data = 1; */
        for (let i = 0; i < message.data.length; i++)
            Expression.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.Expressions
 */
export const Expressions = new Expressions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InlinePlayerDanmakuSwitch$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
 */
export const InlinePlayerDanmakuSwitch = new InlinePlayerDanmakuSwitch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Label$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.Label", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.content = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* repeated string content */ 2:
                    message.content.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* repeated string content = 2; */
        for (let i = 0; i < message.content.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.content[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.Label
 */
export const Label = new Label$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LabelV2$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.LabelV2", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "exposure_once", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "exposure_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.content = [];
        message.exposureOnce = false;
        message.exposureType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* repeated string content */ 2:
                    message.content.push(reader.string());
                    break;
                case /* bool exposure_once */ 3:
                    message.exposureOnce = reader.bool();
                    break;
                case /* int32 exposure_type */ 4:
                    message.exposureType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* repeated string content = 2; */
        for (let i = 0; i < message.content.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.content[i]);
        /* bool exposure_once = 3; */
        if (message.exposureOnce !== false)
            writer.tag(3, WireType.Varint).bool(message.exposureOnce);
        /* int32 exposure_type = 4; */
        if (message.exposureType !== 0)
            writer.tag(4, WireType.Varint).int32(message.exposureType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.LabelV2
 */
export const LabelV2 = new LabelV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Period$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.Period", [
            { no: 1, name: "start", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.start = 0;
        message.end = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start */ 1:
                    message.start = reader.int64().toNumber();
                    break;
                case /* int64 end */ 2:
                    message.end = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 start = 1; */
        if (message.start !== 0)
            writer.tag(1, WireType.Varint).int64(message.start);
        /* int64 end = 2; */
        if (message.end !== 0)
            writer.tag(2, WireType.Varint).int64(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.Period
 */
export const Period = new Period$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuAiRecommendedLevel$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
 */
export const PlayerDanmakuAiRecommendedLevel = new PlayerDanmakuAiRecommendedLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuAiRecommendedLevelV2$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2", [
            { no: 1, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 value */ 1:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
 */
export const PlayerDanmakuAiRecommendedLevelV2 = new PlayerDanmakuAiRecommendedLevelV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuAiRecommendedSwitch$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
 */
export const PlayerDanmakuAiRecommendedSwitch = new PlayerDanmakuAiRecommendedSwitch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuBlockbottom$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
 */
export const PlayerDanmakuBlockbottom = new PlayerDanmakuBlockbottom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuBlockcolorful$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
 */
export const PlayerDanmakuBlockcolorful = new PlayerDanmakuBlockcolorful$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuBlockrepeat$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
 */
export const PlayerDanmakuBlockrepeat = new PlayerDanmakuBlockrepeat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuBlockscroll$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
 */
export const PlayerDanmakuBlockscroll = new PlayerDanmakuBlockscroll$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuBlockspecial$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
 */
export const PlayerDanmakuBlockspecial = new PlayerDanmakuBlockspecial$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuBlocktop$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuBlocktop", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
 */
export const PlayerDanmakuBlocktop = new PlayerDanmakuBlocktop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuDomain$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuDomain", [
            { no: 1, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float value */ 1:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* float value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuDomain
 */
export const PlayerDanmakuDomain = new PlayerDanmakuDomain$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuEnableblocklist$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
 */
export const PlayerDanmakuEnableblocklist = new PlayerDanmakuEnableblocklist$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuOpacity$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuOpacity", [
            { no: 1, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float value */ 1:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* float value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuOpacity
 */
export const PlayerDanmakuOpacity = new PlayerDanmakuOpacity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuScalingfactor$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor", [
            { no: 1, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float value */ 1:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* float value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
 */
export const PlayerDanmakuScalingfactor = new PlayerDanmakuScalingfactor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuSeniorModeSwitch$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch", [
            { no: 1, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 value */ 1:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
 */
export const PlayerDanmakuSeniorModeSwitch = new PlayerDanmakuSeniorModeSwitch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuSpeed$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuSpeed", [
            { no: 1, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 value */ 1:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuSpeed
 */
export const PlayerDanmakuSpeed = new PlayerDanmakuSpeed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuSwitch$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuSwitch", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "can_ignore", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        message.canIgnore = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                case /* bool can_ignore */ 2:
                    message.canIgnore = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        /* bool can_ignore = 2; */
        if (message.canIgnore !== false)
            writer.tag(2, WireType.Varint).bool(message.canIgnore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuSwitch
 */
export const PlayerDanmakuSwitch = new PlayerDanmakuSwitch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuSwitchSave$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
 */
export const PlayerDanmakuSwitchSave = new PlayerDanmakuSwitchSave$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDanmakuUseDefaultConfig$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
 */
export const PlayerDanmakuUseDefaultConfig = new PlayerDanmakuUseDefaultConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostPanel$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PostPanel", [
            { no: 1, name: "start", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "biz_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "biz_type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.PostPanelBizType", PostPanelBizType] },
            { no: 6, name: "click_button", kind: "message", T: () => ClickButton },
            { no: 7, name: "text_input", kind: "message", T: () => TextInput },
            { no: 8, name: "check_box", kind: "message", T: () => CheckBox },
            { no: 9, name: "toast", kind: "message", T: () => Toast }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.start = 0;
        message.end = 0;
        message.priority = 0;
        message.bizId = 0;
        message.bizType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start */ 1:
                    message.start = reader.int64().toNumber();
                    break;
                case /* int64 end */ 2:
                    message.end = reader.int64().toNumber();
                    break;
                case /* int64 priority */ 3:
                    message.priority = reader.int64().toNumber();
                    break;
                case /* int64 biz_id */ 4:
                    message.bizId = reader.int64().toNumber();
                    break;
                case /* bilibili.community.service.dm.v1.PostPanelBizType biz_type */ 5:
                    message.bizType = reader.int32();
                    break;
                case /* bilibili.community.service.dm.v1.ClickButton click_button */ 6:
                    message.clickButton = ClickButton.internalBinaryRead(reader, reader.uint32(), options, message.clickButton);
                    break;
                case /* bilibili.community.service.dm.v1.TextInput text_input */ 7:
                    message.textInput = TextInput.internalBinaryRead(reader, reader.uint32(), options, message.textInput);
                    break;
                case /* bilibili.community.service.dm.v1.CheckBox check_box */ 8:
                    message.checkBox = CheckBox.internalBinaryRead(reader, reader.uint32(), options, message.checkBox);
                    break;
                case /* bilibili.community.service.dm.v1.Toast toast */ 9:
                    message.toast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.toast);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 start = 1; */
        if (message.start !== 0)
            writer.tag(1, WireType.Varint).int64(message.start);
        /* int64 end = 2; */
        if (message.end !== 0)
            writer.tag(2, WireType.Varint).int64(message.end);
        /* int64 priority = 3; */
        if (message.priority !== 0)
            writer.tag(3, WireType.Varint).int64(message.priority);
        /* int64 biz_id = 4; */
        if (message.bizId !== 0)
            writer.tag(4, WireType.Varint).int64(message.bizId);
        /* bilibili.community.service.dm.v1.PostPanelBizType biz_type = 5; */
        if (message.bizType !== 0)
            writer.tag(5, WireType.Varint).int32(message.bizType);
        /* bilibili.community.service.dm.v1.ClickButton click_button = 6; */
        if (message.clickButton)
            ClickButton.internalBinaryWrite(message.clickButton, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.TextInput text_input = 7; */
        if (message.textInput)
            TextInput.internalBinaryWrite(message.textInput, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.CheckBox check_box = 8; */
        if (message.checkBox)
            CheckBox.internalBinaryWrite(message.checkBox, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.Toast toast = 9; */
        if (message.toast)
            Toast.internalBinaryWrite(message.toast, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PostPanel
 */
export const PostPanel = new PostPanel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostPanelV2$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.PostPanelV2", [
            { no: 1, name: "start", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "biz_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "click_button", kind: "message", T: () => ClickButtonV2 },
            { no: 5, name: "text_input", kind: "message", T: () => TextInputV2 },
            { no: 6, name: "check_box", kind: "message", T: () => CheckBoxV2 },
            { no: 7, name: "toast", kind: "message", T: () => ToastV2 },
            { no: 8, name: "bubble", kind: "message", T: () => BubbleV2 },
            { no: 9, name: "label", kind: "message", T: () => LabelV2 },
            { no: 10, name: "post_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.start = 0;
        message.end = 0;
        message.bizType = 0;
        message.postStatus = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start */ 1:
                    message.start = reader.int64().toNumber();
                    break;
                case /* int64 end */ 2:
                    message.end = reader.int64().toNumber();
                    break;
                case /* int32 biz_type */ 3:
                    message.bizType = reader.int32();
                    break;
                case /* bilibili.community.service.dm.v1.ClickButtonV2 click_button */ 4:
                    message.clickButton = ClickButtonV2.internalBinaryRead(reader, reader.uint32(), options, message.clickButton);
                    break;
                case /* bilibili.community.service.dm.v1.TextInputV2 text_input */ 5:
                    message.textInput = TextInputV2.internalBinaryRead(reader, reader.uint32(), options, message.textInput);
                    break;
                case /* bilibili.community.service.dm.v1.CheckBoxV2 check_box */ 6:
                    message.checkBox = CheckBoxV2.internalBinaryRead(reader, reader.uint32(), options, message.checkBox);
                    break;
                case /* bilibili.community.service.dm.v1.ToastV2 toast */ 7:
                    message.toast = ToastV2.internalBinaryRead(reader, reader.uint32(), options, message.toast);
                    break;
                case /* bilibili.community.service.dm.v1.BubbleV2 bubble */ 8:
                    message.bubble = BubbleV2.internalBinaryRead(reader, reader.uint32(), options, message.bubble);
                    break;
                case /* bilibili.community.service.dm.v1.LabelV2 label */ 9:
                    message.label = LabelV2.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                case /* int32 post_status */ 10:
                    message.postStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 start = 1; */
        if (message.start !== 0)
            writer.tag(1, WireType.Varint).int64(message.start);
        /* int64 end = 2; */
        if (message.end !== 0)
            writer.tag(2, WireType.Varint).int64(message.end);
        /* int32 biz_type = 3; */
        if (message.bizType !== 0)
            writer.tag(3, WireType.Varint).int32(message.bizType);
        /* bilibili.community.service.dm.v1.ClickButtonV2 click_button = 4; */
        if (message.clickButton)
            ClickButtonV2.internalBinaryWrite(message.clickButton, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.TextInputV2 text_input = 5; */
        if (message.textInput)
            TextInputV2.internalBinaryWrite(message.textInput, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.CheckBoxV2 check_box = 6; */
        if (message.checkBox)
            CheckBoxV2.internalBinaryWrite(message.checkBox, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.ToastV2 toast = 7; */
        if (message.toast)
            ToastV2.internalBinaryWrite(message.toast, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.BubbleV2 bubble = 8; */
        if (message.bubble)
            BubbleV2.internalBinaryWrite(message.bubble, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.LabelV2 label = 9; */
        if (message.label)
            LabelV2.internalBinaryWrite(message.label, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int32 post_status = 10; */
        if (message.postStatus !== 0)
            writer.tag(10, WireType.Varint).int32(message.postStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.PostPanelV2
 */
export const PostPanelV2 = new PostPanelV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.Response", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.code = 0;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.Response
 */
export const Response = new Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubtitleItem$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.SubtitleItem", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lan", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "lan_doc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "subtitle_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "author", kind: "message", T: () => UserInfo },
            { no: 7, name: "type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.SubtitleType", SubtitleType] },
            { no: 8, name: "lan_doc_brief", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "ai_type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.SubtitleAiType", SubtitleAiType] },
            { no: 10, name: "ai_status", kind: "enum", T: () => ["bilibili.community.service.dm.v1.SubtitleAiStatus", SubtitleAiStatus] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0;
        message.idStr = "";
        message.lan = "";
        message.lanDoc = "";
        message.subtitleUrl = "";
        message.type = 0;
        message.lanDocBrief = "";
        message.aiType = 0;
        message.aiStatus = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string id_str */ 2:
                    message.idStr = reader.string();
                    break;
                case /* string lan */ 3:
                    message.lan = reader.string();
                    break;
                case /* string lan_doc */ 4:
                    message.lanDoc = reader.string();
                    break;
                case /* string subtitle_url */ 5:
                    message.subtitleUrl = reader.string();
                    break;
                case /* bilibili.community.service.dm.v1.UserInfo author */ 6:
                    message.author = UserInfo.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* bilibili.community.service.dm.v1.SubtitleType type */ 7:
                    message.type = reader.int32();
                    break;
                case /* string lan_doc_brief */ 8:
                    message.lanDocBrief = reader.string();
                    break;
                case /* bilibili.community.service.dm.v1.SubtitleAiType ai_type */ 9:
                    message.aiType = reader.int32();
                    break;
                case /* bilibili.community.service.dm.v1.SubtitleAiStatus ai_status */ 10:
                    message.aiStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string id_str = 2; */
        if (message.idStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idStr);
        /* string lan = 3; */
        if (message.lan !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.lan);
        /* string lan_doc = 4; */
        if (message.lanDoc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lanDoc);
        /* string subtitle_url = 5; */
        if (message.subtitleUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.subtitleUrl);
        /* bilibili.community.service.dm.v1.UserInfo author = 6; */
        if (message.author)
            UserInfo.internalBinaryWrite(message.author, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.SubtitleType type = 7; */
        if (message.type !== 0)
            writer.tag(7, WireType.Varint).int32(message.type);
        /* string lan_doc_brief = 8; */
        if (message.lanDocBrief !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.lanDocBrief);
        /* bilibili.community.service.dm.v1.SubtitleAiType ai_type = 9; */
        if (message.aiType !== 0)
            writer.tag(9, WireType.Varint).int32(message.aiType);
        /* bilibili.community.service.dm.v1.SubtitleAiStatus ai_status = 10; */
        if (message.aiStatus !== 0)
            writer.tag(10, WireType.Varint).int32(message.aiStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.SubtitleItem
 */
export const SubtitleItem = new SubtitleItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextInput$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.TextInput", [
            { no: 1, name: "portrait_placeholder", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "landscape_placeholder", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "render_type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.RenderType", RenderType] },
            { no: 4, name: "placeholder_post", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "avatar", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Avatar },
            { no: 7, name: "post_status", kind: "enum", T: () => ["bilibili.community.service.dm.v1.PostStatus", PostStatus] },
            { no: 8, name: "label", kind: "message", T: () => Label }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portraitPlaceholder = [];
        message.landscapePlaceholder = [];
        message.renderType = 0;
        message.placeholderPost = false;
        message.show = false;
        message.avatar = [];
        message.postStatus = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string portrait_placeholder */ 1:
                    message.portraitPlaceholder.push(reader.string());
                    break;
                case /* repeated string landscape_placeholder */ 2:
                    message.landscapePlaceholder.push(reader.string());
                    break;
                case /* bilibili.community.service.dm.v1.RenderType render_type */ 3:
                    message.renderType = reader.int32();
                    break;
                case /* bool placeholder_post */ 4:
                    message.placeholderPost = reader.bool();
                    break;
                case /* bool show */ 5:
                    message.show = reader.bool();
                    break;
                case /* repeated bilibili.community.service.dm.v1.Avatar avatar */ 6:
                    message.avatar.push(Avatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.community.service.dm.v1.PostStatus post_status */ 7:
                    message.postStatus = reader.int32();
                    break;
                case /* bilibili.community.service.dm.v1.Label label */ 8:
                    message.label = Label.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string portrait_placeholder = 1; */
        for (let i = 0; i < message.portraitPlaceholder.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.portraitPlaceholder[i]);
        /* repeated string landscape_placeholder = 2; */
        for (let i = 0; i < message.landscapePlaceholder.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.landscapePlaceholder[i]);
        /* bilibili.community.service.dm.v1.RenderType render_type = 3; */
        if (message.renderType !== 0)
            writer.tag(3, WireType.Varint).int32(message.renderType);
        /* bool placeholder_post = 4; */
        if (message.placeholderPost !== false)
            writer.tag(4, WireType.Varint).bool(message.placeholderPost);
        /* bool show = 5; */
        if (message.show !== false)
            writer.tag(5, WireType.Varint).bool(message.show);
        /* repeated bilibili.community.service.dm.v1.Avatar avatar = 6; */
        for (let i = 0; i < message.avatar.length; i++)
            Avatar.internalBinaryWrite(message.avatar[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.community.service.dm.v1.PostStatus post_status = 7; */
        if (message.postStatus !== 0)
            writer.tag(7, WireType.Varint).int32(message.postStatus);
        /* bilibili.community.service.dm.v1.Label label = 8; */
        if (message.label)
            Label.internalBinaryWrite(message.label, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.TextInput
 */
export const TextInput = new TextInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextInputV2$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.TextInputV2", [
            { no: 1, name: "portrait_placeholder", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "landscape_placeholder", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "render_type", kind: "enum", T: () => ["bilibili.community.service.dm.v1.RenderType", RenderType] },
            { no: 4, name: "placeholder_post", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "avatar", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Avatar },
            { no: 6, name: "text_input_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portraitPlaceholder = [];
        message.landscapePlaceholder = [];
        message.renderType = 0;
        message.placeholderPost = false;
        message.avatar = [];
        message.textInputLimit = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string portrait_placeholder */ 1:
                    message.portraitPlaceholder.push(reader.string());
                    break;
                case /* repeated string landscape_placeholder */ 2:
                    message.landscapePlaceholder.push(reader.string());
                    break;
                case /* bilibili.community.service.dm.v1.RenderType render_type */ 3:
                    message.renderType = reader.int32();
                    break;
                case /* bool placeholder_post */ 4:
                    message.placeholderPost = reader.bool();
                    break;
                case /* repeated bilibili.community.service.dm.v1.Avatar avatar */ 5:
                    message.avatar.push(Avatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 text_input_limit */ 6:
                    message.textInputLimit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string portrait_placeholder = 1; */
        for (let i = 0; i < message.portraitPlaceholder.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.portraitPlaceholder[i]);
        /* repeated string landscape_placeholder = 2; */
        for (let i = 0; i < message.landscapePlaceholder.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.landscapePlaceholder[i]);
        /* bilibili.community.service.dm.v1.RenderType render_type = 3; */
        if (message.renderType !== 0)
            writer.tag(3, WireType.Varint).int32(message.renderType);
        /* bool placeholder_post = 4; */
        if (message.placeholderPost !== false)
            writer.tag(4, WireType.Varint).bool(message.placeholderPost);
        /* repeated bilibili.community.service.dm.v1.Avatar avatar = 5; */
        for (let i = 0; i < message.avatar.length; i++)
            Avatar.internalBinaryWrite(message.avatar[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 text_input_limit = 6; */
        if (message.textInputLimit !== 0)
            writer.tag(6, WireType.Varint).int32(message.textInputLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.TextInputV2
 */
export const TextInputV2 = new TextInputV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Toast$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.Toast", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "button", kind: "message", T: () => Button }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.duration = 0;
        message.show = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int32 duration */ 2:
                    message.duration = reader.int32();
                    break;
                case /* bool show */ 3:
                    message.show = reader.bool();
                    break;
                case /* bilibili.community.service.dm.v1.Button button */ 4:
                    message.button = Button.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int32 duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Varint).int32(message.duration);
        /* bool show = 3; */
        if (message.show !== false)
            writer.tag(3, WireType.Varint).bool(message.show);
        /* bilibili.community.service.dm.v1.Button button = 4; */
        if (message.button)
            Button.internalBinaryWrite(message.button, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.Toast
 */
export const Toast = new Toast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToastButtonV2$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.ToastButtonV2", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.action = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int32 action */ 2:
                    message.action = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int32 action = 2; */
        if (message.action !== 0)
            writer.tag(2, WireType.Varint).int32(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.ToastButtonV2
 */
export const ToastButtonV2 = new ToastButtonV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToastV2$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.ToastV2", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "toast_button_v2", kind: "message", T: () => ToastButtonV2 }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.text = "";
        message.duration = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int32 duration */ 2:
                    message.duration = reader.int32();
                    break;
                case /* bilibili.community.service.dm.v1.ToastButtonV2 toast_button_v2 */ 3:
                    message.toastButtonV2 = ToastButtonV2.internalBinaryRead(reader, reader.uint32(), options, message.toastButtonV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int32 duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Varint).int32(message.duration);
        /* bilibili.community.service.dm.v1.ToastButtonV2 toast_button_v2 = 3; */
        if (message.toastButtonV2)
            ToastButtonV2.internalBinaryWrite(message.toastButtonV2, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.ToastV2
 */
export const ToastV2 = new ToastV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserInfo$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.UserInfo", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sex", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "face", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "rank", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mid = 0;
        message.name = "";
        message.sex = "";
        message.face = "";
        message.sign = "";
        message.rank = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string sex */ 3:
                    message.sex = reader.string();
                    break;
                case /* string face */ 4:
                    message.face = reader.string();
                    break;
                case /* string sign */ 5:
                    message.sign = reader.string();
                    break;
                case /* int32 rank */ 6:
                    message.rank = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string sex = 3; */
        if (message.sex !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sex);
        /* string face = 4; */
        if (message.face !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.face);
        /* string sign = 5; */
        if (message.sign !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.sign);
        /* int32 rank = 6; */
        if (message.rank !== 0)
            writer.tag(6, WireType.Varint).int32(message.rank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.UserInfo
 */
export const UserInfo = new UserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoMask$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.VideoMask", [
            { no: 1, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "plat", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "fps", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "mask_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.cid = 0;
        message.plat = 0;
        message.fps = 0;
        message.time = 0;
        message.maskUrl = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 cid */ 1:
                    message.cid = reader.int64().toNumber();
                    break;
                case /* int32 plat */ 2:
                    message.plat = reader.int32();
                    break;
                case /* int32 fps */ 3:
                    message.fps = reader.int32();
                    break;
                case /* int64 time */ 4:
                    message.time = reader.int64().toNumber();
                    break;
                case /* string mask_url */ 5:
                    message.maskUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 cid = 1; */
        if (message.cid !== 0)
            writer.tag(1, WireType.Varint).int64(message.cid);
        /* int32 plat = 2; */
        if (message.plat !== 0)
            writer.tag(2, WireType.Varint).int32(message.plat);
        /* int32 fps = 3; */
        if (message.fps !== 0)
            writer.tag(3, WireType.Varint).int32(message.fps);
        /* int64 time = 4; */
        if (message.time !== 0)
            writer.tag(4, WireType.Varint).int64(message.time);
        /* string mask_url = 5; */
        if (message.maskUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.maskUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.VideoMask
 */
export const VideoMask = new VideoMask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoSubtitle$Type extends MessageType {
    constructor() {
        super("bilibili.community.service.dm.v1.VideoSubtitle", [
            { no: 1, name: "lan", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lanDoc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "subtitles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SubtitleItem }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.lan = "";
        message.lanDoc = "";
        message.subtitles = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string lan */ 1:
                    message.lan = reader.string();
                    break;
                case /* string lanDoc */ 2:
                    message.lanDoc = reader.string();
                    break;
                case /* repeated bilibili.community.service.dm.v1.SubtitleItem subtitles */ 3:
                    message.subtitles.push(SubtitleItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string lan = 1; */
        if (message.lan !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.lan);
        /* string lanDoc = 2; */
        if (message.lanDoc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lanDoc);
        /* repeated bilibili.community.service.dm.v1.SubtitleItem subtitles = 3; */
        for (let i = 0; i < message.subtitles.length; i++)
            SubtitleItem.internalBinaryWrite(message.subtitles[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.community.service.dm.v1.VideoSubtitle
 */
export const VideoSubtitle = new VideoSubtitle$Type();
/**
 * @generated ServiceType for protobuf service bilibili.community.service.dm.v1.DM
 */
export const DM = new ServiceType("bilibili.community.service.dm.v1.DM", [
    { name: "DmSegMobile", options: {}, I: DmSegMobileReq, O: DmSegMobileReply },
    { name: "DmView", options: {}, I: DmViewReq, O: DmViewReply },
    { name: "DmPlayerConfig", options: {}, I: DmPlayerConfigReq, O: Response },
    { name: "DmSegOtt", options: {}, I: DmSegOttReq, O: DmSegOttReply },
    { name: "DmSegSDK", options: {}, I: DmSegSDKReq, O: DmSegSDKReply },
    { name: "DmExpoReport", options: {}, I: DmExpoReportReq, O: DmExpoReportRes }
]);
